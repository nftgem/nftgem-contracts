{
  "address": "0xc7ACb9C920A0c45E878E6c41A75D656c04caedd2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currencyID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "NewExchange",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_currencyID",
          "type": "uint256"
        }
      ],
      "name": "createExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensToExchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x455b7471fb4e481b4619c055393ed8348aab1d6892f285ce2c1633a1b618fa19",
  "receipt": {
    "to": null,
    "from": "0x16c64703E5b886E3E29fDc13d3f6e56b69b210ef",
    "contractAddress": "0xc7ACb9C920A0c45E878E6c41A75D656c04caedd2",
    "transactionIndex": 3,
    "gasUsed": "4053696",
    "logsBloom": "0x
    "blockHash": "0x0000300600001244f28c04aa8ea915add8c43b196ea82f790cef651a629d1f74",
    "transactionHash": "0x455b7471fb4e481b4619c055393ed8348aab1d6892f285ce2c1633a1b618fa19",
    "logs": [],
    "blockNumber": 7712228,
    "cumulativeGasUsed": "4499736",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ad9575e4ba528ca30d458991ae547083",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currencyID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"NewExchange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currencyID\",\"type\":\"uint256\"}],\"name\":\"createExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensToExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createExchange(address,address,uint256)\":{\"params\":{\"_currency\":\"The address of the currency token contract\",\"_currencyID\":\"The id of the currency token\",\"_token\":\"The address of the ERC-1155 token contract\"}}},\"stateVariables\":{\"tokensToExchange\":{\"params\":{\"_currency\":\"The address of the currency token contract\",\"_currencyID\":\"The id of the currency token\",\"_token\":\"The address of the ERC-1155 token contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createExchange(address,address,uint256)\":{\"notice\":\"Creates a Unigem1155 Exchange for given token contract\"},\"tokensToExchange(address,address,uint256)\":{\"notice\":\"Return address of exchange for corresponding ERC-1155 token contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/factories/Unigem1155Factory.sol\":\"Unigem1155Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"src/exchange/Unigem1155Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.0;\\n\\npragma experimental ABIEncoderV2;\\nimport \\\"../interfaces/IUnigem1155Exchange.sol\\\";\\nimport \\\"../utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"../tokens/ERC1155/ERC1155MintBurn.sol\\\";\\n\\n\\n/**\\n * This Uniswap-like implementation supports ERC-1155 standard tokens\\n * with an ERC-1155 based token used as a currency instead of Ether.\\n *\\n * See https://github.com/0xsequence/erc20-meta-token for a generalized\\n * ERC-20 => ERC-1155 token wrapper\\n *\\n * Liquidity tokens are also ERC-1155 tokens you can find the ERC-1155\\n * implementation used here:\\n *    https://github.com/horizon-games/multi-token-standard/tree/master/contracts/tokens/ERC1155\\n *\\n * @dev Like Uniswap, tokens with 0 decimals and low supply are susceptible to significant rounding\\n *      errors when it comes to removing liquidity, possibly preventing them to be withdrawn without\\n *      some collaboration between liquidity providers.\\n */\\ncontract Unigem1155Exchange is ReentrancyGuard, ERC1155MintBurn, IUnigem1155Exchange {\\n  using SafeMath for uint256;\\n\\n  /***********************************|\\n  |       Variables & Constants       |\\n  |__________________________________*/\\n\\n  // Variables\\n  IERC1155 internal token;                        // address of the ERC-1155 token contract\\n  IERC1155 internal currency;                     // address of the ERC-1155 currency used for exchange\\n  bool internal currencyPoolBanned;               // Whether the currency token ID can have a pool or not\\n  address internal factory;                       // address for the factory that created this contract\\n  uint256 internal currencyID;                    // ID of currency token in ERC-1155 currency contract\\n  uint256 internal constant FEE_MULTIPLIER = 995; // Multiplier that calculates the fee (0.5%)\\n\\n  // Mapping variables\\n  mapping(uint256 => uint256) internal totalSupplies;    // Liquidity pool token supply per Token id\\n  mapping(uint256 => uint256) internal currencyReserves; // currency Token reserve per Token id\\n\\n\\n  /***********************************|\\n  |            Constructor           |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Create instance of exchange contract with respective token and currency token\\n   * @param _tokenAddr     The address of the ERC-1155 Token\\n   * @param _currencyAddr  The address of the ERC-1155 currency Token\\n   * @param _currencyID    The ID of the ERC-1155 currency Token\\n   */\\n  constructor(address _tokenAddr, address _currencyAddr, uint256 _currencyID) {\\n    require(\\n      address(_tokenAddr) != address(0) && _currencyAddr != address(0),\\n      \\\"UnigemExchange#constructor:INVALID_INPUT\\\"\\n    );\\n    factory = msg.sender;\\n    token = IERC1155(_tokenAddr);\\n    currency = IERC1155(_currencyAddr);\\n    currencyID = _currencyID;\\n\\n    // If token and currency are the same contract,\\n    // need to prevent currency/currency pool to be created.\\n    currencyPoolBanned = _currencyAddr == _tokenAddr ? true : false;\\n  }\\n\\n  /***********************************|\\n  |        Exchange Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Convert currency tokens to Tokens _id and transfers Tokens to recipient.\\n   * @dev User specifies MAXIMUM inputs (_maxCurrency) and EXACT outputs.\\n   * @dev Assumes that all trades will be successful, or revert the whole tx\\n   * @dev Exceeding currency tokens sent will be refunded to recipient\\n   * @dev Sorting IDs is mandatory for efficient way of preventing duplicated IDs (which would lead to exploit)\\n   * @param _tokenIds             Array of Tokens ID that are bought\\n   * @param _tokensBoughtAmounts  Amount of Tokens id bought for each corresponding Token id in _tokenIds\\n   * @param _maxCurrency          Total maximum amount of currency tokens to spend for all Token ids\\n   * @param _deadline             Timestamp after which this transaction will be reverted\\n   * @param _recipient            The address that receives output Tokens and refund\\n   * @return currencySold How much currency was actually sold.\\n   */\\n  function _currencyToToken(\\n    uint256[] memory _tokenIds,\\n    uint256[] memory _tokensBoughtAmounts,\\n    uint256 _maxCurrency,\\n    uint256 _deadline,\\n    address _recipient)\\n    internal nonReentrant() returns (uint256[] memory currencySold)\\n  {\\n    // Input validation\\n    require(_deadline >= block.timestamp, \\\"UnigemExchange#_currencyToToken: DEADLINE_EXCEEDED\\\");\\n\\n    // Number of Token IDs to deposit\\n    uint256 nTokens = _tokenIds.length;\\n    uint256 totalRefundCurrency = _maxCurrency;\\n\\n    // Initialize variables\\n    currencySold = new uint256[](nTokens); // Amount of currency tokens sold per ID\\n    uint256[] memory tokenReserves = new uint256[](nTokens);  // Amount of tokens in reserve for each Token id\\n\\n    // Get token reserves\\n    tokenReserves = _getTokenReserves(_tokenIds);\\n\\n    // Assumes he currency Tokens are already received by contract, but not\\n    // the Tokens Ids\\n\\n    // Remove liquidity for each Token ID in _tokenIds\\n    for (uint256 i = 0; i < nTokens; i++) {\\n      // Store current id and amount from argument arrays\\n      uint256 idBought = _tokenIds[i];\\n      uint256 amountBought = _tokensBoughtAmounts[i];\\n      uint256 tokenReserve = tokenReserves[i];\\n\\n      require(amountBought > 0, \\\"UnigemExchange#_currencyToToken: NULL_TOKENS_BOUGHT\\\");\\n\\n      // Load currency token and Token _id reserves\\n      uint256 currencyReserve = currencyReserves[idBought];\\n\\n      // Get amount of currency tokens to send for purchase\\n      // Neither reserves amount have been changed so far in this transaction, so\\n      // no adjustment to the inputs is needed\\n      uint256 currencyAmount = getBuyPrice(amountBought, currencyReserve, tokenReserve);\\n\\n      // Calculate currency token amount to refund (if any) where whatever is not used will be returned\\n      // Will throw if total cost exceeds _maxCurrency\\n      totalRefundCurrency = totalRefundCurrency.sub(currencyAmount);\\n\\n      // Append Token id, Token id amount and currency token amount to tracking arrays\\n      currencySold[i] = currencyAmount;\\n\\n      // Update individual currency reseve amount\\n      currencyReserves[idBought] = currencyReserve.add(currencyAmount);\\n    }\\n\\n    // Refund currency token if any\\n    if (totalRefundCurrency > 0) {\\n      currency.safeTransferFrom(address(this), _recipient, currencyID, totalRefundCurrency, \\\"\\\");\\n    }\\n\\n    // Send Tokens all tokens purchased\\n    token.safeBatchTransferFrom(address(this), _recipient, _tokenIds, _tokensBoughtAmounts, \\\"\\\");\\n    return currencySold;\\n  }\\n\\n  /**\\n   * @dev Pricing function used for converting between currency token to Tokens.\\n   * @param _assetBoughtAmount  Amount of Tokens being bought.\\n   * @param _assetSoldReserve   Amount of currency tokens in exchange reserves.\\n   * @param _assetBoughtReserve Amount of Tokens (output type) in exchange reserves.\\n   * @return price Amount of currency tokens to send to Unigem.\\n   */\\n  function getBuyPrice(\\n    uint256 _assetBoughtAmount,\\n    uint256 _assetSoldReserve,\\n    uint256 _assetBoughtReserve)\\n    override public pure returns (uint256 price)\\n  {\\n    // Reserves must not be empty\\n    require(_assetSoldReserve > 0 && _assetBoughtReserve > 0, \\\"UnigemExchange#getBuyPrice: EMPTY_RESERVE\\\");\\n\\n    // Calculate price with fee\\n    uint256 numerator = _assetSoldReserve.mul(_assetBoughtAmount).mul(1000);\\n    uint256 denominator = (_assetBoughtReserve.sub(_assetBoughtAmount)).mul(FEE_MULTIPLIER);\\n    (price, ) = divRound(numerator, denominator);\\n    return price; // Will add 1 if rounding error\\n  }\\n\\n  /**\\n   * @notice Convert Tokens _id to currency tokens and transfers Tokens to recipient.\\n   * @dev User specifies EXACT Tokens _id sold and MINIMUM currency tokens received.\\n   * @dev Assumes that all trades will be valid, or the whole tx will fail\\n   * @dev Sorting _tokenIds is mandatory for efficient way of preventing duplicated IDs (which would lead to errors)\\n   * @param _tokenIds          Array of Token IDs that are sold\\n   * @param _tokensSoldAmounts Array of Amount of Tokens sold for each id in _tokenIds.\\n   * @param _minCurrency       Minimum amount of currency tokens to receive\\n   * @param _deadline          Timestamp after which this transaction will be reverted\\n   * @param _recipient         The address that receives output currency tokens.\\n   * @return currencyBought How much currency was actually purchased.\\n   */\\n  function _tokenToCurrency(\\n    uint256[] memory _tokenIds,\\n    uint256[] memory _tokensSoldAmounts,\\n    uint256 _minCurrency,\\n    uint256 _deadline,\\n    address _recipient)\\n    internal nonReentrant() returns (uint256[] memory currencyBought)\\n  {\\n    // Number of Token IDs to deposit\\n    uint256 nTokens = _tokenIds.length;\\n\\n    // Input validation\\n    require(_deadline >= block.timestamp, \\\"UnigemExchange#_tokenToCurrency: DEADLINE_EXCEEDED\\\");\\n\\n    // Initialize variables\\n    uint256 totalCurrency = 0; // Total amount of currency tokens to transfer\\n    currencyBought = new uint256[](nTokens);\\n    uint256[] memory tokenReserves = new uint256[](nTokens);\\n\\n    // Get token reserves\\n    tokenReserves = _getTokenReserves(_tokenIds);\\n\\n    // Assumes the Tokens ids are already received by contract, but not\\n    // the Tokens Ids. Will return cards not sold if invalid price.\\n\\n    // Remove liquidity for each Token ID in _tokenIds\\n    for (uint256 i = 0; i < nTokens; i++) {\\n      // Store current id and amount from argument arrays\\n      uint256 idSold = _tokenIds[i];\\n      uint256 amountSold = _tokensSoldAmounts[i];\\n      uint256 tokenReserve = tokenReserves[i];\\n\\n      // If 0 tokens send for this ID, revert\\n      require(amountSold > 0, \\\"UnigemExchange#_tokenToCurrency: NULL_TOKENS_SOLD\\\");\\n\\n      // Load currency token and Token _id reserves\\n      uint256 currencyReserve = currencyReserves[idSold];\\n\\n      // Get amount of currency that will be received\\n      // Need to sub amountSold because tokens already added in reserve, which would bias the calculation\\n      // Don't need to add it for currencyReserve because the amount is added after this calculation\\n      uint256 currencyAmount = getSellPrice(amountSold, tokenReserve.sub(amountSold), currencyReserve);\\n\\n      // Increase cost of transaction\\n      totalCurrency = totalCurrency.add(currencyAmount);\\n\\n      // Update individual currency reseve amount\\n      currencyReserves[idSold] = currencyReserve.sub(currencyAmount);\\n\\n      // Append Token id, Token id amount and currency token amount to tracking arrays\\n      currencyBought[i] = currencyAmount;\\n    }\\n\\n    // If minCurrency is not met\\n    require(totalCurrency >= _minCurrency, \\\"UnigemExchange#_tokenToCurrency: INSUFFICIENT_CURRENCY_AMOUNT\\\");\\n\\n    // Transfer currency here\\n    currency.safeTransferFrom(address(this), _recipient, currencyID, totalCurrency, \\\"\\\");\\n\\n    return currencyBought;\\n  }\\n\\n  /**\\n   * @dev Pricing function used for converting Tokens to currency token.\\n   * @param _assetSoldAmount    Amount of Tokens being sold.\\n   * @param _assetSoldReserve   Amount of Tokens in exchange reserves.\\n   * @param _assetBoughtReserve Amount of currency tokens in exchange reserves.\\n   * @return price Amount of currency tokens to receive from Unigem.\\n   */\\n  function getSellPrice(\\n    uint256 _assetSoldAmount,\\n    uint256 _assetSoldReserve,\\n    uint256 _assetBoughtReserve)\\n    override public pure returns (uint256 price)\\n  {\\n    //Reserves must not be empty\\n    require(_assetSoldReserve > 0 && _assetBoughtReserve > 0, \\\"UnigemExchange#getSellPrice: EMPTY_RESERVE\\\");\\n\\n    // Calculate amount to receive (with fee)\\n    uint256 _assetSoldAmount_withFee = _assetSoldAmount.mul(FEE_MULTIPLIER);\\n    uint256 numerator = _assetSoldAmount_withFee.mul(_assetBoughtReserve);\\n    uint256 denominator = _assetSoldReserve.mul(1000).add(_assetSoldAmount_withFee);\\n    return numerator / denominator; //Rounding errors will favor Unigem, so nothing to do\\n  }\\n\\n  /***********************************|\\n  |        Liquidity Functions        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Deposit less than max currency tokens && exact Tokens (token ID) at current ratio to mint liquidity pool tokens.\\n   * @dev min_liquidity does nothing when total liquidity pool token supply is 0.\\n   * @dev Assumes that sender approved this contract on the currency\\n   * @dev Sorting _tokenIds is mandatory for efficient way of preventing duplicated IDs (which would lead to errors)\\n   * @param _provider      Address that provides liquidity to the reserve\\n   * @param _tokenIds      Array of Token IDs where liquidity is added\\n   * @param _tokenAmounts  Array of amount of Tokens deposited corresponding to each ID provided in _tokenIds\\n   * @param _maxCurrency   Array of maximum number of tokens deposited for each ID provided in _tokenIds.\\n   *                       Deposits max amount if total liquidity pool token supply is 0.\\n   * @param _deadline      Timestamp after which this transaction will be reverted\\n   */\\n  function _addLiquidity(\\n    address _provider,\\n    uint256[] memory _tokenIds,\\n    uint256[] memory _tokenAmounts,\\n    uint256[] memory _maxCurrency,\\n    uint256 _deadline)\\n    internal nonReentrant()\\n  {\\n    // Requirements\\n    require(_deadline >= block.timestamp, \\\"UnigemExchange#_addLiquidity: DEADLINE_EXCEEDED\\\");\\n\\n    // Initialize variables\\n    uint256 nTokens = _tokenIds.length; // Number of Token IDs to deposit\\n    uint256 totalCurrency = 0;          // Total amount of currency tokens to transfer\\n\\n    // Initialize arrays\\n    uint256[] memory liquiditiesToMint = new uint256[](nTokens);\\n    uint256[] memory currencyAmounts = new uint256[](nTokens);\\n    uint256[] memory tokenReserves = new uint256[](nTokens);\\n\\n    // Get token reserves\\n    tokenReserves = _getTokenReserves(_tokenIds);\\n\\n    // Assumes tokens _ids are deposited already, but not currency tokens\\n    // as this is calculated and executed below.\\n\\n    // Loop over all Token IDs to deposit\\n    for (uint256 i = 0; i < nTokens; i ++) {\\n      // Store current id and amount from argument arrays\\n      uint256 tokenId = _tokenIds[i];\\n      uint256 amount = _tokenAmounts[i];\\n\\n      // Check if input values are acceptable\\n      require(_maxCurrency[i] > 0, \\\"UnigemExchange#_addLiquidity: NULL_MAX_CURRENCY\\\");\\n      require(amount > 0, \\\"UnigemExchange#_addLiquidity: NULL_TOKENS_AMOUNT\\\");\\n\\n      // If the token contract and currency contract are the same, prevent the creation\\n      // of a currency pool.\\n      if (currencyPoolBanned) {\\n        require(tokenId != currencyID, \\\"UnigemExchange#_addLiquidity: CURRENCY_POOL_FORBIDDEN\\\");\\n      }\\n\\n      // Current total liquidity calculated in currency token\\n      uint256 totalLiquidity = totalSupplies[tokenId];\\n\\n      // When reserve for this token already exists\\n      if (totalLiquidity > 0) {\\n\\n        // Load currency token and Token reserve's supply of Token id\\n        uint256 currencyReserve = currencyReserves[tokenId]; // Amount not yet in reserve\\n        uint256 tokenReserve = tokenReserves[i];\\n\\n        /**\\n        * Amount of currency tokens to send to token id reserve:\\n        * X/Y = dx/dy\\n        * dx = X*dy/Y\\n        * where\\n        *   X:  currency total liquidity\\n        *   Y:  Token _id total liquidity (before tokens were received)\\n        *   dy: Amount of token _id deposited\\n        *   dx: Amount of currency to deposit\\n        *\\n        * Adding .add(1) if rounding errors so to not favor users incorrectly\\n        */\\n        (uint256 currencyAmount, bool rounded) = divRound(amount.mul(currencyReserve), tokenReserve.sub(amount));\\n        require(_maxCurrency[i] >= currencyAmount, \\\"UnigemExchange#_addLiquidity: MAX_CURRENCY_AMOUNT_EXCEEDED\\\");\\n\\n        // Update currency reserve size for Token id before transfer\\n        currencyReserves[tokenId] = currencyReserve.add(currencyAmount);\\n\\n        // Update totalCurrency\\n        totalCurrency = totalCurrency.add(currencyAmount);\\n\\n        // Proportion of the liquidity pool to give to current liquidity provider\\n        // If rounding error occured, round down to favor previous liquidity providers\\n        // See https://github.com/0xsequence/unigem/issues/19\\n        liquiditiesToMint[i] = (currencyAmount.sub(rounded ? 1 : 0)).mul(totalLiquidity) / currencyReserve;\\n        currencyAmounts[i] = currencyAmount;\\n\\n        // Mint liquidity ownership tokens and increase liquidity supply accordingly\\n        totalSupplies[tokenId] = totalLiquidity.add(liquiditiesToMint[i]);\\n\\n      } else {\\n        uint256 maxCurrency = _maxCurrency[i];\\n\\n        // Otherwise rounding error could end up being significant on second deposit\\n        require(maxCurrency >= 1000000000, \\\"UnigemExchange#_addLiquidity: INVALID_CURRENCY_AMOUNT\\\");\\n\\n        // Update currency  reserve size for Token id before transfer\\n        currencyReserves[tokenId] = maxCurrency;\\n\\n        // Update totalCurrency\\n        totalCurrency = totalCurrency.add(maxCurrency);\\n\\n        // Initial liquidity is amount deposited (Incorrect pricing will be arbitraged)\\n        // uint256 initialLiquidity = _maxCurrency;\\n        totalSupplies[tokenId] = maxCurrency;\\n\\n        // Liquidity to mints\\n        liquiditiesToMint[i] = maxCurrency;\\n        currencyAmounts[i] = maxCurrency;\\n      }\\n    }\\n\\n    // Mint liquidity pool tokens\\n    _batchMint(_provider, _tokenIds, liquiditiesToMint, \\\"\\\");\\n\\n    // Transfer all currency to this contract\\n    currency.safeTransferFrom(_provider, address(this), currencyID, totalCurrency, abi.encode(DEPOSIT_SIG));\\n\\n    // Emit event\\n    emit LiquidityAdded(_provider, _tokenIds, _tokenAmounts, currencyAmounts);\\n  }\\n\\n  /**\\n   * @dev Burn liquidity pool tokens to withdraw currency  && Tokens at current ratio.\\n   * @dev Sorting _tokenIds is mandatory for efficient way of preventing duplicated IDs (which would lead to errors)\\n   * @param _provider         Address that removes liquidity to the reserve\\n   * @param _tokenIds         Array of Token IDs where liquidity is removed\\n   * @param _poolTokenAmounts Array of Amount of liquidity pool tokens burned for each Token id in _tokenIds.\\n   * @param _minCurrency      Minimum currency withdrawn for each Token id in _tokenIds.\\n   * @param _minTokens        Minimum Tokens id withdrawn for each Token id in _tokenIds.\\n   * @param _deadline         Timestamp after which this transaction will be reverted\\n   */\\n  function _removeLiquidity(\\n    address _provider,\\n    uint256[] memory _tokenIds,\\n    uint256[] memory _poolTokenAmounts,\\n    uint256[] memory _minCurrency,\\n    uint256[] memory _minTokens,\\n    uint256 _deadline)\\n    internal nonReentrant()\\n  {\\n    // Input validation\\n    require(_deadline > block.timestamp, \\\"UnigemExchange#_removeLiquidity: DEADLINE_EXCEEDED\\\");\\n\\n    // Initialize variables\\n    uint256 nTokens = _tokenIds.length;                        // Number of Token IDs to deposit\\n    uint256 totalCurrency = 0;                                 // Total amount of currency  to transfer\\n    uint256[] memory tokenAmounts = new uint256[](nTokens);    // Amount of Tokens to transfer for each id\\n    uint256[] memory currencyAmounts = new uint256[](nTokens); // Amount of currency to transfer for each id\\n    uint256[] memory tokenReserves = new uint256[](nTokens);\\n\\n    // Get token reserves\\n    tokenReserves = _getTokenReserves(_tokenIds);\\n\\n    // Assumes NITFY liquidity tokens are already received by contract, but not\\n    // the currency  nor the Tokens Ids\\n\\n    // Remove liquidity for each Token ID in _tokenIds\\n    for (uint256 i = 0; i < nTokens; i++) {\\n      // Store current id and amount from argument arrays\\n      uint256 id = _tokenIds[i];\\n      uint256 amountPool = _poolTokenAmounts[i];\\n      uint256 tokenReserve = tokenReserves[i];\\n\\n      // Load total liquidity pool token supply for Token _id\\n      uint256 totalLiquidity = totalSupplies[id];\\n      require(totalLiquidity > 0, \\\"UnigemExchange#_removeLiquidity: NULL_TOTAL_LIQUIDITY\\\");\\n\\n      // Load currency and Token reserve's supply of Token id\\n      uint256 currencyReserve = currencyReserves[id];\\n\\n      // Calculate amount to withdraw for currency  and Token _id\\n      uint256 currencyAmount = amountPool.mul(currencyReserve) / totalLiquidity;\\n      uint256 tokenAmount = amountPool.mul(tokenReserve) / totalLiquidity;\\n\\n      // Verify if amounts to withdraw respect minimums specified\\n      require(currencyAmount >= _minCurrency[i], \\\"UnigemExchange#_removeLiquidity: INSUFFICIENT_CURRENCY_AMOUNT\\\");\\n      require(tokenAmount >= _minTokens[i], \\\"UnigemExchange#_removeLiquidity: INSUFFICIENT_TOKENS\\\");\\n\\n      // Update total liquidity pool token supply of Token _id\\n      totalSupplies[id] = totalLiquidity.sub(amountPool);\\n\\n      // Update currency reserve size for Token id\\n      currencyReserves[id] = currencyReserve.sub(currencyAmount);\\n\\n      // Update totalCurrency and tokenAmounts\\n      totalCurrency = totalCurrency.add(currencyAmount);\\n      tokenAmounts[i] = tokenAmount;\\n      currencyAmounts[i] = currencyAmount;\\n    }\\n\\n    // Burn liquidity pool tokens for offchain supplies\\n    _batchBurn(address(this), _tokenIds, _poolTokenAmounts);\\n\\n    // Transfer total currency  and all Tokens ids\\n    currency.safeTransferFrom(address(this), _provider, currencyID, totalCurrency, \\\"\\\");\\n    token.safeBatchTransferFrom(address(this), _provider, _tokenIds, tokenAmounts, \\\"\\\");\\n\\n    // Emit event\\n    emit LiquidityRemoved(_provider, _tokenIds, tokenAmounts, currencyAmounts);\\n  }\\n\\n  /***********************************|\\n  |     Receiver Methods Handler      |\\n  |__________________________________*/\\n\\n  // Method signatures for onReceive control logic\\n\\n  // bytes4(keccak256(\\n  //   \\\"_currencyToToken(uint256[],uint256[],uint256,uint256,address)\\\"\\n  // ));\\n  bytes4 internal constant BUYTOKENS_SIG = 0xb2d81047;\\n\\n  // bytes4(keccak256(\\n  //   \\\"_tokenToCurrency(uint256[],uint256[],uint256,uint256,address)\\\"\\n  // ));\\n  bytes4 internal constant SELLTOKENS_SIG = 0xdb08ec97;\\n\\n  //  bytes4(keccak256(\\n  //   \\\"_addLiquidity(address,uint256[],uint256[],uint256[],uint256)\\\"\\n  // ));\\n  bytes4 internal constant ADDLIQUIDITY_SIG = 0x82da2b73;\\n\\n  // bytes4(keccak256(\\n  //    \\\"_removeLiquidity(address,uint256[],uint256[],uint256[],uint256[],uint256)\\\"\\n  // ));\\n  bytes4 internal constant REMOVELIQUIDITY_SIG = 0x5c0bf259;\\n\\n  // bytes4(keccak256(\\n  //   \\\"DepositTokens()\\\"\\n  // ));\\n  bytes4 internal constant DEPOSIT_SIG = 0xc8c323f9;\\n\\n  /**\\n   * @notice Handle which method is being called on transfer\\n   * @dev `_data` must be encoded as follow: abi.encode(bytes4, MethodObj)\\n   *   where bytes4 argument is the MethodObj object signature passed as defined\\n   *   in the `Signatures for onReceive control logic` section above\\n   * @param _from     The address which previously owned the Token\\n   * @param _ids      An array containing ids of each Token being transferred\\n   * @param _amounts  An array containing amounts of each Token being transferred\\n   * @param _data     Method signature and corresponding encoded arguments for method to call on *this* contract\\n   * @return bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")\\n   */\\n  function onERC1155BatchReceived(\\n    address, // _operator,\\n    address _from,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data)\\n    override public returns(bytes4)\\n  {\\n    // This function assumes that the ERC-1155 token contract can\\n    // only call `onERC1155BatchReceived()` via a valid token transfer.\\n    // Users must be responsible and only use this Unigem exchange\\n    // contract with ERC-1155 compliant token contracts.\\n\\n    // Obtain method to call via object signature\\n    bytes4 functionSignature = abi.decode(_data, (bytes4));\\n\\n    /***********************************|\\n    |           Buying Tokens           |\\n    |__________________________________*/\\n\\n    if (functionSignature == BUYTOKENS_SIG) {\\n      // Tokens received need to be currency contract\\n      require(msg.sender == address(currency), \\\"UnigemExchange#onERC1155BatchReceived: INVALID_CURRENCY_TRANSFERRED\\\");\\n      require(_ids.length == 1, \\\"UnigemExchange#onERC1155BatchReceived: INVALID_CURRENCY_IDS_AMOUNT\\\");\\n      require(_ids[0] == currencyID, \\\"UnigemExchange#onERC1155BatchReceived: INVALID_CURRENCY_ID\\\");\\n\\n      // Decode BuyTokensObj from _data to call _currencyToToken()\\n      BuyTokensObj memory obj;\\n      (, obj) = abi.decode(_data, (bytes4, BuyTokensObj));\\n      address recipient = obj.recipient == address(0x0) ? _from : obj.recipient;\\n\\n      // Execute trade and retrieve amount of currency spent\\n      uint256[] memory currencySold = _currencyToToken(obj.tokensBoughtIDs, obj.tokensBoughtAmounts, _amounts[0], obj.deadline, recipient);\\n      emit TokensPurchase(_from, recipient, obj.tokensBoughtIDs, obj.tokensBoughtAmounts, currencySold);\\n\\n    /***********************************|\\n    |           Selling Tokens          |\\n    |__________________________________*/\\n\\n    } else if (functionSignature == SELLTOKENS_SIG) {\\n\\n      // Tokens received need to be Token contract\\n      require(msg.sender == address(token), \\\"UnigemExchange#onERC1155BatchReceived: INVALID_TOKENS_TRANSFERRED\\\");\\n\\n      // Decode SellTokensObj from _data to call _tokenToCurrency()\\n      SellTokensObj memory obj;\\n      (, obj) = abi.decode(_data, (bytes4, SellTokensObj));\\n      address recipient = obj.recipient == address(0x0) ? _from : obj.recipient;\\n\\n      // Execute trade and retrieve amount of currency received\\n      uint256[] memory currencyBought = _tokenToCurrency(_ids, _amounts, obj.minCurrency, obj.deadline, recipient);\\n      emit CurrencyPurchase(_from, recipient, _ids, _amounts, currencyBought);\\n\\n    /***********************************|\\n    |      Adding Liquidity Tokens      |\\n    |__________________________________*/\\n\\n    } else if (functionSignature == ADDLIQUIDITY_SIG) {\\n      // Only allow to receive ERC-1155 tokens from `token` contract\\n      require(msg.sender == address(token), \\\"UnigemExchange#onERC1155BatchReceived: INVALID_TOKEN_TRANSFERRED\\\");\\n\\n      // Decode AddLiquidityObj from _data to call _addLiquidity()\\n      AddLiquidityObj memory obj;\\n      (, obj) = abi.decode(_data, (bytes4, AddLiquidityObj));\\n      _addLiquidity(_from, _ids, _amounts, obj.maxCurrency, obj.deadline);\\n\\n    /***********************************|\\n    |      Removing iquidity Tokens     |\\n    |__________________________________*/\\n\\n    } else if (functionSignature == REMOVELIQUIDITY_SIG) {\\n      // Tokens received need to be UGEM-1155 tokens\\n      require(msg.sender == address(this), \\\"UnigemExchange#onERC1155BatchReceived: INVALID_UGEM_TOKENS_TRANSFERRED\\\");\\n\\n      // Decode RemoveLiquidityObj from _data to call _removeLiquidity()\\n      RemoveLiquidityObj memory obj;\\n      (, obj) = abi.decode(_data, (bytes4, RemoveLiquidityObj));\\n      _removeLiquidity(_from, _ids, _amounts, obj.minCurrency, obj.minTokens, obj.deadline);\\n\\n    /***********************************|\\n    |      Deposits & Invalid Calls     |\\n    |__________________________________*/\\n\\n    } else if (functionSignature == DEPOSIT_SIG) {\\n      // Do nothing for when contract is self depositing\\n      // This could be use to deposit currency \\\"by accident\\\", which would be locked\\n      require(msg.sender == address(currency), \\\"UnigemExchange#onERC1155BatchReceived: INVALID_TOKENS_DEPOSITED\\\");\\n      require(_ids[0] == currencyID, \\\"UnigemExchange#onERC1155BatchReceived: INVALID_CURRENCY_ID\\\");\\n\\n    } else {\\n      revert(\\\"UnigemExchange#onERC1155BatchReceived: INVALID_METHOD\\\");\\n    }\\n\\n    return ERC1155_BATCH_RECEIVED_VALUE;\\n  }\\n\\n  /**\\n   * @dev Will pass to onERC115Batch5Received\\n   */\\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes memory _data)\\n    override public returns(bytes4)\\n  {\\n    uint256[] memory ids = new uint256[](1);\\n    uint256[] memory amounts = new uint256[](1);\\n\\n    ids[0] = _id;\\n    amounts[0] = _amount;\\n\\n    require(\\n      ERC1155_BATCH_RECEIVED_VALUE == onERC1155BatchReceived(_operator, _from, ids, amounts, _data),\\n      \\\"UnigemExchange#onERC1155Received: INVALID_ONRECEIVED_MESSAGE\\\"\\n    );\\n\\n    return ERC1155_RECEIVED_VALUE;\\n  }\\n\\n  /**\\n   * @notice Prevents receiving Ether or calls to unsuported methods\\n   */\\n  fallback () external {\\n    revert(\\\"UnigemExchange:UNSUPPORTED_METHOD\\\");\\n  }\\n\\n  /***********************************|\\n  |         Getter Functions          |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Get amount of currency in reserve for each Token _id in _ids\\n   * @param _ids Array of ID sto query currency reserve of\\n   * @return amount of currency in reserve for each Token _id\\n   */\\n  function getCurrencyReserves(\\n    uint256[] calldata _ids)\\n    override external view returns (uint256[] memory)\\n  {\\n    uint256 nIds = _ids.length;\\n    uint256[] memory currencyReservesReturn = new uint256[](nIds);\\n    for (uint256 i = 0; i < nIds; i++) {\\n      currencyReservesReturn[i] = currencyReserves[_ids[i]];\\n    }\\n    return currencyReservesReturn;\\n  }\\n\\n  /**\\n   * @notice Return price for `currency => Token _id` trades with an exact token amount.\\n   * @param _ids           Array of ID of tokens bought.\\n   * @param _tokensBought Amount of Tokens bought.\\n   * @return Amount of currency needed to buy Tokens in _ids for amounts in _tokensBought\\n   */\\n  function getPrice_currencyToToken(\\n    uint256[] calldata _ids,\\n    uint256[] calldata _tokensBought)\\n    override external view returns (uint256[] memory)\\n  {\\n    uint256 nIds = _ids.length;\\n    uint256[] memory prices = new uint256[](nIds);\\n\\n    for (uint256 i = 0; i < nIds; i++) {\\n      // Load Token id reserve\\n      uint256 tokenReserve = token.balanceOf(address(this), _ids[i]);\\n      prices[i] = getBuyPrice(_tokensBought[i], currencyReserves[_ids[i]], tokenReserve);\\n    }\\n\\n    // Return prices\\n    return prices;\\n  }\\n\\n  /**\\n   * @notice Return price for `Token _id => currency` trades with an exact token amount.\\n   * @param _ids        Array of IDs  token sold.\\n   * @param _tokensSold Array of amount of each Token sold.\\n   * @return Amount of currency that can be bought for Tokens in _ids for amounts in _tokensSold\\n   */\\n  function getPrice_tokenToCurrency(\\n    uint256[] calldata _ids,\\n    uint256[] calldata _tokensSold)\\n    override external view returns (uint256[] memory)\\n  {\\n    uint256 nIds = _ids.length;\\n    uint256[] memory prices = new uint256[](nIds);\\n\\n    for (uint256 i = 0; i < nIds; i++) {\\n      // Load Token id reserve\\n      uint256 tokenReserve = token.balanceOf(address(this), _ids[i]);\\n      prices[i] = getSellPrice(_tokensSold[i], tokenReserve, currencyReserves[_ids[i]]);\\n    }\\n\\n    // Return price\\n    return prices;\\n  }\\n\\n  /**\\n   * @return Address of Token that is sold on this exchange.\\n   */\\n  function getTokenAddress() override external view returns (address) {\\n    return address(token);\\n  }\\n\\n  /**\\n   * @return Address of the currency contract that is used as currency and its corresponding id\\n   */\\n  function getCurrencyInfo() override external view returns (address, uint256) {\\n    return (address(currency), currencyID);\\n  }\\n\\n  /**\\n   * @notice Get total supply of liquidity tokens\\n   * @param _ids ID of the Tokens\\n   * @return The total supply of each liquidity token id provided in _ids\\n   */\\n  function getTotalSupply(uint256[] calldata _ids)\\n    override external view returns (uint256[] memory)\\n  {\\n    // Number of ids\\n    uint256 nIds = _ids.length;\\n\\n    // Variables\\n    uint256[] memory batchTotalSupplies = new uint256[](nIds);\\n\\n    // Iterate over each owner and token ID\\n    for (uint256 i = 0; i < nIds; i++) {\\n      batchTotalSupplies[i] = totalSupplies[_ids[i]];\\n    }\\n\\n    return batchTotalSupplies;\\n  }\\n\\n  /**\\n   * @return Address of factory that created this exchange.\\n   */\\n  function getFactoryAddress() override external view returns (address) {\\n    return factory;\\n  }\\n\\n  /***********************************|\\n  |         Utility Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Divides two numbers and add 1 if there is a rounding error\\n   * @param a Numerator\\n   * @param b Denominator\\n   */\\n  function divRound(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n    return a % b == 0 ? (a/b, false) : ((a/b).add(1), true);\\n  }\\n\\n  /**\\n   * @notice Return Token reserves for given Token ids\\n   * @dev Assumes that ids are sorted from lowest to highest with no duplicates.\\n   *      This assumption allows for checking the token reserves only once, otherwise\\n   *      token reserves need to be re-checked individually or would have to do more expensive\\n   *      duplication checks.\\n   * @param _tokenIds Array of IDs to query their Reserve balance.\\n   * @return Array of Token ids' reserves\\n   */\\n  function _getTokenReserves(\\n    uint256[] memory _tokenIds)\\n    internal view returns (uint256[] memory)\\n  {\\n    uint256 nTokens = _tokenIds.length;\\n\\n    // Regular balance query if only 1 token, otherwise batch query\\n    if (nTokens == 1) {\\n      uint256[] memory tokenReserves = new uint256[](1);\\n      tokenReserves[0] = token.balanceOf(address(this), _tokenIds[0]);\\n      return tokenReserves;\\n\\n    } else {\\n      // Lazy check preventing duplicates & build address array for query\\n      address[] memory thisAddressArray = new address[](nTokens);\\n      thisAddressArray[0] = address(this);\\n\\n      for (uint256 i = 1; i < nTokens; i++) {\\n        require(_tokenIds[i-1] < _tokenIds[i], \\\"UnigemExchange#_getTokenReserves: UNSORTED_OR_DUPLICATE_TOKEN_IDS\\\");\\n        thisAddressArray[i] = address(this);\\n      }\\n      return token.balanceOfBatch(thisAddressArray, _tokenIds);\\n    }\\n  }\\n\\n  /**\\n   * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\\n   * @param  interfaceID The ERC-165 interface ID that is queried for support.s\\n   * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\\n   *      This function MUST NOT consume more thsan 5,000 gas.\\n   * @return Whether a given interface is supported\\n   */\\n  function supportsInterface(bytes4 interfaceID) public override pure returns (bool) {\\n    return  interfaceID == type(IERC165).interfaceId ||\\n      interfaceID == type(IERC1155).interfaceId ||\\n      interfaceID == type(IERC1155TokenReceiver).interfaceId;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xdccca13c8fcadac694b88849aca25ffbbb14ed4de06b50082ce0023eb796a4ac\",\"license\":\"Apache-2.0\"},\"src/factories/Unigem1155Factory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.0;\\n\\nimport \\\"../exchange/Unigem1155Exchange.sol\\\";\\nimport \\\"../interfaces/IUnigem1155Factory.sol\\\";\\n\\ncontract Unigem1155Factory is IUnigem1155Factory {\\n\\n  /***********************************|\\n  |       Events And Variables        |\\n  |__________________________________*/\\n\\n  // tokensToExchange[erc1155_token_address][currency_address][currency_token_id]\\n  mapping(address => mapping(address => mapping(uint256 => address))) public override tokensToExchange;\\n\\n  /***********************************|\\n  |            Constructor            |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Creates a Unigem1155 Exchange for given token contract\\n   * @param _token      The address of the ERC-1155 token contract\\n   * @param _currency   The address of the currency token contract\\n   * @param _currencyID The id of the currency token\\n   */\\n  function createExchange(address _token, address _currency, uint256 _currencyID) public override {\\n    require(tokensToExchange[_token][_currency][_currencyID] == address(0x0), \\\"UnigemFactory#createExchange: EXCHANGE_ALREADY_CREATED\\\");\\n\\n    // Create new exchange contract\\n    Unigem1155Exchange exchange = new Unigem1155Exchange(_token, _currency, _currencyID);\\n\\n    // Store exchange and token addresses\\n    tokensToExchange[_token][_currency][_currencyID] = address(exchange);\\n\\n    // Emit event\\n    emit NewExchange(_token, _currency, _currencyID, address(exchange));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x0aae493ac3f969375ba761822f6d1563a8736b92b3dabb0e47af1b9124c083e4\",\"license\":\"Apache-2.0\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev ERC-1155 interface for accepting safe transfers.\\n */\\ninterface IERC1155TokenReceiver {\\n\\n  /**\\n   * @notice Handle the receipt of a single ERC1155 token type\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value MUST result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _id        The id of the token being transferred\\n   * @param _amount    The amount of tokens being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n   */\\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\\n\\n  /**\\n   * @notice Handle the receipt of multiple ERC1155 token types\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value WILL result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _ids       An array containing ids of each token being transferred\\n   * @param _amounts   An array containing amounts of each token being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n   */\\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\\n}\\n\",\"keccak256\":\"0x832002df8e71d209d234bb28753ebec3c28ccf76b31ecdbc338f584fb794199f\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/IUnigem1155Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\ninterface IUnigem1155Exchange {\\n\\n  /***********************************|\\n  |               Events              |\\n  |__________________________________*/\\n\\n  event TokensPurchase(\\n    address indexed buyer,\\n    address indexed recipient,\\n    uint256[] tokensBoughtIds,\\n    uint256[] tokensBoughtAmounts,\\n    uint256[] currencySoldAmounts\\n  );\\n\\n  event CurrencyPurchase(\\n    address indexed buyer,\\n    address indexed recipient,\\n    uint256[] tokensSoldIds,\\n    uint256[] tokensSoldAmounts,\\n    uint256[] currencyBoughtAmounts\\n  );\\n\\n  event LiquidityAdded(\\n    address indexed provider,\\n    uint256[] tokenIds,\\n    uint256[] tokenAmounts,\\n    uint256[] currencyAmounts\\n  );\\n\\n  event LiquidityRemoved(\\n    address indexed provider,\\n    uint256[] tokenIds,\\n    uint256[] tokenAmounts,\\n    uint256[] currencyAmounts\\n  );\\n\\n    // OnReceive Objects\\n  struct BuyTokensObj {\\n    address recipient;             // Who receives the tokens\\n    uint256[] tokensBoughtIDs;     // Token IDs to buy\\n    uint256[] tokensBoughtAmounts; // Amount of token to buy for each ID\\n    uint256 deadline;              // Timestamp after which the tx isn't valid anymore\\n  }\\n\\n  struct SellTokensObj {\\n    address recipient;   // Who receives the currency\\n    uint256 minCurrency; // Total minimum number of currency  expected for all tokens sold\\n    uint256 deadline;    // Timestamp after which the tx isn't valid anymore\\n  }\\n\\n  struct AddLiquidityObj {\\n    uint256[] maxCurrency; // Maximum number of currency to deposit with tokens\\n    uint256 deadline;      // Timestamp after which the tx isn't valid anymore\\n  }\\n\\n  struct RemoveLiquidityObj {\\n    uint256[] minCurrency; // Minimum number of currency to withdraw\\n    uint256[] minTokens;   // Minimum number of tokens to withdraw\\n    uint256 deadline;      // Timestamp after which the tx isn't valid anymore\\n  }\\n\\n  /***********************************|\\n  |        OnReceive Functions        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Handle which method is being called on Token transfer\\n   * @dev `_data` must be encoded as follow: abi.encode(bytes4, MethodObj)\\n   *   where bytes4 argument is the MethodObj object signature passed as defined\\n   *   in the `Signatures for onReceive control logic` section above\\n   * @param _operator The address which called the `safeTransferFrom` function\\n   * @param _from     The address which previously owned the token\\n   * @param _id       The id of the token being transferred\\n   * @param _amount   The amount of tokens being transferred\\n   * @param _data     Method signature and corresponding encoded arguments for method to call on *this* contract\\n   * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n   */\\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\\n\\n  /**\\n   * @notice Handle which method is being called on transfer\\n   * @dev `_data` must be encoded as follow: abi.encode(bytes4, MethodObj)\\n   *   where bytes4 argument is the MethodObj object signature passed as defined\\n   *   in the `Signatures for onReceive control logic` section above\\n   * @param _from     The address which previously owned the Token\\n   * @param _ids      An array containing ids of each Token being transferred\\n   * @param _amounts  An array containing amounts of each Token being transferred\\n   * @param _data     Method signature and corresponding encoded arguments for method to call on *this* contract\\n   * @return bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")\\n   */\\n  function onERC1155BatchReceived(address, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\\n\\n\\n  /***********************************|\\n  |         Getter Functions          |\\n  |__________________________________*/\\n\\n  /**\\n   * @dev Pricing function used for converting between currency token to Tokens.\\n   * @param _assetBoughtAmount  Amount of Tokens being bought.\\n   * @param _assetSoldReserve   Amount of currency tokens in exchange reserves.\\n   * @param _assetBoughtReserve Amount of Tokens (output type) in exchange reserves.\\n   * @return Amount of currency tokens to send to Unigem.\\n   */\\n  function getBuyPrice(uint256 _assetBoughtAmount, uint256 _assetSoldReserve, uint256 _assetBoughtReserve) external pure returns (uint256);\\n\\n  /**\\n   * @dev Pricing function used for converting Tokens to currency token.\\n   * @param _assetSoldAmount    Amount of Tokens being sold.\\n   * @param _assetSoldReserve   Amount of Tokens in exchange reserves.\\n   * @param _assetBoughtReserve Amount of currency tokens in exchange reserves.\\n   * @return Amount of currency tokens to receive from Unigem.\\n   */\\n  function getSellPrice(uint256 _assetSoldAmount,uint256 _assetSoldReserve, uint256 _assetBoughtReserve) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get amount of currency in reserve for each Token _id in _ids\\n   * @param _ids Array of ID sto query currency reserve of\\n   * @return amount of currency in reserve for each Token _id\\n   */\\n  function getCurrencyReserves(uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Return price for `currency => Token _id` trades with an exact token amount.\\n   * @param _ids          Array of ID of tokens bought.\\n   * @param _tokensBought Amount of Tokens bought.\\n   * @return Amount of currency needed to buy Tokens in _ids for amounts in _tokensBought\\n   */\\n  function getPrice_currencyToToken(uint256[] calldata _ids, uint256[] calldata _tokensBought) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Return price for `Token _id => currency` trades with an exact token amount.\\n   * @param _ids        Array of IDs  token sold.\\n   * @param _tokensSold Array of amount of each Token sold.\\n   * @return Amount of currency that can be bought for Tokens in _ids for amounts in _tokensSold\\n   */\\n  function getPrice_tokenToCurrency(uint256[] calldata _ids, uint256[] calldata _tokensSold) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Get total supply of liquidity tokens\\n   * @param _ids ID of the Tokens\\n   * @return The total supply of each liquidity token id provided in _ids\\n   */\\n  function getTotalSupply(uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @return Address of Token that is sold on this exchange.\\n   */\\n  function getTokenAddress() external view returns (address);\\n\\n  /**\\n   * @return Address of the currency contract that is used as currency and its corresponding id\\n   */\\n  function getCurrencyInfo() external view returns (address, uint256);\\n\\n  /**\\n   * @return Address of factory that created this exchange.\\n   */\\n  function getFactoryAddress() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xaf92625ecc5c50d089a7518a72710f285bc8e0775eb877ffaccdf2af8737f739\",\"license\":\"MIT\"},\"src/interfaces/IUnigem1155Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\ninterface IUnigem1155Factory {\\n\\n  /***********************************|\\n  |               Events              |\\n  |__________________________________*/\\n\\n  event NewExchange(address indexed token, address indexed currency, uint256 indexed currencyID, address exchange);\\n\\n\\n  /***********************************|\\n  |         Public  Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Creates a NiftySwap Exchange for given token contract\\n   * @param _token      The address of the ERC-1155 token contract\\n   * @param _currency   The address of the currency token contract\\n   * @param _currencyID The id of the currency token\\n   */\\n  function createExchange(address _token, address _currency, uint256 _currencyID) external;\\n\\n  /**\\n   * @notice Return address of exchange for corresponding ERC-1155 token contract\\n   * @param _token      The address of the ERC-1155 token contract\\n   * @param _currency   The address of the currency token contract\\n   * @param _currencyID The id of the currency token\\n   */\\n  function tokensToExchange(address _token, address _currency, uint256 _currencyID) external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xe8f071ec184eaa57c0f3fa06dfc56a303077139af19e053a16d6d437373643eb\",\"license\":\"MIT\"},\"src/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x688b57d8a4d5b6221b74de43b603ac03191e89f278c361ea7ceb257268882c4b\",\"license\":\"MIT\"},\"src/tokens/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../libs/SafeMath.sol\\\";\\nimport \\\"../../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"../../interfaces/IERC1155.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/ERC165.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of Multi-Token Standard contract\\n */\\ncontract ERC1155 is IERC1155, ERC165 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  /***********************************|\\n  |        Variables and Events       |\\n  |__________________________________*/\\n\\n  // onReceive function signatures\\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\n\\n  // Objects balances\\n  mapping (address => mapping(uint256 => uint256)) internal balances;\\n\\n  // Operator Functions\\n  mapping (address => mapping(address => bool)) internal operators;\\n\\n\\n  /***********************************|\\n  |     Public Transfer Functions     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\n    public override\\n  {\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\");\\n    require(_to != address(0),\\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\");\\n    // require(_amount <= balances[_from][_id]) is not necessary since checked with safemath operations\\n\\n    _safeTransferFrom(_from, _to, _id, _amount);\\n    _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\\n  }\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\n    public override\\n  {\\n    // Requirements\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\\\");\\n    require(_to != address(0), \\\"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\\\");\\n\\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, gasleft(), _data);\\n  }\\n\\n\\n  /***********************************|\\n  |    Internal Transfer Functions    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   */\\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\\n    internal\\n  {\\n    // Update balances\\n    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\\n    balances[_to][_id] = balances[_to][_id].add(_amount);     // Add amount\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\n   */\\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, uint256 _gasLimit, bytes memory _data)\\n    internal\\n  {\\n    // Check if recipient is contract\\n    if (_to.isContract()) {\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received{gas: _gasLimit}(msg.sender, _from, _id, _amount, _data);\\n      require(retval == ERC1155_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   */\\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\\n    internal\\n  {\\n    require(_ids.length == _amounts.length, \\\"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Number of transfer to execute\\n    uint256 nTransfer = _ids.length;\\n\\n    // Executing all transfers\\n    for (uint256 i = 0; i < nTransfer; i++) {\\n      // Update storage balance of previous bin\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\n    }\\n\\n    // Emit event\\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\n  }\\n\\n  /**\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\n   */\\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, uint256 _gasLimit, bytes memory _data)\\n    internal\\n  {\\n    // Pass data if recipient is contract\\n    if (_to.isContract()) {\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived{gas: _gasLimit}(msg.sender, _from, _ids, _amounts, _data);\\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\");\\n    }\\n  }\\n\\n\\n  /***********************************|\\n  |         Operator Functions        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n   * @param _operator  Address to add to the set of authorized operators\\n   * @param _approved  True if the operator is approved, false to revoke approval\\n   */\\n  function setApprovalForAll(address _operator, bool _approved)\\n    external override\\n  {\\n    // Update operator status\\n    operators[msg.sender][_operator] = _approved;\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\n  }\\n\\n  /**\\n   * @notice Queries the approval status of an operator for a given owner\\n   * @param _owner     The owner of the Tokens\\n   * @param _operator  Address of authorized operator\\n   * @return isOperator True if the operator is approved, false if not\\n   */\\n  function isApprovedForAll(address _owner, address _operator)\\n    public override view returns (bool isOperator)\\n  {\\n    return operators[_owner][_operator];\\n  }\\n\\n\\n  /***********************************|\\n  |         Balance Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param _owner  The address of the token holder\\n   * @param _id     ID of the Token\\n   * @return The _owner's balance of the Token type requested\\n   */\\n  function balanceOf(address _owner, uint256 _id)\\n    public override view returns (uint256)\\n  {\\n    return balances[_owner][_id];\\n  }\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param _owners The addresses of the token holders\\n   * @param _ids    ID of the Tokens\\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\n    public override view returns (uint256[] memory)\\n  {\\n    require(_owners.length == _ids.length, \\\"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\\\");\\n\\n    // Variables\\n    uint256[] memory batchBalances = new uint256[](_owners.length);\\n\\n    // Iterate over each owner and token ID\\n    for (uint256 i = 0; i < _owners.length; i++) {\\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n\\n  /***********************************|\\n  |          ERC165 Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID` and\\n   */\\n  function supportsInterface(bytes4 _interfaceID) public override(ERC165, IERC165) virtual pure returns (bool) {\\n    if (_interfaceID == type(IERC1155).interfaceId) {\\n      return true;\\n    }\\n    return super.supportsInterface(_interfaceID);\\n  }\\n}\\n\",\"keccak256\":\"0x75b60c24e9f756f0365de011f1486ce92fbb02d350dcc3737554e7a74802f597\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/ERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.7.0;\\nimport \\\"./ERC1155.sol\\\";\\n\\n\\n/**\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\n *      a parent contract to be executed as they are `internal` functions\\n */\\ncontract ERC1155MintBurn is ERC1155 {\\n  using SafeMath for uint256;\\n\\n  /****************************************|\\n  |            Minting Functions           |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Mint _amount of tokens of a given id\\n   * @param _to      The address to mint tokens to\\n   * @param _id      Token id to mint\\n   * @param _amount  The amount to be minted\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\\n    internal\\n  {\\n    // Add _amount\\n    balances[_to][_id] = balances[_to][_id].add(_amount);\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\n\\n    // Calling onReceive method if recipient is contract\\n    _callonERC1155Received(address(0x0), _to, _id, _amount, gasleft(), _data);\\n  }\\n\\n  /**\\n   * @notice Mint tokens for each ids in _ids\\n   * @param _to       The address to mint tokens to\\n   * @param _ids      Array of ids to mint\\n   * @param _amounts  Array of amount of tokens to mint per id\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\n    internal\\n  {\\n    require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Number of mints to execute\\n    uint256 nMint = _ids.length;\\n\\n     // Executing all minting\\n    for (uint256 i = 0; i < nMint; i++) {\\n      // Update storage balance\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\n    }\\n\\n    // Emit batch mint event\\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\n\\n    // Calling onReceive method if recipient is contract\\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, gasleft(), _data);\\n  }\\n\\n\\n  /****************************************|\\n  |            Burning Functions           |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Burn _amount of tokens of a given token id\\n   * @param _from    The address to burn tokens from\\n   * @param _id      Token id to burn\\n   * @param _amount  The amount to be burned\\n   */\\n  function _burn(address _from, uint256 _id, uint256 _amount)\\n    internal\\n  {\\n    //Substract _amount\\n    balances[_from][_id] = balances[_from][_id].sub(_amount);\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n   * @param _from     The address to burn tokens from\\n   * @param _ids      Array of token ids to burn\\n   * @param _amounts  Array of the amount to be burned\\n   */\\n  function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\\n    internal\\n  {\\n    // Number of mints to execute\\n    uint256 nBurn = _ids.length;\\n    require(nBurn == _amounts.length, \\\"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\\\");\\n\\n    // Executing all minting\\n    for (uint256 i = 0; i < nBurn; i++) {\\n      // Update storage balance\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\n    }\\n\\n    // Emit batch mint event\\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\n  }\\n}\\n\",\"keccak256\":\"0x00452b3c6a7b92739a3a83c5653562de32ce7606870e84477464ee935f21374b\",\"license\":\"Apache-2.0\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x449514510d4ad1b6d147c8e25e9c9e2f7652ead618c4ed1b8021ce128778fad1\",\"license\":\"MIT\"},\"src/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nabstract contract ERC165 {\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID`\\n   */\\n  function supportsInterface(bytes4 _interfaceID) virtual public pure returns (bool) {\\n    return _interfaceID == this.supportsInterface.selector;\\n  }\\n}\\n\",\"keccak256\":\"0xab6092a32b463d628b629b470adefcbbbad25c2c16236771f380e24ed0bbce6e\",\"license\":\"MIT\"},\"src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n  bool private _notEntered;\\n\\n  constructor () {\\n    // Storing an initial non-zero value makes deployment a bit more\\n    // expensive, but in exchange the refund on every call to nonReentrant\\n    // will be lower in amount. Since refunds are capped to a percetange of\\n    // the total transaction's gas, it is best to keep them low in cases\\n    // like this one, to increase the likelihood of the full refund coming\\n    // into effect.\\n    _notEntered = true;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and make it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _notEntered = false;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _notEntered = true;\\n  }\\n}\\n\",\"keccak256\":\"0x25f6029f360ca0c43dbc7af4812b54c8099995bb5af246d06f78fe619118e6c4\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614883806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631427474c1461003b5780638359289c1461008d575b600080fd5b6100716004803603606081101561005157600080fd5b506001600160a01b038135811691602081013590911690604001356100c5565b604080516001600160a01b039092168252519081900360200190f35b6100c3600480360360608110156100a357600080fd5b506001600160a01b038135811691602081013590911690604001356100f0565b005b600060208181529381526040808220855292815282812090935282529020546001600160a01b031681565b6001600160a01b03838116600090815260208181526040808320868516845282528083208584529091529020541615610174576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806148186036913960400191505060405180910390fd5b600083838360405161018590610265565b80846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050604051809103906000f0801580156101cb573d6000803e3d6000fd5b506001600160a01b0385811660008181526020818152604080832089861680855290835281842089855283529281902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169587169586179055805194855251949550869491937f23658fa6d505b3e3034045b3937d4239cbdaa345bfb0c4a2d6637ade8b85457c929081900390910190a450505050565b6145a5806102738339019056fe60806040523480156200001157600080fd5b50604051620045a5380380620045a583398101604081905262000034916200011f565b6000805460ff191660011790556001600160a01b038316158015906200006257506001600160a01b03821615155b6200008a5760405162461bcd60e51b815260040162000081906200015f565b60405180910390fd5b600580546001600160a01b03199081163317909155600380546001600160a01b03868116918416821790925560048054928616929093168217909255600683905514620000d9576000620000dc565b60015b60048054911515600160a01b0260ff60a01b1990921691909117905550620001a7915050565b80516001600160a01b03811681146200011a57600080fd5b919050565b60008060006060848603121562000134578283fd5b6200013f8462000102565b92506200014f6020850162000102565b9150604084015190509250925092565b60208082526028908201527f556e6967656d45786368616e676523636f6e7374727563746f723a494e56414c604082015267125117d25394155560c21b606082015260800190565b6143ee80620001b76000396000f3fe608060405234801561001057600080fd5b50600436106101355760003560e01c8063863ed300116100b2578063be57146811610081578063f23a6e6111610066578063f23a6e61146102ac578063f242432a146102bf578063fca16c3b146102d257610135565b8063be57146814610286578063e985e9c51461029957610135565b8063863ed30014610238578063a22cb4651461024b578063a9c2e36c1461025e578063bc197c811461026657610135565b80632bef5e381161010957806346adf5ca116100ee57806346adf5ca146101fc5780634e1273f4146102125780636ee8e1341461022557610135565b80632bef5e38146101d45780632eb2c2d6146101e757610135565b8062fdd58e1461015657806301ffc9a71461017f57806310fe9ae81461019f578063209b96c5146101b4575b60405162461bcd60e51b815260040161014d906134b5565b60405180910390fd5b610169610164366004612c2e565b6102e5565b6040516101769190614331565b60405180910390f35b61019261018d366004612e00565b610310565b60405161017691906133db565b6101a76103af565b60405161017691906131a3565b6101c76101c2366004612d1c565b6103be565b6040516101769190613361565b6101c76101e2366004612d1c565b61045f565b6101fa6101f5366004612aec565b6104f7565b005b610204610576565b6040516101769291906132e8565b6101c7610220366004612c59565b61058a565b6101696102333660046130f3565b610684565b6101c7610246366004612d5c565b6106fe565b6101fa610259366004612bfd565b610854565b6101a76108c3565b610279610274366004612aec565b6108d2565b60405161017691906133e6565b6101c7610294366004612d5c565b610d33565b6101926102a7366004612ab4565b610e7e565b6102796102ba366004612b96565b610eac565b6101fa6102cd366004612b96565b610f79565b6101696102e03660046130f3565b610ff1565b6001600160a01b03821660009081526001602090815260408083208484529091529020545b92915050565b60006001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000148061037357506001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000145b806103a757506001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000145b90505b919050565b6003546001600160a01b031690565b606081818167ffffffffffffffff811180156103d957600080fd5b50604051908082528060200260200182016040528015610403578160200160208202803683370190505b50905060005b82811015610456576008600087878481811061042157fe5b9050602002013581526020019081526020016000205482828151811061044357fe5b6020908102919091010152600101610409565b50949350505050565b606081818167ffffffffffffffff8111801561047a57600080fd5b506040519080825280602002602001820160405280156104a4578160200160208202803683370190505b50905060005b8281101561045657600760008787848181106104c257fe5b905060200201358152602001908152602001600020548282815181106104e457fe5b60209081029190910101526001016104aa565b336001600160a01b038616148061051357506105138533610e7e565b61052f5760405162461bcd60e51b815260040161014d90613d3a565b6001600160a01b0384166105555760405162461bcd60e51b815260040161014d9061397d565b61056185858585611056565b61056f858585855a86611250565b5050505050565b6004546006546001600160a01b0390911691565b606081518351146105ad5760405162461bcd60e51b815260040161014d90613cdd565b6060835167ffffffffffffffff811180156105c757600080fd5b506040519080825280602002602001820160405280156105f1578160200160208202803683370190505b50905060005b845181101561067c576001600086838151811061061057fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600085838151811061064657fe5b602002602001015181526020019081526020016000205482828151811061066957fe5b60209081029190910101526001016105f7565b509392505050565b600080831180156106955750600082115b6106b15760405162461bcd60e51b815260040161014d90613d97565b60006106bf856103e361132d565b905060006106cd828561132d565b905060006106e7836106e1886103e861132d565b9061136e565b90508082816106f257fe5b04979650505050505050565b606083818167ffffffffffffffff8111801561071957600080fd5b50604051908082528060200260200182016040528015610743578160200160208202803683370190505b50905060005b82811015610849576003546000906001600160a01b031662fdd58e308b8b8681811061077157fe5b905060200201356040518363ffffffff1660e01b81526004016107959291906132e8565b60206040518083038186803b1580156107ad57600080fd5b505afa1580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e591906130db565b90506108298787848181106107f657fe5b9050602002013582600860008d8d8881811061080e57fe5b90506020020135815260200190815260200160002054610684565b83838151811061083557fe5b602090810291909101015250600101610749565b509695505050505050565b3360008181526002602090815260408083206001600160a01b038716808552925291829020805460ff191685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31906108b79085906133db565b60405180910390a35050565b6005546001600160a01b031690565b600080828060200190518101906108e99190612e1c565b90506001600160e01b031981167fb2d81047000000000000000000000000000000000000000000000000000000001415610a6b576004546001600160a01b031633146109475760405162461bcd60e51b815260040161014d90614023565b84516001146109685760405162461bcd60e51b815260040161014d906136a0565b6006548560008151811061097857fe5b60200260200101511461099d5760405162461bcd60e51b815260040161014d90614160565b6109a561289e565b838060200190518101906109b99190612ed1565b8051909250600091506001600160a01b0316156109d75781516109d9565b875b90506060610a0a83602001518460400151896000815181106109f757fe5b6020026020010151866060015186611393565b9050816001600160a01b0316896001600160a01b03167fd38bc77e62e239476b3e25620d73f29a4a188e808aad79f4a81aaf44871a7a308560200151866040015185604051610a5b939291906133a2565b60405180910390a3505050610d20565b6001600160e01b031981167fdb08ec97000000000000000000000000000000000000000000000000000000001415610b65576003546001600160a01b03163314610ac75760405162461bcd60e51b815260040161014d90613639565b610acf6128cf565b83806020019051810190610ae3919061305a565b8051909250600091506001600160a01b031615610b01578151610b03565b875b90506060610b1c8888856020015186604001518661164c565b9050816001600160a01b0316896001600160a01b03167f89e4dbdd48f69e7920342e9ad9691b9a7150f254e6a0af177ccfd2556aab8bcd8a8a85604051610a5b939291906133a2565b6001600160e01b031981167f82da2b73000000000000000000000000000000000000000000000000000000001415610bfe576003546001600160a01b03163314610bc15760405162461bcd60e51b815260040161014d90613df4565b610bc96128f9565b83806020019051810190610bdd9190612e38565b905080915050610bf887878784600001518560200151611875565b50610d20565b6001600160e01b031981167f5c0bf259000000000000000000000000000000000000000000000000000000001415610c8b57333014610c4f5760405162461bcd60e51b815260040161014d90614251565b610c57612913565b83806020019051810190610c6b9190612f9e565b905080915050610bf8878787846000015185602001518660400151611d90565b6001600160e01b0319811663c8c323f960e01b1415610d08576004546001600160a01b03163314610cce5760405162461bcd60e51b815260040161014d906140a6565b60065485600081518110610cde57fe5b602002602001015114610d035760405162461bcd60e51b815260040161014d90614160565b610d20565b60405162461bcd60e51b815260040161014d906141f4565b5063bc197c8160e01b9695505050505050565b606083818167ffffffffffffffff81118015610d4e57600080fd5b50604051908082528060200260200182016040528015610d78578160200160208202803683370190505b50905060005b82811015610849576003546000906001600160a01b031662fdd58e308b8b86818110610da657fe5b905060200201356040518363ffffffff1660e01b8152600401610dca9291906132e8565b60206040518083038186803b158015610de257600080fd5b505afa158015610df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1a91906130db565b9050610e5e878784818110610e2b57fe5b90506020020135600860008c8c87818110610e4257fe5b9050602002013581526020019081526020016000205483610ff1565b838381518110610e6a57fe5b602090810291909101015250600101610d7e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b604080516001808252818301909252600091606091906020808301908036833750506040805160018082528183019092529293506060929150602080830190803683370190505090508582600081518110610f0357fe5b6020026020010181815250508481600081518110610f1d57fe5b602002602001018181525050610f3688888484886108d2565b6001600160e01b03191663bc197c8160e01b14610f655760405162461bcd60e51b815260040161014d906142d4565b5063f23a6e6160e01b979650505050505050565b336001600160a01b0386161480610f955750610f958533610e7e565b610fb15760405162461bcd60e51b815260040161014d906135dc565b6001600160a01b038416610fd75760405162461bcd60e51b815260040161014d90613458565b610fe3858585856121b9565b61056f858585855a8661229a565b600080831180156110025750600082115b61101e5760405162461bcd60e51b815260040161014d90613809565b60006110366103e8611030868861132d565b9061132d565b9050600061104a6103e3611030868961236d565b90506108498282612395565b80518251146110775760405162461bcd60e51b815260040161014d90613723565b815160005b818110156111f1576110f383828151811061109357fe5b602002602001015160016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008785815181106110ce57fe5b602002602001015181526020019081526020016000205461236d90919063ffffffff16565b6001600160a01b0387166000908152600160205260408120865190919087908590811061111c57fe5b60200260200101518152602001908152602001600020819055506111a583828151811061114557fe5b602002602001015160016000886001600160a01b03166001600160a01b03168152602001908152602001600020600087858151811061118057fe5b602002602001015181526020019081526020016000205461136e90919063ffffffff16565b6001600160a01b038616600090815260016020526040812086519091908790859081106111ce57fe5b60209081029190910181015182528101919091526040016000205560010161107c565b50836001600160a01b0316856001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611241929190613374565b60405180910390a45050505050565b611262856001600160a01b03166123dc565b15611325576000856001600160a01b031663bc197c8184338a8989886040518763ffffffff1660e01b815260040161129e9594939291906131b7565b602060405180830381600088803b1580156112b857600080fd5b5087f11580156112cc573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906112f19190612e1c565b90506001600160e01b0319811663bc197c8160e01b146113235760405162461bcd60e51b815260040161014d90613fc6565b505b505050505050565b60008261133c5750600061030a565b8282028284828161134957fe5b04146113675760405162461bcd60e51b815260040161014d906139da565b9392505050565b6000828201838110156113675760405162461bcd60e51b815260040161014d906135a5565b60005460609060ff166113b85760405162461bcd60e51b815260040161014d906141bd565b6000805460ff19169055428310156113e25760405162461bcd60e51b815260040161014d90613bab565b8551848167ffffffffffffffff811180156113fc57600080fd5b50604051908082528060200260200182016040528015611426578160200160208202803683370190505b50925060608267ffffffffffffffff8111801561144257600080fd5b5060405190808252806020026020018201604052801561146c578160200160208202803683370190505b509050611478896123e2565b905060005b8381101561155b5760008a828151811061149357fe5b6020026020010151905060008a83815181106114ab57fe5b6020026020010151905060008484815181106114c357fe5b60200260200101519050600082116114ed5760405162461bcd60e51b815260040161014d90613866565b60008381526008602052604081205490611508848385610ff1565b9050611514888261236d565b9750808a878151811061152357fe5b6020908102919091010152611538828261136e565b6000958652600860205260409095209490945550506001909201915061147d9050565b5081156115cb5760048054600654604051637921219560e11b81526001600160a01b039092169263f242432a926115989230928b928991016132b0565b600060405180830381600087803b1580156115b257600080fd5b505af11580156115c6573d6000803e3d6000fd5b505050505b600354604051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061160190309089908e908e90600401613258565b600060405180830381600087803b15801561161b57600080fd5b505af115801561162f573d6000803e3d6000fd5b505050505050506000805460ff1916600117905595945050505050565b60005460609060ff166116715760405162461bcd60e51b815260040161014d906141bd565b6000805460ff1916905585514284101561169d5760405162461bcd60e51b815260040161014d906134f6565b60008167ffffffffffffffff811180156116b657600080fd5b506040519080825280602002602001820160405280156116e0578160200160208202803683370190505b50925060608267ffffffffffffffff811180156116fc57600080fd5b50604051908082528060200260200182016040528015611726578160200160208202803683370190505b509050611732896123e2565b905060005b8381101561181e5760008a828151811061174d57fe5b6020026020010151905060008a838151811061176557fe5b60200260200101519050600084848151811061177d57fe5b60200260200101519050600082116117a75760405162461bcd60e51b815260040161014d90613b4e565b600083815260086020526040812054906117cb846117c5858261236d565b84610684565b90506117d7888261136e565b97506117e3828261236d565b600086815260086020526040902055895181908b908890811061180257fe5b6020908102919091010152505060019093019250611737915050565b508682101561183f5760405162461bcd60e51b815260040161014d90613920565b60048054600654604051637921219560e11b81526001600160a01b039092169263f242432a926116019230928b928991016132b0565b60005460ff166118975760405162461bcd60e51b815260040161014d906141bd565b6000805460ff19169055428110156118c15760405162461bcd60e51b815260040161014d906138c3565b8351600060608267ffffffffffffffff811180156118de57600080fd5b50604051908082528060200260200182016040528015611908578160200160208202803683370190505b50905060608367ffffffffffffffff8111801561192457600080fd5b5060405190808252806020026020018201604052801561194e578160200160208202803683370190505b50905060608467ffffffffffffffff8111801561196a57600080fd5b50604051908082528060200260200182016040528015611994578160200160208202803683370190505b5090506119a0896123e2565b905060005b85811015611c7e5760008a82815181106119bb57fe5b6020026020010151905060008a83815181106119d357fe5b6020026020010151905060008a84815181106119eb57fe5b602002602001015111611a105760405162461bcd60e51b815260040161014d90613e52565b60008111611a305760405162461bcd60e51b815260040161014d90613c80565b60045474010000000000000000000000000000000000000000900460ff1615611a7557600654821415611a755760405162461bcd60e51b815260040161014d90613a94565b6000828152600760205260409020548015611bd1576000838152600860205260408120548651909190879087908110611aaa57fe5b60200260200101519050600080611adc611acd858861132d90919063ffffffff16565b611ad7858961236d565b612395565b91509150818f8981518110611aed57fe5b60200260200101511015611b135760405162461bcd60e51b815260040161014d906133fb565b611b1d848361136e565b600088815260086020526040902055611b368c8361136e565b9b5083611b598661103084611b4c576000611b4f565b60015b869060ff1661236d565b81611b6057fe5b048b8981518110611b6d57fe5b602002602001018181525050818a8981518110611b8657fe5b602002602001018181525050611bb88b8981518110611ba157fe5b60200260200101518661136e90919063ffffffff16565b60008881526007602052604090205550611c7392505050565b60008b8581518110611bdf57fe5b60200260200101519050633b9aca00811015611c0d5760405162461bcd60e51b815260040161014d90613f69565b6000848152600860205260409020819055611c28898261136e565b600085815260076020526040902082905588519099508190899087908110611c4c57fe5b60200260200101818152505080878681518110611c6557fe5b602002602001018181525050505b5050506001016119a5565b50611c9a8a8a856040518060200160405280600081525061265e565b6004546006546040516001600160a01b039092169163f242432a918d913091908990611cd19063c8c323f960e01b906020016133e6565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611d00959493929190613215565b600060405180830381600087803b158015611d1a57600080fd5b505af1158015611d2e573d6000803e3d6000fd5b50505050896001600160a01b03167f403f9dc4582dae52d3eeb4a22d37540ffb13c32d964c92ec5ac0d3d5628da3168a8a85604051611d6f939291906133a2565b60405180910390a250506000805460ff191660011790555050505050505050565b60005460ff16611db25760405162461bcd60e51b815260040161014d906141bd565b6000805460ff19169055428111611ddb5760405162461bcd60e51b815260040161014d906137b7565b8451600060608267ffffffffffffffff81118015611df857600080fd5b50604051908082528060200260200182016040528015611e22578160200160208202803683370190505b50905060608367ffffffffffffffff81118015611e3e57600080fd5b50604051908082528060200260200182016040528015611e68578160200160208202803683370190505b50905060608467ffffffffffffffff81118015611e8457600080fd5b50604051908082528060200260200182016040528015611eae578160200160208202803683370190505b509050611eba8a6123e2565b905060005b8581101561206b5760008b8281518110611ed557fe5b6020026020010151905060008b8381518110611eed57fe5b602002602001015190506000848481518110611f0557fe5b6020026020010151905060006007600085815260200190815260200160002054905060008111611f475760405162461bcd60e51b815260040161014d90613f0c565b6000848152600860205260408120549082611f62868461132d565b81611f6957fe5b049050600083611f79878761132d565b81611f8057fe5b0490508f8881518110611f8f57fe5b6020026020010151821015611fb65760405162461bcd60e51b815260040161014d90613548565b8e8881518110611fc257fe5b6020026020010151811015611fe95760405162461bcd60e51b815260040161014d90613a37565b611ff3848761236d565b60008881526007602052604090205561200c838361236d565b6000888152600860205260409020556120258c8361136e565b9b50808b898151811061203457fe5b602002602001018181525050818a898151811061204d57fe5b6020908102919091010152505060019095019450611ebf9350505050565b50612077308b8b61278a565b600460009054906101000a90046001600160a01b03166001600160a01b031663f242432a308d600654886040518563ffffffff1660e01b81526004016120c094939291906132b0565b600060405180830381600087803b1580156120da57600080fd5b505af11580156120ee573d6000803e3d6000fd5b5050600354604051631759616b60e11b81526001600160a01b039091169250632eb2c2d691506121289030908f908f908990600401613258565b600060405180830381600087803b15801561214257600080fd5b505af1158015612156573d6000803e3d6000fd5b505050508a6001600160a01b03167f711e9bcb94b4cf7bc99c1cb938edc75ac7e85a136838e90abf6ee1f5adebd4238b8585604051612197939291906133a2565b60405180910390a250506000805460ff19166001179055505050505050505050565b6001600160a01b03841660009081526001602090815260408083208584529091529020546121e7908261236d565b6001600160a01b03808616600090815260016020818152604080842088855282528084209590955592871682528252828120858252909152205461222b908261136e565b6001600160a01b038085166000818152600160209081526040808320888452909152908190209390935591519086169033907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629061228c908790879061433a565b60405180910390a450505050565b6122ac856001600160a01b03166123dc565b15611325576000856001600160a01b031663f23a6e6184338a8989886040518763ffffffff1660e01b81526004016122e8959493929190613215565b602060405180830381600088803b15801561230257600080fd5b5087f1158015612316573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061233b9190612e1c565b90506001600160e01b0319811663f23a6e6160e01b146113235760405162461bcd60e51b815260040161014d90614103565b60008282111561238f5760405162461bcd60e51b815260040161014d90613780565b50900390565b6000808284816123a157fe5b06156123c3576123bc60018486816123b557fe5b049061136e565b60016123d0565b8284816123cc57fe5b0460005b915091505b9250929050565b3b151590565b805160609060018114156124c95760408051600180825281830190925260609160208083019080368337505060035486519293506001600160a01b03169162fdd58e91503090879060009061243357fe5b60200260200101516040518363ffffffff1660e01b81526004016124589291906132e8565b60206040518083038186803b15801561247057600080fd5b505afa158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a891906130db565b816000815181106124b557fe5b602090810291909101015291506103aa9050565b60608167ffffffffffffffff811180156124e257600080fd5b5060405190808252806020026020018201604052801561250c578160200160208202803683370190505b509050308160008151811061251d57fe5b6001600160a01b039092166020928302919091019091015260015b828110156125b55784818151811061254c57fe5b602002602001015185600183038151811061256357fe5b6020026020010151106125885760405162461bcd60e51b815260040161014d90613bfd565b3082828151811061259557fe5b6001600160a01b0390921660209283029190910190910152600101612538565b506003546040517f4e1273f40000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634e1273f4906126019084908890600401613301565b60006040518083038186803b15801561261957600080fd5b505afa15801561262d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126559190810190612dc5565b925050506103aa565b815183511461267f5760405162461bcd60e51b815260040161014d90613eaf565b825160005b81811015612722576126d684828151811061269b57fe5b602002602001015160016000896001600160a01b03166001600160a01b03168152602001908152602001600020600088858151811061118057fe5b6001600160a01b038716600090815260016020526040812087519091908890859081106126ff57fe5b602090810291909101810151825281019190915260400160002055600101612684565b50846001600160a01b031660006001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612773929190613374565b60405180910390a461056f60008686865a87611250565b8151815181146127ac5760405162461bcd60e51b815260040161014d90613af1565b60005b8181101561284d576128018382815181106127c657fe5b602002602001015160016000886001600160a01b03166001600160a01b0316815260200190815260200160002060008785815181106110ce57fe5b6001600160a01b0386166000908152600160205260408120865190919087908590811061282a57fe5b6020908102919091018101518252810191909152604001600020556001016127af565b5060006001600160a01b0316846001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161228c929190613374565b604051806080016040528060006001600160a01b031681526020016060815260200160608152602001600081525090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b604051806040016040528060608152602001600081525090565b60405180606001604052806060815260200160608152602001600081525090565b80516103aa8161438a565b60008083601f840112612950578081fd5b50813567ffffffffffffffff811115612967578182fd5b60208301915083602080830285010111156123d557600080fd5b600082601f830112612991578081fd5b81356129a461299f8261436c565b614348565b8181529150602080830190848101818402860182018710156129c557600080fd5b60005b848110156129e4578135845292820192908201906001016129c8565b505050505092915050565b600082601f8301126129ff578081fd5b8151612a0d61299f8261436c565b818152915060208083019084810181840286018201871015612a2e57600080fd5b60005b848110156129e457815184529282019290820190600101612a31565b600082601f830112612a5d578081fd5b813567ffffffffffffffff811115612a7157fe5b612a84601f8201601f1916602001614348565b9150808252836020828501011115612a9b57600080fd5b8060208401602084013760009082016020015292915050565b60008060408385031215612ac6578182fd5b8235612ad18161438a565b91506020830135612ae18161438a565b809150509250929050565b600080600080600060a08688031215612b03578081fd5b8535612b0e8161438a565b94506020860135612b1e8161438a565b9350604086013567ffffffffffffffff80821115612b3a578283fd5b612b4689838a01612981565b94506060880135915080821115612b5b578283fd5b612b6789838a01612981565b93506080880135915080821115612b7c578283fd5b50612b8988828901612a4d565b9150509295509295909350565b600080600080600060a08688031215612bad578081fd5b8535612bb88161438a565b94506020860135612bc88161438a565b93506040860135925060608601359150608086013567ffffffffffffffff811115612bf1578182fd5b612b8988828901612a4d565b60008060408385031215612c0f578182fd5b8235612c1a8161438a565b915060208301358015158114612ae1578182fd5b60008060408385031215612c40578182fd5b8235612c4b8161438a565b946020939093013593505050565b60008060408385031215612c6b578182fd5b823567ffffffffffffffff80821115612c82578384fd5b818501915085601f830112612c95578384fd5b8135612ca361299f8261436c565b80828252602080830192508086018a828387028901011115612cc3578889fd5b8896505b84871015612cee578035612cda8161438a565b845260019690960195928101928101612cc7565b509096508701359350505080821115612d05578283fd5b50612d1285828601612981565b9150509250929050565b60008060208385031215612d2e578182fd5b823567ffffffffffffffff811115612d44578283fd5b612d508582860161293f565b90969095509350505050565b60008060008060408587031215612d71578182fd5b843567ffffffffffffffff80821115612d88578384fd5b612d948883890161293f565b90965094506020870135915080821115612dac578384fd5b50612db98782880161293f565b95989497509550505050565b600060208284031215612dd6578081fd5b815167ffffffffffffffff811115612dec578182fd5b612df8848285016129ef565b949350505050565b600060208284031215612e11578081fd5b8135611367816143a2565b600060208284031215612e2d578081fd5b8151611367816143a2565b60008060408385031215612e4a578182fd5b8251612e55816143a2565b602084015190925067ffffffffffffffff80821115612e72578283fd5b9084019060408287031215612e85578283fd5b604051604081018181108382111715612e9a57fe5b604052825182811115612eab578485fd5b612eb7888286016129ef565b825250602083015160208201528093505050509250929050565b60008060408385031215612ee3578182fd5b8251612eee816143a2565b602084015190925067ffffffffffffffff80821115612f0b578283fd5b9084019060808287031215612f1e578283fd5b604051608081018181108382111715612f3357fe5b604052612f3f83612934565b8152602083015182811115612f52578485fd5b612f5e888286016129ef565b602083015250604083015182811115612f75578485fd5b612f81888286016129ef565b604083015250606083015160608201528093505050509250929050565b60008060408385031215612fb0578182fd5b8251612fbb816143a2565b602084015190925067ffffffffffffffff80821115612fd8578283fd5b9084019060608287031215612feb578283fd5b60405160608101818110838211171561300057fe5b604052825182811115613011578485fd5b61301d888286016129ef565b825250602083015182811115613031578485fd5b61303d888286016129ef565b602083015250604083015160408201528093505050509250929050565b600080828403608081121561306d578283fd5b8351613078816143a2565b92506060601f198201121561308b578182fd5b506040516060810181811067ffffffffffffffff821117156130a957fe5b60405260208401516130ba8161438a565b81526040848101516020830152606090940151938101939093525092909150565b6000602082840312156130ec578081fd5b5051919050565b600080600060608486031215613107578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b8381101561314d57815187529582019590820190600101613131565b509495945050505050565b60008151808452815b8181101561317d57602081850181015186830182015201613161565b8181111561318e5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808816835280871660208401525060a060408301526131e360a083018661311e565b82810360608401526131f5818661311e565b905082810360808401526132098185613158565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261324d60a0830184613158565b979650505050505050565b60006001600160a01b03808716835280861660208401525060a0604083015261328460a083018561311e565b8281036060840152613296818561311e565b838103608090940193909352508152602001949350505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b828110156133435781516001600160a01b03168452928401929084019060010161331e565b50505083810382850152613357818661311e565b9695505050505050565b600060208252611367602083018461311e565b600060408252613387604083018561311e565b8281036020840152613399818561311e565b95945050505050565b6000606082526133b5606083018661311e565b82810360208401526133c7818661311e565b90508281036040840152613357818561311e565b901515815260200190565b6001600160e01b031991909116815260200190565b6020808252603a908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a204d4160408201527f585f43555252454e43595f414d4f554e545f4558434545444544000000000000606082015260800190565b6020808252602b908201527f4552433131353523736166655472616e7366657246726f6d3a20494e56414c4960408201527f445f524543495049454e54000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f556e6967656d45786368616e67653a554e535550504f525445445f4d4554484f6040820152601160fa1b606082015260800190565b60208082526032908201527f556e6967656d45786368616e6765235f746f6b656e546f43757272656e63793a60408201527108111150511312539157d15610d15151115160721b606082015260800190565b6020808252603d908201527f556e6967656d45786368616e6765235f72656d6f76654c69717569646974793a60408201527f20494e53554646494349454e545f43555252454e43595f414d4f554e54000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602a908201527f4552433131353523736166655472616e7366657246726f6d3a20494e56414c4960408201527f445f4f50455241544f5200000000000000000000000000000000000000000000606082015260800190565b60208082526041908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f544f4b454e535f5452414e5346455252456060820152601160fa1b608082015260a00190565b60208082526042908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f43555252454e43595f4944535f414d4f5560608201527f4e54000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526035908201527f45524331313535235f7361666542617463685472616e7366657246726f6d3a2060408201527f494e56414c49445f4152524159535f4c454e4754480000000000000000000000606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526032908201527f556e6967656d45786368616e6765235f72656d6f76654c69717569646974793a60408201527108111150511312539157d15610d15151115160721b606082015260800190565b60208082526029908201527f556e6967656d45786368616e67652367657442757950726963653a20454d505460408201527f595f524553455256450000000000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f556e6967656d45786368616e6765235f63757272656e6379546f546f6b656e3a60408201527f204e554c4c5f544f4b454e535f424f5547485400000000000000000000000000606082015260800190565b6020808252602f908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a20444560408201527f41444c494e455f45584345454445440000000000000000000000000000000000606082015260800190565b6020808252603d908201527f556e6967656d45786368616e6765235f746f6b656e546f43757272656e63793a60408201527f20494e53554646494349454e545f43555252454e43595f414d4f554e54000000606082015260800190565b60208082526030908201527f45524331313535237361666542617463685472616e7366657246726f6d3a204960408201527f4e56414c49445f524543495049454e5400000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f556e6967656d45786368616e6765235f72656d6f76654c69717569646974793a60408201527f20494e53554646494349454e545f544f4b454e53000000000000000000000000606082015260800190565b60208082526035908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a20435560408201527f5252454e43595f504f4f4c5f464f5242494444454e0000000000000000000000606082015260800190565b60208082526030908201527f455243313135354d696e744275726e2362617463684275726e3a20494e56414c60408201527f49445f4152524159535f4c454e47544800000000000000000000000000000000606082015260800190565b60208082526031908201527f556e6967656d45786368616e6765235f746f6b656e546f43757272656e63793a60408201527f204e554c4c5f544f4b454e535f534f4c44000000000000000000000000000000606082015260800190565b60208082526032908201527f556e6967656d45786368616e6765235f63757272656e6379546f546f6b656e3a60408201527108111150511312539157d15610d15151115160721b606082015260800190565b60208082526041908201527f556e6967656d45786368616e6765235f676574546f6b656e526573657276657360408201527f3a20554e534f525445445f4f525f4455504c49434154455f544f4b454e5f494460608201527f5300000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526030908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a204e5560408201527f4c4c5f544f4b454e535f414d4f554e5400000000000000000000000000000000606082015260800190565b6020808252602c908201527f455243313135352362616c616e63654f6642617463683a20494e56414c49445f60408201527f41525241595f4c454e4754480000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f45524331313535237361666542617463685472616e7366657246726f6d3a204960408201527f4e56414c49445f4f50455241544f520000000000000000000000000000000000606082015260800190565b6020808252602a908201527f556e6967656d45786368616e67652367657453656c6c50726963653a20454d5060408201527f54595f5245534552564500000000000000000000000000000000000000000000606082015260800190565b602080825260409082018190527f556e6967656d45786368616e6765236f6e455243313135354261746368526563908201527f65697665643a20494e56414c49445f544f4b454e5f5452414e53464552524544606082015260800190565b6020808252602f908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a204e5560408201527f4c4c5f4d41585f43555252454e43590000000000000000000000000000000000606082015260800190565b60208082526030908201527f455243313135354d696e744275726e2362617463684d696e743a20494e56414c60408201527f49445f4152524159535f4c454e47544800000000000000000000000000000000606082015260800190565b60208082526035908201527f556e6967656d45786368616e6765235f72656d6f76654c69717569646974793a60408201527f204e554c4c5f544f54414c5f4c49515549444954590000000000000000000000606082015260800190565b60208082526035908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a20494e60408201527f56414c49445f43555252454e43595f414d4f554e540000000000000000000000606082015260800190565b6020808252603f908201527f45524331313535235f63616c6c6f6e455243313135354261746368526563656960408201527f7665643a20494e56414c49445f4f4e5f524543454956455f4d45535341474500606082015260800190565b60208082526043908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f43555252454e43595f5452414e5346455260608201527f5245440000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252603f908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f544f4b454e535f4445504f534954454400606082015260800190565b6020808252603a908201527f45524331313535235f63616c6c6f6e4552433131353552656365697665643a2060408201527f494e56414c49445f4f4e5f524543454956455f4d455353414745000000000000606082015260800190565b6020808252603a908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f43555252454e43595f4944000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526035908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f4d4554484f440000000000000000000000606082015260800190565b60208082526046908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f5547454d5f544f4b454e535f5452414e5360608201527f4645525245440000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252603c908201527f556e6967656d45786368616e6765236f6e45524331313535526563656976656460408201527f3a20494e56414c49445f4f4e52454345495645445f4d45535341474500000000606082015260800190565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561436457fe5b604052919050565b600067ffffffffffffffff82111561438057fe5b5060209081020190565b6001600160a01b038116811461439f57600080fd5b50565b6001600160e01b03198116811461439f57600080fdfea2646970667358221220e88c5bef80f862c8c33093df3603bb2d24e0887c227b0a676636e6d4976a7a6a64736f6c63430007030033556e6967656d466163746f72792363726561746545786368616e67653a2045584348414e47455f414c52454144595f43524541544544a2646970667358221220659736f1f526e8f7c81a7075cffd1e778609282b6dd2ec904ae6b215874ea69464736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80631427474c1461003b5780638359289c1461008d575b600080fd5b6100716004803603606081101561005157600080fd5b506001600160a01b038135811691602081013590911690604001356100c5565b604080516001600160a01b039092168252519081900360200190f35b6100c3600480360360608110156100a357600080fd5b506001600160a01b038135811691602081013590911690604001356100f0565b005b600060208181529381526040808220855292815282812090935282529020546001600160a01b031681565b6001600160a01b03838116600090815260208181526040808320868516845282528083208584529091529020541615610174576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806148186036913960400191505060405180910390fd5b600083838360405161018590610265565b80846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050604051809103906000f0801580156101cb573d6000803e3d6000fd5b506001600160a01b0385811660008181526020818152604080832089861680855290835281842089855283529281902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169587169586179055805194855251949550869491937f23658fa6d505b3e3034045b3937d4239cbdaa345bfb0c4a2d6637ade8b85457c929081900390910190a450505050565b6145a5806102738339019056fe60806040523480156200001157600080fd5b50604051620045a5380380620045a583398101604081905262000034916200011f565b6000805460ff191660011790556001600160a01b038316158015906200006257506001600160a01b03821615155b6200008a5760405162461bcd60e51b815260040162000081906200015f565b60405180910390fd5b600580546001600160a01b03199081163317909155600380546001600160a01b03868116918416821790925560048054928616929093168217909255600683905514620000d9576000620000dc565b60015b60048054911515600160a01b0260ff60a01b1990921691909117905550620001a7915050565b80516001600160a01b03811681146200011a57600080fd5b919050565b60008060006060848603121562000134578283fd5b6200013f8462000102565b92506200014f6020850162000102565b9150604084015190509250925092565b60208082526028908201527f556e6967656d45786368616e676523636f6e7374727563746f723a494e56414c604082015267125117d25394155560c21b606082015260800190565b6143ee80620001b76000396000f3fe608060405234801561001057600080fd5b50600436106101355760003560e01c8063863ed300116100b2578063be57146811610081578063f23a6e6111610066578063f23a6e61146102ac578063f242432a146102bf578063fca16c3b146102d257610135565b8063be57146814610286578063e985e9c51461029957610135565b8063863ed30014610238578063a22cb4651461024b578063a9c2e36c1461025e578063bc197c811461026657610135565b80632bef5e381161010957806346adf5ca116100ee57806346adf5ca146101fc5780634e1273f4146102125780636ee8e1341461022557610135565b80632bef5e38146101d45780632eb2c2d6146101e757610135565b8062fdd58e1461015657806301ffc9a71461017f57806310fe9ae81461019f578063209b96c5146101b4575b60405162461bcd60e51b815260040161014d906134b5565b60405180910390fd5b610169610164366004612c2e565b6102e5565b6040516101769190614331565b60405180910390f35b61019261018d366004612e00565b610310565b60405161017691906133db565b6101a76103af565b60405161017691906131a3565b6101c76101c2366004612d1c565b6103be565b6040516101769190613361565b6101c76101e2366004612d1c565b61045f565b6101fa6101f5366004612aec565b6104f7565b005b610204610576565b6040516101769291906132e8565b6101c7610220366004612c59565b61058a565b6101696102333660046130f3565b610684565b6101c7610246366004612d5c565b6106fe565b6101fa610259366004612bfd565b610854565b6101a76108c3565b610279610274366004612aec565b6108d2565b60405161017691906133e6565b6101c7610294366004612d5c565b610d33565b6101926102a7366004612ab4565b610e7e565b6102796102ba366004612b96565b610eac565b6101fa6102cd366004612b96565b610f79565b6101696102e03660046130f3565b610ff1565b6001600160a01b03821660009081526001602090815260408083208484529091529020545b92915050565b60006001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000148061037357506001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000145b806103a757506001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000145b90505b919050565b6003546001600160a01b031690565b606081818167ffffffffffffffff811180156103d957600080fd5b50604051908082528060200260200182016040528015610403578160200160208202803683370190505b50905060005b82811015610456576008600087878481811061042157fe5b9050602002013581526020019081526020016000205482828151811061044357fe5b6020908102919091010152600101610409565b50949350505050565b606081818167ffffffffffffffff8111801561047a57600080fd5b506040519080825280602002602001820160405280156104a4578160200160208202803683370190505b50905060005b8281101561045657600760008787848181106104c257fe5b905060200201358152602001908152602001600020548282815181106104e457fe5b60209081029190910101526001016104aa565b336001600160a01b038616148061051357506105138533610e7e565b61052f5760405162461bcd60e51b815260040161014d90613d3a565b6001600160a01b0384166105555760405162461bcd60e51b815260040161014d9061397d565b61056185858585611056565b61056f858585855a86611250565b5050505050565b6004546006546001600160a01b0390911691565b606081518351146105ad5760405162461bcd60e51b815260040161014d90613cdd565b6060835167ffffffffffffffff811180156105c757600080fd5b506040519080825280602002602001820160405280156105f1578160200160208202803683370190505b50905060005b845181101561067c576001600086838151811061061057fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600085838151811061064657fe5b602002602001015181526020019081526020016000205482828151811061066957fe5b60209081029190910101526001016105f7565b509392505050565b600080831180156106955750600082115b6106b15760405162461bcd60e51b815260040161014d90613d97565b60006106bf856103e361132d565b905060006106cd828561132d565b905060006106e7836106e1886103e861132d565b9061136e565b90508082816106f257fe5b04979650505050505050565b606083818167ffffffffffffffff8111801561071957600080fd5b50604051908082528060200260200182016040528015610743578160200160208202803683370190505b50905060005b82811015610849576003546000906001600160a01b031662fdd58e308b8b8681811061077157fe5b905060200201356040518363ffffffff1660e01b81526004016107959291906132e8565b60206040518083038186803b1580156107ad57600080fd5b505afa1580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e591906130db565b90506108298787848181106107f657fe5b9050602002013582600860008d8d8881811061080e57fe5b90506020020135815260200190815260200160002054610684565b83838151811061083557fe5b602090810291909101015250600101610749565b509695505050505050565b3360008181526002602090815260408083206001600160a01b038716808552925291829020805460ff191685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31906108b79085906133db565b60405180910390a35050565b6005546001600160a01b031690565b600080828060200190518101906108e99190612e1c565b90506001600160e01b031981167fb2d81047000000000000000000000000000000000000000000000000000000001415610a6b576004546001600160a01b031633146109475760405162461bcd60e51b815260040161014d90614023565b84516001146109685760405162461bcd60e51b815260040161014d906136a0565b6006548560008151811061097857fe5b60200260200101511461099d5760405162461bcd60e51b815260040161014d90614160565b6109a561289e565b838060200190518101906109b99190612ed1565b8051909250600091506001600160a01b0316156109d75781516109d9565b875b90506060610a0a83602001518460400151896000815181106109f757fe5b6020026020010151866060015186611393565b9050816001600160a01b0316896001600160a01b03167fd38bc77e62e239476b3e25620d73f29a4a188e808aad79f4a81aaf44871a7a308560200151866040015185604051610a5b939291906133a2565b60405180910390a3505050610d20565b6001600160e01b031981167fdb08ec97000000000000000000000000000000000000000000000000000000001415610b65576003546001600160a01b03163314610ac75760405162461bcd60e51b815260040161014d90613639565b610acf6128cf565b83806020019051810190610ae3919061305a565b8051909250600091506001600160a01b031615610b01578151610b03565b875b90506060610b1c8888856020015186604001518661164c565b9050816001600160a01b0316896001600160a01b03167f89e4dbdd48f69e7920342e9ad9691b9a7150f254e6a0af177ccfd2556aab8bcd8a8a85604051610a5b939291906133a2565b6001600160e01b031981167f82da2b73000000000000000000000000000000000000000000000000000000001415610bfe576003546001600160a01b03163314610bc15760405162461bcd60e51b815260040161014d90613df4565b610bc96128f9565b83806020019051810190610bdd9190612e38565b905080915050610bf887878784600001518560200151611875565b50610d20565b6001600160e01b031981167f5c0bf259000000000000000000000000000000000000000000000000000000001415610c8b57333014610c4f5760405162461bcd60e51b815260040161014d90614251565b610c57612913565b83806020019051810190610c6b9190612f9e565b905080915050610bf8878787846000015185602001518660400151611d90565b6001600160e01b0319811663c8c323f960e01b1415610d08576004546001600160a01b03163314610cce5760405162461bcd60e51b815260040161014d906140a6565b60065485600081518110610cde57fe5b602002602001015114610d035760405162461bcd60e51b815260040161014d90614160565b610d20565b60405162461bcd60e51b815260040161014d906141f4565b5063bc197c8160e01b9695505050505050565b606083818167ffffffffffffffff81118015610d4e57600080fd5b50604051908082528060200260200182016040528015610d78578160200160208202803683370190505b50905060005b82811015610849576003546000906001600160a01b031662fdd58e308b8b86818110610da657fe5b905060200201356040518363ffffffff1660e01b8152600401610dca9291906132e8565b60206040518083038186803b158015610de257600080fd5b505afa158015610df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1a91906130db565b9050610e5e878784818110610e2b57fe5b90506020020135600860008c8c87818110610e4257fe5b9050602002013581526020019081526020016000205483610ff1565b838381518110610e6a57fe5b602090810291909101015250600101610d7e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b604080516001808252818301909252600091606091906020808301908036833750506040805160018082528183019092529293506060929150602080830190803683370190505090508582600081518110610f0357fe5b6020026020010181815250508481600081518110610f1d57fe5b602002602001018181525050610f3688888484886108d2565b6001600160e01b03191663bc197c8160e01b14610f655760405162461bcd60e51b815260040161014d906142d4565b5063f23a6e6160e01b979650505050505050565b336001600160a01b0386161480610f955750610f958533610e7e565b610fb15760405162461bcd60e51b815260040161014d906135dc565b6001600160a01b038416610fd75760405162461bcd60e51b815260040161014d90613458565b610fe3858585856121b9565b61056f858585855a8661229a565b600080831180156110025750600082115b61101e5760405162461bcd60e51b815260040161014d90613809565b60006110366103e8611030868861132d565b9061132d565b9050600061104a6103e3611030868961236d565b90506108498282612395565b80518251146110775760405162461bcd60e51b815260040161014d90613723565b815160005b818110156111f1576110f383828151811061109357fe5b602002602001015160016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008785815181106110ce57fe5b602002602001015181526020019081526020016000205461236d90919063ffffffff16565b6001600160a01b0387166000908152600160205260408120865190919087908590811061111c57fe5b60200260200101518152602001908152602001600020819055506111a583828151811061114557fe5b602002602001015160016000886001600160a01b03166001600160a01b03168152602001908152602001600020600087858151811061118057fe5b602002602001015181526020019081526020016000205461136e90919063ffffffff16565b6001600160a01b038616600090815260016020526040812086519091908790859081106111ce57fe5b60209081029190910181015182528101919091526040016000205560010161107c565b50836001600160a01b0316856001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611241929190613374565b60405180910390a45050505050565b611262856001600160a01b03166123dc565b15611325576000856001600160a01b031663bc197c8184338a8989886040518763ffffffff1660e01b815260040161129e9594939291906131b7565b602060405180830381600088803b1580156112b857600080fd5b5087f11580156112cc573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906112f19190612e1c565b90506001600160e01b0319811663bc197c8160e01b146113235760405162461bcd60e51b815260040161014d90613fc6565b505b505050505050565b60008261133c5750600061030a565b8282028284828161134957fe5b04146113675760405162461bcd60e51b815260040161014d906139da565b9392505050565b6000828201838110156113675760405162461bcd60e51b815260040161014d906135a5565b60005460609060ff166113b85760405162461bcd60e51b815260040161014d906141bd565b6000805460ff19169055428310156113e25760405162461bcd60e51b815260040161014d90613bab565b8551848167ffffffffffffffff811180156113fc57600080fd5b50604051908082528060200260200182016040528015611426578160200160208202803683370190505b50925060608267ffffffffffffffff8111801561144257600080fd5b5060405190808252806020026020018201604052801561146c578160200160208202803683370190505b509050611478896123e2565b905060005b8381101561155b5760008a828151811061149357fe5b6020026020010151905060008a83815181106114ab57fe5b6020026020010151905060008484815181106114c357fe5b60200260200101519050600082116114ed5760405162461bcd60e51b815260040161014d90613866565b60008381526008602052604081205490611508848385610ff1565b9050611514888261236d565b9750808a878151811061152357fe5b6020908102919091010152611538828261136e565b6000958652600860205260409095209490945550506001909201915061147d9050565b5081156115cb5760048054600654604051637921219560e11b81526001600160a01b039092169263f242432a926115989230928b928991016132b0565b600060405180830381600087803b1580156115b257600080fd5b505af11580156115c6573d6000803e3d6000fd5b505050505b600354604051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061160190309089908e908e90600401613258565b600060405180830381600087803b15801561161b57600080fd5b505af115801561162f573d6000803e3d6000fd5b505050505050506000805460ff1916600117905595945050505050565b60005460609060ff166116715760405162461bcd60e51b815260040161014d906141bd565b6000805460ff1916905585514284101561169d5760405162461bcd60e51b815260040161014d906134f6565b60008167ffffffffffffffff811180156116b657600080fd5b506040519080825280602002602001820160405280156116e0578160200160208202803683370190505b50925060608267ffffffffffffffff811180156116fc57600080fd5b50604051908082528060200260200182016040528015611726578160200160208202803683370190505b509050611732896123e2565b905060005b8381101561181e5760008a828151811061174d57fe5b6020026020010151905060008a838151811061176557fe5b60200260200101519050600084848151811061177d57fe5b60200260200101519050600082116117a75760405162461bcd60e51b815260040161014d90613b4e565b600083815260086020526040812054906117cb846117c5858261236d565b84610684565b90506117d7888261136e565b97506117e3828261236d565b600086815260086020526040902055895181908b908890811061180257fe5b6020908102919091010152505060019093019250611737915050565b508682101561183f5760405162461bcd60e51b815260040161014d90613920565b60048054600654604051637921219560e11b81526001600160a01b039092169263f242432a926116019230928b928991016132b0565b60005460ff166118975760405162461bcd60e51b815260040161014d906141bd565b6000805460ff19169055428110156118c15760405162461bcd60e51b815260040161014d906138c3565b8351600060608267ffffffffffffffff811180156118de57600080fd5b50604051908082528060200260200182016040528015611908578160200160208202803683370190505b50905060608367ffffffffffffffff8111801561192457600080fd5b5060405190808252806020026020018201604052801561194e578160200160208202803683370190505b50905060608467ffffffffffffffff8111801561196a57600080fd5b50604051908082528060200260200182016040528015611994578160200160208202803683370190505b5090506119a0896123e2565b905060005b85811015611c7e5760008a82815181106119bb57fe5b6020026020010151905060008a83815181106119d357fe5b6020026020010151905060008a84815181106119eb57fe5b602002602001015111611a105760405162461bcd60e51b815260040161014d90613e52565b60008111611a305760405162461bcd60e51b815260040161014d90613c80565b60045474010000000000000000000000000000000000000000900460ff1615611a7557600654821415611a755760405162461bcd60e51b815260040161014d90613a94565b6000828152600760205260409020548015611bd1576000838152600860205260408120548651909190879087908110611aaa57fe5b60200260200101519050600080611adc611acd858861132d90919063ffffffff16565b611ad7858961236d565b612395565b91509150818f8981518110611aed57fe5b60200260200101511015611b135760405162461bcd60e51b815260040161014d906133fb565b611b1d848361136e565b600088815260086020526040902055611b368c8361136e565b9b5083611b598661103084611b4c576000611b4f565b60015b869060ff1661236d565b81611b6057fe5b048b8981518110611b6d57fe5b602002602001018181525050818a8981518110611b8657fe5b602002602001018181525050611bb88b8981518110611ba157fe5b60200260200101518661136e90919063ffffffff16565b60008881526007602052604090205550611c7392505050565b60008b8581518110611bdf57fe5b60200260200101519050633b9aca00811015611c0d5760405162461bcd60e51b815260040161014d90613f69565b6000848152600860205260409020819055611c28898261136e565b600085815260076020526040902082905588519099508190899087908110611c4c57fe5b60200260200101818152505080878681518110611c6557fe5b602002602001018181525050505b5050506001016119a5565b50611c9a8a8a856040518060200160405280600081525061265e565b6004546006546040516001600160a01b039092169163f242432a918d913091908990611cd19063c8c323f960e01b906020016133e6565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611d00959493929190613215565b600060405180830381600087803b158015611d1a57600080fd5b505af1158015611d2e573d6000803e3d6000fd5b50505050896001600160a01b03167f403f9dc4582dae52d3eeb4a22d37540ffb13c32d964c92ec5ac0d3d5628da3168a8a85604051611d6f939291906133a2565b60405180910390a250506000805460ff191660011790555050505050505050565b60005460ff16611db25760405162461bcd60e51b815260040161014d906141bd565b6000805460ff19169055428111611ddb5760405162461bcd60e51b815260040161014d906137b7565b8451600060608267ffffffffffffffff81118015611df857600080fd5b50604051908082528060200260200182016040528015611e22578160200160208202803683370190505b50905060608367ffffffffffffffff81118015611e3e57600080fd5b50604051908082528060200260200182016040528015611e68578160200160208202803683370190505b50905060608467ffffffffffffffff81118015611e8457600080fd5b50604051908082528060200260200182016040528015611eae578160200160208202803683370190505b509050611eba8a6123e2565b905060005b8581101561206b5760008b8281518110611ed557fe5b6020026020010151905060008b8381518110611eed57fe5b602002602001015190506000848481518110611f0557fe5b6020026020010151905060006007600085815260200190815260200160002054905060008111611f475760405162461bcd60e51b815260040161014d90613f0c565b6000848152600860205260408120549082611f62868461132d565b81611f6957fe5b049050600083611f79878761132d565b81611f8057fe5b0490508f8881518110611f8f57fe5b6020026020010151821015611fb65760405162461bcd60e51b815260040161014d90613548565b8e8881518110611fc257fe5b6020026020010151811015611fe95760405162461bcd60e51b815260040161014d90613a37565b611ff3848761236d565b60008881526007602052604090205561200c838361236d565b6000888152600860205260409020556120258c8361136e565b9b50808b898151811061203457fe5b602002602001018181525050818a898151811061204d57fe5b6020908102919091010152505060019095019450611ebf9350505050565b50612077308b8b61278a565b600460009054906101000a90046001600160a01b03166001600160a01b031663f242432a308d600654886040518563ffffffff1660e01b81526004016120c094939291906132b0565b600060405180830381600087803b1580156120da57600080fd5b505af11580156120ee573d6000803e3d6000fd5b5050600354604051631759616b60e11b81526001600160a01b039091169250632eb2c2d691506121289030908f908f908990600401613258565b600060405180830381600087803b15801561214257600080fd5b505af1158015612156573d6000803e3d6000fd5b505050508a6001600160a01b03167f711e9bcb94b4cf7bc99c1cb938edc75ac7e85a136838e90abf6ee1f5adebd4238b8585604051612197939291906133a2565b60405180910390a250506000805460ff19166001179055505050505050505050565b6001600160a01b03841660009081526001602090815260408083208584529091529020546121e7908261236d565b6001600160a01b03808616600090815260016020818152604080842088855282528084209590955592871682528252828120858252909152205461222b908261136e565b6001600160a01b038085166000818152600160209081526040808320888452909152908190209390935591519086169033907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629061228c908790879061433a565b60405180910390a450505050565b6122ac856001600160a01b03166123dc565b15611325576000856001600160a01b031663f23a6e6184338a8989886040518763ffffffff1660e01b81526004016122e8959493929190613215565b602060405180830381600088803b15801561230257600080fd5b5087f1158015612316573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061233b9190612e1c565b90506001600160e01b0319811663f23a6e6160e01b146113235760405162461bcd60e51b815260040161014d90614103565b60008282111561238f5760405162461bcd60e51b815260040161014d90613780565b50900390565b6000808284816123a157fe5b06156123c3576123bc60018486816123b557fe5b049061136e565b60016123d0565b8284816123cc57fe5b0460005b915091505b9250929050565b3b151590565b805160609060018114156124c95760408051600180825281830190925260609160208083019080368337505060035486519293506001600160a01b03169162fdd58e91503090879060009061243357fe5b60200260200101516040518363ffffffff1660e01b81526004016124589291906132e8565b60206040518083038186803b15801561247057600080fd5b505afa158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a891906130db565b816000815181106124b557fe5b602090810291909101015291506103aa9050565b60608167ffffffffffffffff811180156124e257600080fd5b5060405190808252806020026020018201604052801561250c578160200160208202803683370190505b509050308160008151811061251d57fe5b6001600160a01b039092166020928302919091019091015260015b828110156125b55784818151811061254c57fe5b602002602001015185600183038151811061256357fe5b6020026020010151106125885760405162461bcd60e51b815260040161014d90613bfd565b3082828151811061259557fe5b6001600160a01b0390921660209283029190910190910152600101612538565b506003546040517f4e1273f40000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634e1273f4906126019084908890600401613301565b60006040518083038186803b15801561261957600080fd5b505afa15801561262d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126559190810190612dc5565b925050506103aa565b815183511461267f5760405162461bcd60e51b815260040161014d90613eaf565b825160005b81811015612722576126d684828151811061269b57fe5b602002602001015160016000896001600160a01b03166001600160a01b03168152602001908152602001600020600088858151811061118057fe5b6001600160a01b038716600090815260016020526040812087519091908890859081106126ff57fe5b602090810291909101810151825281019190915260400160002055600101612684565b50846001600160a01b031660006001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612773929190613374565b60405180910390a461056f60008686865a87611250565b8151815181146127ac5760405162461bcd60e51b815260040161014d90613af1565b60005b8181101561284d576128018382815181106127c657fe5b602002602001015160016000886001600160a01b03166001600160a01b0316815260200190815260200160002060008785815181106110ce57fe5b6001600160a01b0386166000908152600160205260408120865190919087908590811061282a57fe5b6020908102919091018101518252810191909152604001600020556001016127af565b5060006001600160a01b0316846001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161228c929190613374565b604051806080016040528060006001600160a01b031681526020016060815260200160608152602001600081525090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b604051806040016040528060608152602001600081525090565b60405180606001604052806060815260200160608152602001600081525090565b80516103aa8161438a565b60008083601f840112612950578081fd5b50813567ffffffffffffffff811115612967578182fd5b60208301915083602080830285010111156123d557600080fd5b600082601f830112612991578081fd5b81356129a461299f8261436c565b614348565b8181529150602080830190848101818402860182018710156129c557600080fd5b60005b848110156129e4578135845292820192908201906001016129c8565b505050505092915050565b600082601f8301126129ff578081fd5b8151612a0d61299f8261436c565b818152915060208083019084810181840286018201871015612a2e57600080fd5b60005b848110156129e457815184529282019290820190600101612a31565b600082601f830112612a5d578081fd5b813567ffffffffffffffff811115612a7157fe5b612a84601f8201601f1916602001614348565b9150808252836020828501011115612a9b57600080fd5b8060208401602084013760009082016020015292915050565b60008060408385031215612ac6578182fd5b8235612ad18161438a565b91506020830135612ae18161438a565b809150509250929050565b600080600080600060a08688031215612b03578081fd5b8535612b0e8161438a565b94506020860135612b1e8161438a565b9350604086013567ffffffffffffffff80821115612b3a578283fd5b612b4689838a01612981565b94506060880135915080821115612b5b578283fd5b612b6789838a01612981565b93506080880135915080821115612b7c578283fd5b50612b8988828901612a4d565b9150509295509295909350565b600080600080600060a08688031215612bad578081fd5b8535612bb88161438a565b94506020860135612bc88161438a565b93506040860135925060608601359150608086013567ffffffffffffffff811115612bf1578182fd5b612b8988828901612a4d565b60008060408385031215612c0f578182fd5b8235612c1a8161438a565b915060208301358015158114612ae1578182fd5b60008060408385031215612c40578182fd5b8235612c4b8161438a565b946020939093013593505050565b60008060408385031215612c6b578182fd5b823567ffffffffffffffff80821115612c82578384fd5b818501915085601f830112612c95578384fd5b8135612ca361299f8261436c565b80828252602080830192508086018a828387028901011115612cc3578889fd5b8896505b84871015612cee578035612cda8161438a565b845260019690960195928101928101612cc7565b509096508701359350505080821115612d05578283fd5b50612d1285828601612981565b9150509250929050565b60008060208385031215612d2e578182fd5b823567ffffffffffffffff811115612d44578283fd5b612d508582860161293f565b90969095509350505050565b60008060008060408587031215612d71578182fd5b843567ffffffffffffffff80821115612d88578384fd5b612d948883890161293f565b90965094506020870135915080821115612dac578384fd5b50612db98782880161293f565b95989497509550505050565b600060208284031215612dd6578081fd5b815167ffffffffffffffff811115612dec578182fd5b612df8848285016129ef565b949350505050565b600060208284031215612e11578081fd5b8135611367816143a2565b600060208284031215612e2d578081fd5b8151611367816143a2565b60008060408385031215612e4a578182fd5b8251612e55816143a2565b602084015190925067ffffffffffffffff80821115612e72578283fd5b9084019060408287031215612e85578283fd5b604051604081018181108382111715612e9a57fe5b604052825182811115612eab578485fd5b612eb7888286016129ef565b825250602083015160208201528093505050509250929050565b60008060408385031215612ee3578182fd5b8251612eee816143a2565b602084015190925067ffffffffffffffff80821115612f0b578283fd5b9084019060808287031215612f1e578283fd5b604051608081018181108382111715612f3357fe5b604052612f3f83612934565b8152602083015182811115612f52578485fd5b612f5e888286016129ef565b602083015250604083015182811115612f75578485fd5b612f81888286016129ef565b604083015250606083015160608201528093505050509250929050565b60008060408385031215612fb0578182fd5b8251612fbb816143a2565b602084015190925067ffffffffffffffff80821115612fd8578283fd5b9084019060608287031215612feb578283fd5b60405160608101818110838211171561300057fe5b604052825182811115613011578485fd5b61301d888286016129ef565b825250602083015182811115613031578485fd5b61303d888286016129ef565b602083015250604083015160408201528093505050509250929050565b600080828403608081121561306d578283fd5b8351613078816143a2565b92506060601f198201121561308b578182fd5b506040516060810181811067ffffffffffffffff821117156130a957fe5b60405260208401516130ba8161438a565b81526040848101516020830152606090940151938101939093525092909150565b6000602082840312156130ec578081fd5b5051919050565b600080600060608486031215613107578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b8381101561314d57815187529582019590820190600101613131565b509495945050505050565b60008151808452815b8181101561317d57602081850181015186830182015201613161565b8181111561318e5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808816835280871660208401525060a060408301526131e360a083018661311e565b82810360608401526131f5818661311e565b905082810360808401526132098185613158565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261324d60a0830184613158565b979650505050505050565b60006001600160a01b03808716835280861660208401525060a0604083015261328460a083018561311e565b8281036060840152613296818561311e565b838103608090940193909352508152602001949350505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b828110156133435781516001600160a01b03168452928401929084019060010161331e565b50505083810382850152613357818661311e565b9695505050505050565b600060208252611367602083018461311e565b600060408252613387604083018561311e565b8281036020840152613399818561311e565b95945050505050565b6000606082526133b5606083018661311e565b82810360208401526133c7818661311e565b90508281036040840152613357818561311e565b901515815260200190565b6001600160e01b031991909116815260200190565b6020808252603a908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a204d4160408201527f585f43555252454e43595f414d4f554e545f4558434545444544000000000000606082015260800190565b6020808252602b908201527f4552433131353523736166655472616e7366657246726f6d3a20494e56414c4960408201527f445f524543495049454e54000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f556e6967656d45786368616e67653a554e535550504f525445445f4d4554484f6040820152601160fa1b606082015260800190565b60208082526032908201527f556e6967656d45786368616e6765235f746f6b656e546f43757272656e63793a60408201527108111150511312539157d15610d15151115160721b606082015260800190565b6020808252603d908201527f556e6967656d45786368616e6765235f72656d6f76654c69717569646974793a60408201527f20494e53554646494349454e545f43555252454e43595f414d4f554e54000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602a908201527f4552433131353523736166655472616e7366657246726f6d3a20494e56414c4960408201527f445f4f50455241544f5200000000000000000000000000000000000000000000606082015260800190565b60208082526041908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f544f4b454e535f5452414e5346455252456060820152601160fa1b608082015260a00190565b60208082526042908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f43555252454e43595f4944535f414d4f5560608201527f4e54000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526035908201527f45524331313535235f7361666542617463685472616e7366657246726f6d3a2060408201527f494e56414c49445f4152524159535f4c454e4754480000000000000000000000606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526032908201527f556e6967656d45786368616e6765235f72656d6f76654c69717569646974793a60408201527108111150511312539157d15610d15151115160721b606082015260800190565b60208082526029908201527f556e6967656d45786368616e67652367657442757950726963653a20454d505460408201527f595f524553455256450000000000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f556e6967656d45786368616e6765235f63757272656e6379546f546f6b656e3a60408201527f204e554c4c5f544f4b454e535f424f5547485400000000000000000000000000606082015260800190565b6020808252602f908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a20444560408201527f41444c494e455f45584345454445440000000000000000000000000000000000606082015260800190565b6020808252603d908201527f556e6967656d45786368616e6765235f746f6b656e546f43757272656e63793a60408201527f20494e53554646494349454e545f43555252454e43595f414d4f554e54000000606082015260800190565b60208082526030908201527f45524331313535237361666542617463685472616e7366657246726f6d3a204960408201527f4e56414c49445f524543495049454e5400000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f556e6967656d45786368616e6765235f72656d6f76654c69717569646974793a60408201527f20494e53554646494349454e545f544f4b454e53000000000000000000000000606082015260800190565b60208082526035908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a20435560408201527f5252454e43595f504f4f4c5f464f5242494444454e0000000000000000000000606082015260800190565b60208082526030908201527f455243313135354d696e744275726e2362617463684275726e3a20494e56414c60408201527f49445f4152524159535f4c454e47544800000000000000000000000000000000606082015260800190565b60208082526031908201527f556e6967656d45786368616e6765235f746f6b656e546f43757272656e63793a60408201527f204e554c4c5f544f4b454e535f534f4c44000000000000000000000000000000606082015260800190565b60208082526032908201527f556e6967656d45786368616e6765235f63757272656e6379546f546f6b656e3a60408201527108111150511312539157d15610d15151115160721b606082015260800190565b60208082526041908201527f556e6967656d45786368616e6765235f676574546f6b656e526573657276657360408201527f3a20554e534f525445445f4f525f4455504c49434154455f544f4b454e5f494460608201527f5300000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526030908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a204e5560408201527f4c4c5f544f4b454e535f414d4f554e5400000000000000000000000000000000606082015260800190565b6020808252602c908201527f455243313135352362616c616e63654f6642617463683a20494e56414c49445f60408201527f41525241595f4c454e4754480000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f45524331313535237361666542617463685472616e7366657246726f6d3a204960408201527f4e56414c49445f4f50455241544f520000000000000000000000000000000000606082015260800190565b6020808252602a908201527f556e6967656d45786368616e67652367657453656c6c50726963653a20454d5060408201527f54595f5245534552564500000000000000000000000000000000000000000000606082015260800190565b602080825260409082018190527f556e6967656d45786368616e6765236f6e455243313135354261746368526563908201527f65697665643a20494e56414c49445f544f4b454e5f5452414e53464552524544606082015260800190565b6020808252602f908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a204e5560408201527f4c4c5f4d41585f43555252454e43590000000000000000000000000000000000606082015260800190565b60208082526030908201527f455243313135354d696e744275726e2362617463684d696e743a20494e56414c60408201527f49445f4152524159535f4c454e47544800000000000000000000000000000000606082015260800190565b60208082526035908201527f556e6967656d45786368616e6765235f72656d6f76654c69717569646974793a60408201527f204e554c4c5f544f54414c5f4c49515549444954590000000000000000000000606082015260800190565b60208082526035908201527f556e6967656d45786368616e6765235f6164644c69717569646974793a20494e60408201527f56414c49445f43555252454e43595f414d4f554e540000000000000000000000606082015260800190565b6020808252603f908201527f45524331313535235f63616c6c6f6e455243313135354261746368526563656960408201527f7665643a20494e56414c49445f4f4e5f524543454956455f4d45535341474500606082015260800190565b60208082526043908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f43555252454e43595f5452414e5346455260608201527f5245440000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252603f908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f544f4b454e535f4445504f534954454400606082015260800190565b6020808252603a908201527f45524331313535235f63616c6c6f6e4552433131353552656365697665643a2060408201527f494e56414c49445f4f4e5f524543454956455f4d455353414745000000000000606082015260800190565b6020808252603a908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f43555252454e43595f4944000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526035908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f4d4554484f440000000000000000000000606082015260800190565b60208082526046908201527f556e6967656d45786368616e6765236f6e45524331313535426174636852656360408201527f65697665643a20494e56414c49445f5547454d5f544f4b454e535f5452414e5360608201527f4645525245440000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252603c908201527f556e6967656d45786368616e6765236f6e45524331313535526563656976656460408201527f3a20494e56414c49445f4f4e52454345495645445f4d45535341474500000000606082015260800190565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561436457fe5b604052919050565b600067ffffffffffffffff82111561438057fe5b5060209081020190565b6001600160a01b038116811461439f57600080fd5b50565b6001600160e01b03198116811461439f57600080fdfea2646970667358221220e88c5bef80f862c8c33093df3603bb2d24e0887c227b0a676636e6d4976a7a6a64736f6c63430007030033556e6967656d466163746f72792363726561746545786368616e67653a2045584348414e47455f414c52454144595f43524541544544a2646970667358221220659736f1f526e8f7c81a7075cffd1e778609282b6dd2ec904ae6b215874ea69464736f6c63430007030033",
  "libraries": {
    "GovernanceLib": "0xfEbf82b4c4819f7ded1e0fF361c183381d1990Ea",
    "Strings": "0x2b5E12feB40530f028cE81c0B04F9B7804F3bD8B",
    "SafeMath": "0xf88a49ac5FFC67cA94a1235A44F4F366eb0c77f0",
    "AddressSet": "0xc400Df1a9cB78148de8c145100D1e4E40f4a5142",
    "UInt256Set": "0xD208031f5dc5134A58cA550a14637461A0e7A469",
    "Create2": "0x9eb74D584F4500E35643463d17e0f96878bcD970",
    "ProposalsLib": "0x4768e50d7F5bEDecdb097D6381c69FaA00FCD164",
    "ComplexPoolLib": "0xdE77ec68c4c6A330A3641e50fef9DC3A646061f6",
    "WrappedTokenLib": "0xBC08b86435FAC8cda9BC795BBd4d8b54C882cc8d",
    "Unigem20Library": "0x47dC7a56d15D6E6E8F0C5c2daD0ad2D2D1ba415D"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createExchange(address,address,uint256)": {
        "params": {
          "_currency": "The address of the currency token contract",
          "_currencyID": "The id of the currency token",
          "_token": "The address of the ERC-1155 token contract"
        }
      }
    },
    "stateVariables": {
      "tokensToExchange": {
        "params": {
          "_currency": "The address of the currency token contract",
          "_currencyID": "The id of the currency token",
          "_token": "The address of the ERC-1155 token contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createExchange(address,address,uint256)": {
        "notice": "Creates a Unigem1155 Exchange for given token contract"
      },
      "tokensToExchange(address,address,uint256)": {
        "notice": "Return address of exchange for corresponding ERC-1155 token contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16323,
        "contract": "src/factories/Unigem1155Factory.sol:Unigem1155Factory",
        "label": "tokensToExchange",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_address)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_address)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}