{
  "address": "0x4577c5986739060F66502EECA379329D21DA5229",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gemPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getOwnedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "claims",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gems",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x39412d1890671682ed0f32bd6892961e332ed8d0b941767cd73b60bd87bdb64e",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x4577c5986739060F66502EECA379329D21DA5229",
    "transactionIndex": 1,
    "gasUsed": "444295",
    "logsBloom": "0x
    "blockHash": "0x00005ee4000019e803d86c5bd69beb2b65cad283111a1b0d2dba9c016b4698fc",
    "transactionHash": "0x39412d1890671682ed0f32bd6892961e332ed8d0b941767cd73b60bd87bdb64e",
    "logs": [],
    "blockNumber": 13468231,
    "cumulativeGasUsed": "655803",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6b68360b7538da177cef8aa307f3cc40",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getOwnedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claims\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gems\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/diagnostics/TokenPoolQuerier.sol\":\"TokenPoolQuerier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/diagnostics/TokenPoolQuerier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../interfaces/ITokenPoolQuerier.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\n\\ninterface IGemToken {\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n}\\n\\ncontract TokenPoolQuerier is ITokenPoolQuerier {\\n    function getOwnedTokens(\\n        address gemPool,\\n        address multitoken,\\n        address account,\\n        uint256 page,\\n        uint256 count\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256[] memory claims, uint256[] memory gems)\\n    {\\n        uint256 allTokenHashesLength = IGemToken(gemPool)\\n            .allTokenHashesLength();\\n        require((page * count) <= allTokenHashesLength, \\\"OUT_OF_RANGE\\\");\\n\\n        uint256 claimLen = 0;\\n        uint256 gemLen = 0;\\n\\n        claims = new uint256[](count);\\n        gems = new uint256[](count);\\n\\n        for (uint256 i = page * count; i < (page * count) + count; i++) {\\n            if (i >= allTokenHashesLength) {\\n                break;\\n            }\\n            uint256 claimHash = IGemToken(gemPool).allTokenHashes(i);\\n            try IGemToken(gemPool).tokenType(claimHash) returns (\\n                uint8 tokenType\\n            ) {\\n                uint256 bal = IERC1155(multitoken).balanceOf(\\n                    account,\\n                    claimHash\\n                );\\n                if (bal == 0 || claimHash == 0 || claimHash == 1) continue;\\n                else if (tokenType == 1) claims[claimLen++] = claimHash;\\n                else if (tokenType == 2) gems[gemLen++] = claimHash;\\n            } catch {\\n                continue;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3c410920167644e2332955f59f6218e728ba14d0973fc55aef48c1a795e04fb5\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        CLAIM,\\n        GEM\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0x97eec135f56773ee663df1fbc5543e980c2326e85a38072c3aa2b56c13fefd68\",\"license\":\"MIT\"},\"src/interfaces/ITokenPoolQuerier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITokenPoolQuerier {\\n    function getOwnedTokens(\\n        address gemPool,\\n        address multitoken,\\n        address account,\\n        uint256 page,\\n        uint256 count\\n    ) external view returns (uint256[] memory claims, uint256[] memory gems);\\n}\\n\",\"keccak256\":\"0x5f059728b8d1e229382e8cd5d273f409310b0233871cee69e661b27c31979572\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061071a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806374a552c914610030575b600080fd5b61004361003e36600461051a565b61005a565b60405161005192919061060e565b60405180910390f35b60608060008773ffffffffffffffffffffffffffffffffffffffff1663f4fde0d36040518163ffffffff1660e01b815260040160206040518083038186803b1580156100a557600080fd5b505afa1580156100b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100dd919061056e565b9050806100ea8587610694565b111561012b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101229061063c565b60405180910390fd5b6000808567ffffffffffffffff81111561015557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561017e578160200160208202803683370190505b5094508567ffffffffffffffff8111156101a857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156101d1578160200160208202803683370190505b50935060006101e08789610694565b90505b866101ee818a610694565b6101f8919061067c565b8110156104e35783811061020b576104e3565b6040517fd31674db00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8d169063d31674db90610260908590600401610673565b60206040518083038186803b15801561027857600080fd5b505afa15801561028c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b0919061056e565b6040517fe6c3b1f600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8d169063e6c3b1f690610305908490600401610673565b60206040518083038186803b15801561031d57600080fd5b505afa92505050801561036b575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261036891810190610586565b60015b61037557506104d1565b6040517efdd58e00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8e169062fdd58e906103ca908f9087906004016105e8565b60206040518083038186803b1580156103e257600080fd5b505afa1580156103f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041a919061056e565b9050801580610427575082155b806104325750826001145b1561043f575050506104d1565b8160ff166001141561048857828987610457816106b3565b98508151811061047757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506104cd565b8160ff16600214156104cd578288866104a0816106b3565b9750815181106104c057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5050505b806104db816106b3565b9150506101e3565b505050509550959350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461051557600080fd5b919050565b600080600080600060a08688031215610531578081fd5b61053a866104f1565b9450610548602087016104f1565b9350610556604087016104f1565b94979396509394606081013594506080013592915050565b60006020828403121561057f578081fd5b5051919050565b600060208284031215610597578081fd5b815160ff811681146105a7578182fd5b9392505050565b6000815180845260208085019450808401835b838110156105dd578151875295820195908201906001016105c1565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60006040825261062160408301856105ae565b828103602084015261063381856105ae565b95945050505050565b6020808252600c908201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604082015260600190565b90815260200190565b6000821982111561068f5761068f6106ce565b500190565b60008160001904831182151516156106ae576106ae6106ce565b500290565b60006000198214156106c7576106c76106ce565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220e72599800b46875db683cb3246244dc38c6be6753469b52f87400c849e2abc5064736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806374a552c914610030575b600080fd5b61004361003e36600461051a565b61005a565b60405161005192919061060e565b60405180910390f35b60608060008773ffffffffffffffffffffffffffffffffffffffff1663f4fde0d36040518163ffffffff1660e01b815260040160206040518083038186803b1580156100a557600080fd5b505afa1580156100b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100dd919061056e565b9050806100ea8587610694565b111561012b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101229061063c565b60405180910390fd5b6000808567ffffffffffffffff81111561015557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561017e578160200160208202803683370190505b5094508567ffffffffffffffff8111156101a857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156101d1578160200160208202803683370190505b50935060006101e08789610694565b90505b866101ee818a610694565b6101f8919061067c565b8110156104e35783811061020b576104e3565b6040517fd31674db00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8d169063d31674db90610260908590600401610673565b60206040518083038186803b15801561027857600080fd5b505afa15801561028c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b0919061056e565b6040517fe6c3b1f600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8d169063e6c3b1f690610305908490600401610673565b60206040518083038186803b15801561031d57600080fd5b505afa92505050801561036b575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261036891810190610586565b60015b61037557506104d1565b6040517efdd58e00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8e169062fdd58e906103ca908f9087906004016105e8565b60206040518083038186803b1580156103e257600080fd5b505afa1580156103f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041a919061056e565b9050801580610427575082155b806104325750826001145b1561043f575050506104d1565b8160ff166001141561048857828987610457816106b3565b98508151811061047757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506104cd565b8160ff16600214156104cd578288866104a0816106b3565b9750815181106104c057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5050505b806104db816106b3565b9150506101e3565b505050509550959350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461051557600080fd5b919050565b600080600080600060a08688031215610531578081fd5b61053a866104f1565b9450610548602087016104f1565b9350610556604087016104f1565b94979396509394606081013594506080013592915050565b60006020828403121561057f578081fd5b5051919050565b600060208284031215610597578081fd5b815160ff811681146105a7578182fd5b9392505050565b6000815180845260208085019450808401835b838110156105dd578151875295820195908201906001016105c1565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60006040825261062160408301856105ae565b828103602084015261063381856105ae565b95945050505050565b6020808252600c908201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604082015260600190565b90815260200190565b6000821982111561068f5761068f6106ce565b500190565b60008160001904831182151516156106ae576106ae6106ce565b500290565b60006000198214156106c7576106c76106ce565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220e72599800b46875db683cb3246244dc38c6be6753469b52f87400c849e2abc5064736f6c63430008000033",
  "libraries": {
    "Strings": "0xeB3E79099663eC952e02E608E00d463F36b4Fb75",
    "AddressSet": "0xe46E1A13694B72eC89126303d65247856bb0833e",
    "UInt256Set": "0x8B6893DB13b55d4952a51d5188215e2a470515a9",
    "Create2": "0xBa85d3e8E0F9e48F5c21649d33f6d0f9Af12E3f5",
    "WrappedTokenLib": "0x95055e748915AB4930a1c2597fB84b1a9b9B7A51",
    "ComplexPoolLib": "0x59CAEC5c5BDE430F834d77C6dF1e689CEE5Da318"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}