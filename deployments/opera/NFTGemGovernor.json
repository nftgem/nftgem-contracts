{
  "address": "0x58CeCb74A1b3510410Dd14E9281D1fe6fC106078",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaims",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaims",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "createSystemPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_multitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapHelper",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb15766bb4ce6a782e26074ac390c76a0a2cdd1cbb2bf95f2a2812539967f4bc",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x58CeCb74A1b3510410Dd14E9281D1fe6fC106078",
    "transactionIndex": 0,
    "gasUsed": "773984",
    "logsBloom": "0x
    "blockHash": "0x0000663b0000080f0385a54b1b1981666439d4434e840adaf546c667823c9d43",
    "transactionHash": "0xdb15766bb4ce6a782e26074ac390c76a0a2cdd1cbb2bf95f2a2812539967f4bc",
    "logs": [],
    "blockNumber": 14408176,
    "cumulativeGasUsed": "773984",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2d2f4ad3fdc4b1ca8ac0f60db5b68735",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaims\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaims\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"createSystemPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapHelper\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The governor contract for the system. Can create system pools (public pools shown on bitgems sites)      and user-owned pools (private pools not shown on the bitgem sites). All  privileged calls are made      through this contract.\",\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"constructor\":{\"details\":\"contract constructor\"},\"createPool(address,address,string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"create a new pool - public\"},\"createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"create a new system pool - called by sysadmins to add public pools\"},\"initialize(address,address,address,address)\":{\"details\":\"init this smart contract. Can only be called once. Sets the related contracts.\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/governance/NFTGemGovernor.sol\":\"NFTGemGovernor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa31f752b3b092c788ea06a6dced266db79c4407d69733d78bc15e519f39e1d3f\",\"license\":\"MIT\"},\"src/governance/NFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../access/Controllable.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\n\\n/**\\n * @dev The governor contract for the system. Can create system pools (public pools shown on bitgems sites)\\n *      and user-owned pools (private pools not shown on the bitgem sites). All  privileged calls are made\\n *      through this contract.\\n */\\ncontract NFTGemGovernor is Controllable, Initializable, INFTGemGovernor {\\n    // the multitoken contract\\n    address private multitoken;\\n    // the gem pool factory contract\\n    address private factory;\\n    // the fee manager contract\\n    address private feeTracker;\\n    // the swap manager contract\\n    address private swapHelper;\\n\\n    /**\\n     * @dev contract constructor\\n     */\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /**\\n     * @dev init this smart contract. Can only be called once. Sets the related contracts.\\n     */\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _swapHelper\\n    ) public initializer {\\n        multitoken = _multitoken;\\n        factory = _factory;\\n        feeTracker = _feeTracker;\\n        swapHelper = _swapHelper;\\n    }\\n\\n    function initialized() external view override returns (bool) {\\n        return\\n            multitoken != address(0x0) &&\\n            factory != address(0x0) &&\\n            feeTracker != address(0x0) &&\\n            swapHelper != address(0x0);\\n    }\\n\\n    /**\\n     * @dev associate the newly-created pool with its relations and give it the privileges\\n     * @param creator the owner of the pool\\n     * @param funder the funder of the pool\\n     * @param pool the pool\\n     */\\n    function associatePool(\\n        address creator,\\n        address funder,\\n        address pool\\n    ) internal {\\n        IControllable(multitoken).addController(pool);\\n        IControllable(this).addController(pool);\\n\\n        //INFTGemMultiToken(multitoken).addProxyRegistry(pool);\\n\\n        INFTComplexGemPool(pool).setMultiToken(multitoken);\\n        INFTComplexGemPool(pool).setSwapHelper(swapHelper);\\n        INFTComplexGemPool(pool).setGovernor(address(this));\\n        INFTComplexGemPool(pool).setFeeTracker(feeTracker);\\n        INFTComplexGemPool(pool).mintGenesisGems(creator, funder);\\n    }\\n\\n    /**\\n     * @dev internal gem pool creator method\\n     */\\n    function _createPool(\\n        address owner,\\n        address funder,\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) internal returns (address pool) {\\n        // use the gem pool factory to create a new pool\\n        pool = INFTGemPoolFactory(factory).createNFTGemPool(\\n            owner,\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            allowedToken\\n        );\\n        // associate the pool with its relations\\n        associatePool(owner, funder, pool);\\n    }\\n\\n    /**\\n     * @dev create a new system pool - called by sysadmins to add public pools\\n     */\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external override onlyController returns (address pool) {\\n        pool = _createPool(\\n            msg.sender,\\n            msg.sender,\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            allowedToken\\n        );\\n        // TODO mark the pool as a system pool\\n    }\\n\\n    /**\\n     * @dev create a new pool - public\\n     */\\n    function createPool(\\n        address owner,\\n        address funder,\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external override returns (address pool) {\\n        //TODO: we may not need this here at all if a private pool is privately managed anyways\\n        pool = _createPool(\\n            owner,\\n            funder,\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            allowedToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5b578902245c333bcf2fac2057001c9eda64a455558d92a648466cf22e702a0a\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool {\\n    enum RequirementType {\\n        ERC20,\\n        ERC1155,\\n        POOL\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 gemHash,\\n        uint256 quantity\\n    );\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash, bool requireMature) external;\\n\\n    function purchaseGems(uint256 count) external payable;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x82c44e3e50944c227762a26043a1307be6c51ce8621153fe0a69b0633abe0a73\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INFTGemFeeManager {\\n    event FeeChanged(\\n        address indexed operator,\\n        uint256 indexed feeHash,\\n        uint256 value\\n    );\\n\\n    function fee(uint256 feeTypeHash) external view returns (uint256);\\n\\n    function setFee(uint256 feeTypeHash, uint256 _fee) external;\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x073089b45be4de1e2feecfa65d36ea9cb3ec18cec7e3c1e9de18ea8923c016c2\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    function createPool(\\n        address owner,\\n        address funder,\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function initialized() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5a3431567529737534236c362456d43a80e740ddfc1c8c75f77b67d5defc1afa\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    struct Royalty {\\n        address owner;\\n        uint256 royaltyPermillion;\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function setRoyaltyInfo(\\n        uint256 _tokenId,\\n        address _owner,\\n        uint256 feePermil\\n    ) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0x1d54431d4f990265d8a0c692430e75c5c77870b78f19264069e1cfe86d7464c0\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        address indexed gemPoolAddress,\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event CustomNFTGemPoolCreated(\\n        address indexed gemPoolAdress,\\n        string gemSymbol,\\n        string gemName\\n    );\\n\\n    function nftGemPools() external view returns (address[] memory);\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createNFTGemPool(\\n        address owner,\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0x3a65983f822af086b6666d1b7a3ec4526f9f6bdb8ff14676297265ff68ab7b3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610043565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b610cb9806100526000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b429afeb1161005b578063b429afeb146100d5578063cb5feb0b146100e8578063e1c28bef146100fb578063f8c8765e146101035761007d565b8063158ef93e146100825780632866519d146100a0578063a7fc7a07146100c0575b600080fd5b61008a610116565b6040516100979190610b77565b60405180910390f35b6100b36100ae3660046109e8565b610174565b6040516100979190610ad9565b6100d36100ce366004610889565b6101da565b005b61008a6100e3366004610889565b61023c565b6100b36100f6366004610923565b61025a565b6100d361027d565b6100d36101113660046108c8565b6102d4565b6001546000906201000090046001600160a01b03161580159061014357506002546001600160a01b031615155b801561015957506003546001600160a01b031615155b801561016f57506004546001600160a01b031615155b905090565b3360009081526020819052604081205460ff1615156001148061019657503033145b6101bb5760405162461bcd60e51b81526004016101b290610bdf565b60405180910390fd5b6101cd33338b8b8b8b8b8b8b8b6103d7565b9998505050505050505050565b3360009081526020819052604090205460ff161515600114806101fc57503033145b6102185760405162461bcd60e51b81526004016101b290610bdf565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b600061026e8b8b8b8b8b8b8b8b8b8b6103d7565b9b9a5050505050505050505050565b3360009081526020819052604090205460ff1615156001148061029f57503033145b6102bb5760405162461bcd60e51b81526004016101b290610bdf565b336000908152602081905260409020805460ff19169055565b600154610100900460ff16806102ed575060015460ff16155b6103095760405162461bcd60e51b81526004016101b290610b82565b600154610100900460ff16158015610333576001805460ff1961ff00199091166101001716811790555b600180547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038881169190910291909117909155600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116878416179091556003805482168684161790556004805490911691841691909117905580156103d0576001805461ff00191690555b5050505050565b6002546040517f8514d3580000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690638514d35890610431908e908d908d908d908d908d908d908d908d90600401610b07565b602060405180830381600087803b15801561044b57600080fd5b505af115801561045f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048391906108ac565b90506104908b8b8361049e565b9a9950505050505050505050565b6001546040517fa7fc7a07000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063a7fc7a07906104ec908490600401610ad9565b600060405180830381600087803b15801561050657600080fd5b505af115801561051a573d6000803e3d6000fd5b50506040517fa7fc7a0700000000000000000000000000000000000000000000000000000000815230925063a7fc7a07915061055a908490600401610ad9565b600060405180830381600087803b15801561057457600080fd5b505af1158015610588573d6000803e3d6000fd5b50506001546040517fd104f8f50000000000000000000000000000000000000000000000000000000081526001600160a01b03808616945063d104f8f593506105db926201000090041690600401610ad9565b600060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b5050600480546040517fd73cd47f0000000000000000000000000000000000000000000000000000000081526001600160a01b03808716955063d73cd47f94506106569392169101610ad9565b600060405180830381600087803b15801561067057600080fd5b505af1158015610684573d6000803e3d6000fd5b50506040517fc42cf5350000000000000000000000000000000000000000000000000000000081526001600160a01b038416925063c42cf53591506106cd903090600401610ad9565b600060405180830381600087803b1580156106e757600080fd5b505af11580156106fb573d6000803e3d6000fd5b50506003546040517f9277a1850000000000000000000000000000000000000000000000000000000081526001600160a01b038086169450639277a1859350610748921690600401610ad9565b600060405180830381600087803b15801561076257600080fd5b505af1158015610776573d6000803e3d6000fd5b50506040517f2449ef510000000000000000000000000000000000000000000000000000000081526001600160a01b0384169250632449ef5191506107c19086908690600401610aed565b600060405180830381600087803b1580156107db57600080fd5b505af11580156107ef573d6000803e3d6000fd5b50505050505050565b803561080381610c6b565b919050565b600082601f830112610818578081fd5b813567ffffffffffffffff8082111561083357610833610c3c565b6040516020601f19601f850116820101818110838211171561085757610857610c3c565b60405282815284830160200186101561086e578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561089a578081fd5b81356108a581610c6b565b9392505050565b6000602082840312156108bd578081fd5b81516108a581610c6b565b600080600080608085870312156108dd578283fd5b84356108e881610c6b565b935060208501356108f881610c6b565b9250604085013561090881610c6b565b9150606085013561091881610c6b565b939692955090935050565b6000806000806000806000806000806101408b8d031215610942578586fd5b61094b8b6107f8565b995061095960208c016107f8565b985060408b013567ffffffffffffffff80821115610975578788fd5b6109818e838f01610808565b995060608d0135915080821115610996578788fd5b506109a38d828e01610808565b97505060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013591506109d76101208c016107f8565b90509295989b9194979a5092959850565b600080600080600080600080610100898b031215610a04578384fd5b883567ffffffffffffffff80821115610a1b578586fd5b610a278c838d01610808565b995060208b0135915080821115610a3c578586fd5b50610a498b828c01610808565b97505060408901359550606089013594506080890135935060a0890135925060c0890135915060e0890135610a7d81610c6b565b809150509295985092959890939650565b60008151808452815b81811015610ab357602081850181015186830182015201610a97565b81811115610ac45782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006101206001600160a01b03808d168452816020850152610b2b8285018d610a8e565b91508382036040850152610b3f828c610a8e565b606085019a909a526080840198909852505060a081019490945260c084019290925260e0830152909116610100909101529392505050565b901515815260200190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114610c8057600080fd5b5056fea26469706673582212207f845516ef156bed49912b349c5cac737b947f350806740bb16ac3975a978dbb64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b429afeb1161005b578063b429afeb146100d5578063cb5feb0b146100e8578063e1c28bef146100fb578063f8c8765e146101035761007d565b8063158ef93e146100825780632866519d146100a0578063a7fc7a07146100c0575b600080fd5b61008a610116565b6040516100979190610b77565b60405180910390f35b6100b36100ae3660046109e8565b610174565b6040516100979190610ad9565b6100d36100ce366004610889565b6101da565b005b61008a6100e3366004610889565b61023c565b6100b36100f6366004610923565b61025a565b6100d361027d565b6100d36101113660046108c8565b6102d4565b6001546000906201000090046001600160a01b03161580159061014357506002546001600160a01b031615155b801561015957506003546001600160a01b031615155b801561016f57506004546001600160a01b031615155b905090565b3360009081526020819052604081205460ff1615156001148061019657503033145b6101bb5760405162461bcd60e51b81526004016101b290610bdf565b60405180910390fd5b6101cd33338b8b8b8b8b8b8b8b6103d7565b9998505050505050505050565b3360009081526020819052604090205460ff161515600114806101fc57503033145b6102185760405162461bcd60e51b81526004016101b290610bdf565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b600061026e8b8b8b8b8b8b8b8b8b8b6103d7565b9b9a5050505050505050505050565b3360009081526020819052604090205460ff1615156001148061029f57503033145b6102bb5760405162461bcd60e51b81526004016101b290610bdf565b336000908152602081905260409020805460ff19169055565b600154610100900460ff16806102ed575060015460ff16155b6103095760405162461bcd60e51b81526004016101b290610b82565b600154610100900460ff16158015610333576001805460ff1961ff00199091166101001716811790555b600180547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038881169190910291909117909155600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116878416179091556003805482168684161790556004805490911691841691909117905580156103d0576001805461ff00191690555b5050505050565b6002546040517f8514d3580000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690638514d35890610431908e908d908d908d908d908d908d908d908d90600401610b07565b602060405180830381600087803b15801561044b57600080fd5b505af115801561045f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048391906108ac565b90506104908b8b8361049e565b9a9950505050505050505050565b6001546040517fa7fc7a07000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063a7fc7a07906104ec908490600401610ad9565b600060405180830381600087803b15801561050657600080fd5b505af115801561051a573d6000803e3d6000fd5b50506040517fa7fc7a0700000000000000000000000000000000000000000000000000000000815230925063a7fc7a07915061055a908490600401610ad9565b600060405180830381600087803b15801561057457600080fd5b505af1158015610588573d6000803e3d6000fd5b50506001546040517fd104f8f50000000000000000000000000000000000000000000000000000000081526001600160a01b03808616945063d104f8f593506105db926201000090041690600401610ad9565b600060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b5050600480546040517fd73cd47f0000000000000000000000000000000000000000000000000000000081526001600160a01b03808716955063d73cd47f94506106569392169101610ad9565b600060405180830381600087803b15801561067057600080fd5b505af1158015610684573d6000803e3d6000fd5b50506040517fc42cf5350000000000000000000000000000000000000000000000000000000081526001600160a01b038416925063c42cf53591506106cd903090600401610ad9565b600060405180830381600087803b1580156106e757600080fd5b505af11580156106fb573d6000803e3d6000fd5b50506003546040517f9277a1850000000000000000000000000000000000000000000000000000000081526001600160a01b038086169450639277a1859350610748921690600401610ad9565b600060405180830381600087803b15801561076257600080fd5b505af1158015610776573d6000803e3d6000fd5b50506040517f2449ef510000000000000000000000000000000000000000000000000000000081526001600160a01b0384169250632449ef5191506107c19086908690600401610aed565b600060405180830381600087803b1580156107db57600080fd5b505af11580156107ef573d6000803e3d6000fd5b50505050505050565b803561080381610c6b565b919050565b600082601f830112610818578081fd5b813567ffffffffffffffff8082111561083357610833610c3c565b6040516020601f19601f850116820101818110838211171561085757610857610c3c565b60405282815284830160200186101561086e578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561089a578081fd5b81356108a581610c6b565b9392505050565b6000602082840312156108bd578081fd5b81516108a581610c6b565b600080600080608085870312156108dd578283fd5b84356108e881610c6b565b935060208501356108f881610c6b565b9250604085013561090881610c6b565b9150606085013561091881610c6b565b939692955090935050565b6000806000806000806000806000806101408b8d031215610942578586fd5b61094b8b6107f8565b995061095960208c016107f8565b985060408b013567ffffffffffffffff80821115610975578788fd5b6109818e838f01610808565b995060608d0135915080821115610996578788fd5b506109a38d828e01610808565b97505060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013591506109d76101208c016107f8565b90509295989b9194979a5092959850565b600080600080600080600080610100898b031215610a04578384fd5b883567ffffffffffffffff80821115610a1b578586fd5b610a278c838d01610808565b995060208b0135915080821115610a3c578586fd5b50610a498b828c01610808565b97505060408901359550606089013594506080890135935060a0890135925060c0890135915060e0890135610a7d81610c6b565b809150509295985092959890939650565b60008151808452815b81811015610ab357602081850181015186830182015201610a97565b81811115610ac45782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006101206001600160a01b03808d168452816020850152610b2b8285018d610a8e565b91508382036040850152610b3f828c610a8e565b606085019a909a526080840198909852505060a081019490945260c084019290925260e0830152909116610100909101529392505050565b901515815260200190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114610c8057600080fd5b5056fea26469706673582212207f845516ef156bed49912b349c5cac737b947f350806740bb16ac3975a978dbb64736f6c63430008000033",
  "libraries": {
    "Strings": "0xeB3E79099663eC952e02E608E00d463F36b4Fb75",
    "AddressSet": "0x8974D57fCfF9C10E9d41709da86d006604D8c75d",
    "UInt256Set": "0x8B6893DB13b55d4952a51d5188215e2a470515a9",
    "Create2": "0xBa85d3e8E0F9e48F5c21649d33f6d0f9Af12E3f5",
    "WrappedTokenLib": "0x0307a2E913FD8fb384a939Cfb7655C30820727D8",
    "ComplexPoolLib": "0x3802c9d35c585ac6668e24A93Bb341D50662aA4E"
  },
  "devdoc": {
    "details": "The governor contract for the system. Can create system pools (public pools shown on bitgems sites)      and user-owned pools (private pools not shown on the bitgem sites). All  privileged calls are made      through this contract.",
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "constructor": {
        "details": "contract constructor"
      },
      "createPool(address,address,string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "create a new pool - public"
      },
      "createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "create a new system pool - called by sysadmins to add public pools"
      },
      "initialize(address,address,address,address)": {
        "details": "init this smart contract. Can only be called once. Sets the related contracts."
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12816,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 14784,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "multitoken",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14786,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "factory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 14788,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "feeTracker",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 14790,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "swapHelper",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}