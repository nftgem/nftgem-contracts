{
  "address": "0x0aE30E22888642348FA1438f37718F89eaCf8bf2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lootboxTokenSalePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Lootbox",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "LootboxCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lootboxTokenSalePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Lootbox",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "LootboxMigrated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "allLootboxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "_lootbox",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allLootboxesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_len",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lootboxTokenSalePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct ILootbox.Lootbox",
          "name": "_lootbox",
          "type": "tuple"
        }
      ],
      "name": "createLootbox",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "Lootbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_symbolHash",
          "type": "uint256"
        }
      ],
      "name": "getLootbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "_lootbox",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__data",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lootboxes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lootboxTokenSalePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct ILootbox.Lootbox[]",
          "name": "_all",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "migrateTo",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x040c0f9922966da07bbafe63883b9e90c0d12f79040878f0a69bb51f5d188bb3",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x0aE30E22888642348FA1438f37718F89eaCf8bf2",
    "transactionIndex": 1,
    "gasUsed": "4006494",
    "logsBloom": "0x
    "blockHash": "0x00006ec200000f2bc2067c43a1f817df9be51eaad7bd5c1c7549ff2c489b6ee7",
    "transactionHash": "0x040c0f9922966da07bbafe63883b9e90c0d12f79040878f0a69bb51f5d188bb3",
    "logs": [],
    "blockNumber": 15292991,
    "cumulativeGasUsed": "4234322",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9948e98aa3a5edeea097918faf4a1516",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootboxTokenSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"LootboxCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootboxTokenSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"LootboxMigrated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"allLootboxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_lootbox\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allLootboxesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootboxTokenSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"_lootbox\",\"type\":\"tuple\"}],\"name\":\"createLootbox\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"Lootbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_symbolHash\",\"type\":\"uint256\"}],\"name\":\"getLootbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_lootbox\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__data\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootboxes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootboxTokenSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct ILootbox.Lootbox[]\",\"name\":\"_all\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrateTo\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"allLootboxes(uint256)\":{\"details\":\"get the quantized token for this\"},\"allLootboxesLength()\":{\"details\":\"number of lootboxes\"},\"createLootbox(address,(address,address,address,address,uint256,string,string,string,uint8,uint8,uint256,uint256,uint256,uint256,uint256,uint256,bool))\":{\"details\":\"deploy a new lootbox using create2\"},\"getLootbox(uint256)\":{\"details\":\"get a lootbox\"},\"initialize(address)\":{\"details\":\"contract initialiser - set the data object\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"lootboxes()\":{\"details\":\"get the quantized token for this\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/factories/LootboxFactory.sol\":\"LootboxFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x27f9465d84949f059ed37b23c82f4a9fc16c1b8d6fbd69837a0f920875e2af83\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa31f752b3b092c788ea06a6dced266db79c4407d69733d78bc15e519f39e1d3f\",\"license\":\"MIT\"},\"src/factories/LootboxFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../lootbox/LootboxContract.sol\\\";\\n\\nimport \\\"../interfaces/ILootbox.sol\\\";\\n\\nimport \\\"../interfaces/ILootboxData.sol\\\";\\n\\nimport \\\"../interfaces/ILootboxFactory.sol\\\";\\n\\nimport \\\"../access/Controllable.sol\\\";\\n\\ncontract LootboxFactory is ILootboxFactory, Controllable, Initializable {\\n    ILootboxData internal _lootboxData;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    modifier initialized() {\\n        require(\\n            address(_lootboxData) != address(0),\\n            \\\"Lootbox is not initialized\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev contract initialiser - set the data object\\n     */\\n    function initialize(address __data) external override initializer {\\n        require(\\n            IControllable(__data).isController(address(this)) == true,\\n            \\\"Lootbox data must be controlled by this lootbox factory\\\"\\n        );\\n        _lootboxData = ILootboxData(__data);\\n    }\\n\\n    function isInitialized() external view returns (bool) {\\n        return address(_lootboxData) != address(0);\\n    }\\n\\n    /**\\n     * @dev get a lootbox\\n     */\\n    function getLootbox(uint256 _symbolHash)\\n        external\\n        view\\n        override\\n        initialized\\n        returns (address _lootbox)\\n    {\\n        _lootbox = _lootboxData.getLootboxBySymbol(_symbolHash).contractAddress;\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function lootboxes()\\n        external\\n        view\\n        override\\n        initialized\\n        returns (ILootbox.Lootbox[] memory _all)\\n    {\\n        _all = _lootboxData.lootboxes();\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function allLootboxes(uint256 idx)\\n        external\\n        view\\n        override\\n        initialized\\n        returns (address _lootbox)\\n    {\\n        _lootbox = _lootboxData.allLootboxes(idx).contractAddress;\\n    }\\n\\n    /**\\n     * @dev number of lootboxes\\n     */\\n    function allLootboxesLength()\\n        external\\n        view\\n        override\\n        initialized\\n        returns (uint256 _len)\\n    {\\n        _len = _lootboxData.allLootboxesLength();\\n    }\\n\\n    /**\\n     * @dev deploy a new lootbox using create2\\n     */\\n    function createLootbox(address owner, ILootbox.Lootbox memory _lootbox)\\n        external\\n        override\\n        initialized\\n        returns (address payable Lootbox)\\n    {\\n        // create the lookup hash for the given symbol\\n        // and check if it already exists\\n        bytes32 salt = keccak256(abi.encodePacked(_lootbox.symbol));\\n        require(\\n            _lootboxData.getLootboxBySymbol(uint256(salt)).contractAddress ==\\n                address(0),\\n            \\\"Lootbox EXISTS\\\"\\n        ); // single check is sufficient\\n\\n        // TODO: validation checks on the incoming Lootbox data\\n\\n        // create the gem pool using create2, which lets us determine the\\n        // address of a gem pool without interacting with the contract itself\\n        bytes memory bytecode = type(LootboxContract).creationCode;\\n\\n        // use create2 to deploy the gem pool contract\\n        Lootbox = payable(Create2.deploy(0, salt, bytecode));\\n\\n        // set the controller of the lootbox\\n        IControllable(Lootbox).addController(owner);\\n\\n        ILootbox(Lootbox).initialize(address(_lootboxData), _lootbox);\\n        _lootbox.contractAddress = address(Lootbox);\\n\\n        // insert the erc20 contract address into lists\\n        _lootboxData.addLootbox(_lootbox);\\n\\n        // emit an event about the new pool being created\\n        emit LootboxCreated(\\n            _lootbox.lootboxHash,\\n            _lootbox.contractAddress,\\n            _lootbox\\n        );\\n    }\\n\\n    function migrate(address migrateTo) external initialized onlyController {\\n        Controllable(address(_lootboxData)).addController(migrateTo);\\n        LootboxFactory(migrateTo).initialize(address(_lootboxData));\\n        selfdestruct(payable(migrateTo));\\n    }\\n}\\n\",\"keccak256\":\"0xc0e4b8eb0df887eab760c29f938ddfb3a8cc674f2a551eb2c95dc0221063263b\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/ILootbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @dev A lootbox is a contract that works with an erc1155 to implement a game lootbox:\\n/// a lootbox is a contract that accepts a single quantity of some erc1155 tokenhash and\\n/// then based on a set of rules goverened by probability, mints one or more outgoing tokens\\n/// as it burns the incoming token. The rules are defined by the lootbox author and are\\n/// stored in the lootbox contract. A newly-created lootbox contract assigns controllership\\n/// to its creator, who can them add other controllers, and can set the rules for the lootbox.\\n/// Each lootbox is configured with some number of Loot items, each of which has deterministic\\n/// tokenhash. These loot items each have names, symboles, and a probability of being minted.\\n/// Users open the lootbox by providing the right gem to the lootbox contract, and then\\n/// the lootbox contract mints the right number of tokens for the user. This contract uses\\n/// a pseudo-random deterministic sieve to determine the number and type of tokens minted\\n\\ninterface ILootbox {\\n    // the lootbox itself\\n    struct Lootbox {\\n        address owner;\\n        address contractAddress;\\n        address randomFarmer;\\n        address multitoken;\\n        uint256 lootboxHash; // identifier and lootbox token hash for the lootbox\\n        string symbol;\\n        string name;\\n        string description;\\n        uint8 minLootPerOpen;\\n        uint8 maxLootPerOpen;\\n        uint256 openPrice;\\n        uint256 maxOpens;\\n        uint256 openCount;\\n        uint256 totalLootGenerated;\\n        uint256 lootboxTokenSalePrice;\\n        uint256 probabilitiesSum;\\n        bool initialized;\\n    }\\n\\n    // loot items\\n    struct Loot {\\n        uint256 lootHash;\\n        address owner;\\n        address multitoken;\\n        string symbol;\\n        string name;\\n        uint256 probability;\\n        uint256 probabilityIndex;\\n        uint256 probabilityRoll;\\n        uint256 maxMint;\\n        uint256 minted;\\n    }\\n\\n    event LootboxCreated(\\n        address indexed creator,\\n        uint256 indexed hash,\\n        address indexed contractAddress,\\n        Lootbox data\\n    );\\n\\n    event LootboxMigrated(\\n        address indexed migrator,\\n        uint256 indexed hash,\\n        address indexed oldContractAddress,\\n        address newContractAddress,\\n        Lootbox data\\n    );\\n\\n    event LootboxOpened(\\n        address indexed opener,\\n        uint256 indexed hash,\\n        Lootbox openedLootbox,\\n        Loot[] receivedLoot\\n    );\\n\\n    event LootAdded(\\n        address indexed adder,\\n        uint256 indexed hash,\\n        Lootbox addedLootbox,\\n        Loot addedLoot\\n    );\\n\\n    event LootboxTokensMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        Lootbox mintedLootbox,\\n        uint256 mintedAmount\\n    );\\n\\n    event LootMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        Lootbox mintedLootbox,\\n        Loot mintedLoot\\n    );\\n\\n    function initialize(\\n        address lootboxData,\\n        ILootbox.Lootbox memory lootboxInit\\n    ) external;\\n\\n    function mintLootboxTokens(uint256 amount) external;\\n\\n    function mintLoot(uint8 index, uint256 amount)\\n        external\\n        returns (Loot memory);\\n\\n    function openLootbox() external returns (Loot[] memory);\\n\\n    function allLoot() external view returns (Loot[] memory);\\n\\n    function addLoot(Loot memory _loot) external returns (uint256);\\n\\n    function getLoot(uint256 index) external view returns (Loot memory);\\n}\\n\",\"keccak256\":\"0x3095bbf70cff5b6be09f8604382f57fa84dfc8b63a2f5d5f38e980d03ab408ef\",\"license\":\"MIT\"},\"src/interfaces/ILootboxData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ILootbox.sol\\\";\\n\\ninterface ILootboxData {\\n    function addLootbox(ILootbox.Lootbox memory)\\n        external\\n        returns (uint256 lootbox);\\n\\n    function getLootboxBySymbol(uint256 lootbox)\\n        external\\n        view\\n        returns (ILootbox.Lootbox memory);\\n\\n    function getLootboxByHash(uint256 lootbox)\\n        external\\n        view\\n        returns (ILootbox.Lootbox memory);\\n\\n    function lootboxes() external view returns (ILootbox.Lootbox[] memory);\\n\\n    function allLootboxes(uint256 index)\\n        external\\n        view\\n        returns (ILootbox.Lootbox memory);\\n\\n    function allLootboxesLength() external view returns (uint256);\\n\\n    function getLoot(uint256 lootbox, uint256 index)\\n        external\\n        view\\n        returns (ILootbox.Loot memory);\\n\\n    function addLoot(uint256 lootbox, ILootbox.Loot memory lootboxData)\\n        external\\n        returns (uint256);\\n\\n    function setLoot(\\n        uint256 lootbox,\\n        uint256 index,\\n        ILootbox.Loot memory lootboxData\\n    ) external;\\n\\n    function allLoot(uint256 lootbox)\\n        external\\n        view\\n        returns (ILootbox.Loot[] memory);\\n\\n    function delLoot(uint256 lootbox, uint256 index)\\n        external\\n        returns (ILootbox.Loot memory);\\n}\\n\",\"keccak256\":\"0x2522ab32431778220c7ab2fc0924daf11f12ed6d77b970699970bacaabb3311b\",\"license\":\"MIT\"},\"src/interfaces/ILootboxFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ILootbox.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem lootbox factory\\n */\\ninterface ILootboxFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event LootboxCreated(\\n        uint256 id,\\n        address contractAddress,\\n        ILootbox.Lootbox data\\n    );\\n\\n    event LootboxMigrated(\\n        uint256 id,\\n        address contractAddress,\\n        ILootbox.Lootbox data\\n    );\\n\\n    function initialize(address) external;\\n\\n    function getLootbox(uint256 _symbolHash)\\n        external\\n        view\\n        returns (address _lootbox);\\n\\n    function lootboxes() external view returns (ILootbox.Lootbox[] memory _all);\\n\\n    function allLootboxes(uint256 idx) external view returns (address _lootbox);\\n\\n    function allLootboxesLength() external view returns (uint256);\\n\\n    function createLootbox(address owner, ILootbox.Lootbox memory _lootbox)\\n        external\\n        returns (address payable);\\n}\\n\",\"keccak256\":\"0x0c02f12944d9e3c159aa2925817df0d1b7d9375da015cf3e103a2fa3e6580eb6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    struct Royalty {\\n        address owner;\\n        uint256 royaltyPermillion;\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function setRoyaltyInfo(\\n        uint256 _tokenId,\\n        address _owner,\\n        uint256 feePermil\\n    ) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0x1d54431d4f990265d8a0c692430e75c5c77870b78f19264069e1cfe86d7464c0\",\"license\":\"MIT\"},\"src/interfaces/IRandomFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IRandomFarmer {\\n    function getRandomBytes(uint8 amount) external returns (bytes32[] memory);\\n\\n    function getRandomUints(uint8 amount) external returns (uint256[] memory);\\n\\n    function getRandomNumber(uint256 min, uint256 max)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IRandomFarm is IRandomFarmer {\\n    function initialize(uint256 seed) external;\\n\\n    function addRandomness(uint256 randomness) external;\\n}\\n\",\"keccak256\":\"0x30c47bb1d97367da45f911bfb8c63b0af671e1dae3d5faac65a6203af6717cf6\",\"license\":\"MIT\"},\"src/lootbox/LootboxContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../interfaces/ILootbox.sol\\\";\\nimport \\\"../interfaces/IRandomFarm.sol\\\";\\nimport \\\"../interfaces/ILootboxData.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../access/Controllable.sol\\\";\\n\\n/// @dev A lootbox is a contract that works with an erc1155 to implement a game lootbox:\\n/// a lootbox is a contract that accepts a single quantity of some erc1155 tokenhash and\\n/// then based on a set of rules goverened by probability, mints one or more outgoing tokens\\n/// as it burns the incoming token. The rules are defined by the lootbox author and are\\n/// stored in the lootbox contract. A newly-created lootbox contract assigns controllership\\n/// to its creator, who can them add other controllers, and can set the rules for the lootbox.\\n/// Each lootbox is configured with some number of Loot items, each of which has deterministic\\n/// tokenhash. These loot items each have names, symboles, and a probability of being minted.\\n/// Users open the lootbox by providing the right gem to the lootbox contract, and then\\n/// the lootbox contract mints the right number of tokens for the user. This contract uses\\n/// a pseudo-random deterministic sieve to determine the number and type of tokens minted\\n\\ncontract LootboxContract is ILootbox, Controllable, Initializable {\\n    ILootboxData internal _lootboxData;\\n    ILootbox.Lootbox internal _lootbox;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /// @dev contract must be initilized for modified method to be called\\n    modifier initialized() {\\n        require(\\n            _lootbox.lootboxHash != 0 && _lootbox.initialized == true,\\n            \\\"Lootbox is not initialized\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Sets the lootbox data. The lootbox contract can either initialise a new\\n    // lootbox struct or it can load and update an existing lootbox struct.\\n    function initialize(\\n        address lootboxData,\\n        ILootbox.Lootbox memory lootboxInit\\n    ) external override initializer {\\n        require(\\n            IControllable(lootboxData).isController(address(this)) == true,\\n            \\\"Lootbox data must be controlled by this lootbox\\\"\\n        );\\n        _lootboxData = ILootboxData(lootboxData);\\n        if (lootboxInit.lootboxHash == 0) {\\n            require(\\n                lootboxInit.multitoken != address(0),\\n                \\\"Multitoken address must be set\\\"\\n            );\\n            require(bytes(lootboxInit.name).length != 0, \\\"Name must be set\\\");\\n            require(\\n                bytes(lootboxInit.symbol).length != 0,\\n                \\\"Symbol must be set\\\"\\n            );\\n            require(lootboxInit.minLootPerOpen != 0, \\\"Min loot must be set\\\");\\n            require(lootboxInit.maxLootPerOpen != 0, \\\"Max loot must be set\\\");\\n            // TODO: additional validity checks would not hurt here\\n            _lootbox = lootboxInit;\\n            _lootbox.owner = msg.sender;\\n            _lootbox.lootboxHash = uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        msg.sender,\\n                        lootboxInit.multitoken,\\n                        lootboxInit.symbol,\\n                        lootboxInit.name,\\n                        block.timestamp\\n                    )\\n                )\\n            );\\n            _lootbox.initialized = true;\\n            _lootboxData.addLootbox(_lootbox);\\n            emit LootboxCreated(\\n                msg.sender,\\n                _lootbox.lootboxHash,\\n                address(this),\\n                _lootbox\\n            );\\n        } else {\\n            // load the lootbox struct\\n            _lootbox = _lootboxData.getLootboxByHash(lootboxInit.lootboxHash);\\n            require(\\n                _lootbox.owner == msg.sender,\\n                \\\"Lootbox must be owned by the caller to uppgrade contract\\\"\\n            );\\n            emit LootboxMigrated(\\n                msg.sender,\\n                _lootbox.lootboxHash,\\n                _lootbox.contractAddress,\\n                address(this),\\n                _lootbox\\n            );\\n        }\\n    }\\n\\n    function openLootbox()\\n        external\\n        override\\n        initialized\\n        returns (Loot[] memory _lootOut)\\n    {\\n        // make sure that the caller has at least one lootbox token\\n        require(\\n            IERC1155(_lootbox.multitoken).balanceOf(\\n                msg.sender,\\n                _lootbox.lootboxHash\\n            ) > 0,\\n            \\\"Insufficient lootbox token balance\\\"\\n        );\\n\\n        // no need to transfer the lootbox token anywhere, we can just burn it in place\\n        INFTGemMultiToken(_lootbox.multitoken).burn(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            1\\n        );\\n\\n        // first we need to determine the number of loot items to mint\\n        // if min == max, then we mint that exact number of items. Otherwise,\\n        // we use a random number between min and max to determine the number\\n        // of loot items to mint\\n        uint8 lootCount = _lootbox.minLootPerOpen;\\n        if (_lootbox.minLootPerOpen != _lootbox.maxLootPerOpen) {\\n            lootCount = uint8(\\n                IRandomFarmer(_lootbox.randomFarmer).getRandomNumber(\\n                    uint256(_lootbox.minLootPerOpen),\\n                    uint256(_lootbox.maxLootPerOpen)\\n                )\\n            );\\n        } else lootCount = _lootbox.minLootPerOpen;\\n\\n        // now that we know how much we need to mint, we can create the\\n        // loot roll array that will hold our results and create some loot\\n        _lootOut = new Loot[](lootCount);\\n\\n        // grab the array of loot items to disburse from\\n        Loot[] memory _loot = _lootboxData.allLoot(_lootbox.lootboxHash);\\n\\n        // now we need some randomness to determine which loot items we win\\n        // we use a pseudo-random deterministic sieve to determine the number\\n        // and type of tokens minted\\n        uint256[] memory _lootRoll = IRandomFarmer(_lootbox.randomFarmer)\\n            .getRandomUints(lootCount);\\n\\n        // mint the loot items\\n        for (uint256 i = 0; i < lootCount; i++) {\\n            // generate a loot item given a random seed\\n            (uint8 winIndex, uint256 winRoll) = _generateLoot(_lootRoll[i]);\\n            // assign the loot item to the loot array\\n            _lootOut[i] = _loot[winIndex];\\n            _lootOut[i].probabilityRoll = winRoll;\\n            // mint the loot item to the multitoken\\n            INFTGemMultiToken(_lootbox.multitoken).mint(\\n                msg.sender,\\n                _lootOut[i].lootHash,\\n                1\\n            );\\n        }\\n\\n        /// generate an event reporting on the loot that was found\\n        emit LootboxOpened(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            _lootbox,\\n            _lootOut\\n        );\\n    }\\n\\n    function mintLootboxTokens(uint256 amount)\\n        external\\n        override\\n        initialized\\n        onlyController\\n    {\\n        // mint the loot item to the owner\\n        INFTGemMultiToken(_lootbox.multitoken).mint(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            amount\\n        );\\n\\n        // generate an event reporting on the loot that was found\\n        emit LootboxTokensMinted(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            _lootbox,\\n            amount\\n        );\\n    }\\n\\n    function mintLoot(uint8 index, uint256 amount)\\n        external\\n        override\\n        initialized\\n        onlyController\\n        returns (Loot memory)\\n    {\\n        // require a valid loot index\\n        Loot[] memory _allLoot = _lootboxData.allLoot(_lootbox.lootboxHash);\\n        require(index < _allLoot.length, \\\"Loot index out of bounds\\\");\\n        // mint the loot item to the minter\\n        INFTGemMultiToken(_lootbox.multitoken).mint(\\n            msg.sender,\\n            _allLoot[index].lootHash,\\n            amount\\n        );\\n        // forced to use GOVERNANCE here as a token type because\\n        // someone decided to 'clean up' what they didn't understand.\\n        // there was a very good reason for this, that being that an\\n        // int type rather than an enum allows us to easily add new\\n        // token types. Noe I have to figure out how to handle this\\n        // in some other way. Thanks, Justin\\n        INFTGemMultiToken(_lootbox.multitoken).setTokenData(\\n            _allLoot[index].lootHash,\\n            INFTGemMultiToken.TokenType.GOVERNANCE,\\n            address(this)\\n        );\\n\\n        // emit a message about it\\n        emit LootMinted(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            _lootbox,\\n            _allLoot[index]\\n        );\\n        // return the loot item we minted\\n        return _allLoot[index];\\n    }\\n\\n    function _generateLoot(uint256 dice)\\n        internal\\n        view\\n        returns (uint8 winnerIndex, uint256 winnerRoll)\\n    {\\n        // validate the dice roll is in the proper range\\n        require(\\n            dice < _lootbox.probabilitiesSum,\\n            \\\"Dice roll must be less than total probability\\\"\\n        );\\n        uint256 floor = 0;\\n        // get all the loot there is to award\\n        Loot[] memory _loot = _lootboxData.allLoot(_lootbox.lootboxHash);\\n        // iterate through the loot items\\n        for (uint256 i = 0; i < _loot.length; i++) {\\n            // if the dice roll is between the floor and the probability index\\n            // then this is the item we will award\\n            if (floor <= dice && dice < _loot[i].probabilityIndex) {\\n                winnerIndex = uint8(i);\\n                winnerRoll = dice;\\n                break;\\n            }\\n            // increment the floor to the next probability index\\n            floor = _loot[i].probabilityIndex;\\n        }\\n        return (winnerIndex, winnerRoll);\\n    }\\n\\n    function allLoot()\\n        external\\n        view\\n        override\\n        initialized\\n        returns (Loot[] memory)\\n    {\\n        return _lootboxData.allLoot(_lootbox.lootboxHash);\\n    }\\n\\n    function addLoot(Loot memory _loot)\\n        external\\n        override\\n        initialized\\n        onlyController\\n        returns (uint256)\\n    {\\n        // basic sanity checks\\n        require(bytes(_loot.symbol).length > 0, \\\"Symbol must be set\\\");\\n        require(bytes(_loot.name).length > 0, \\\"name must be set\\\");\\n        require(_loot.probability > 0, \\\"probability must be set\\\");\\n\\n        // populate field values the loot must have\\n        _loot.multitoken = _lootbox.multitoken;\\n        _loot.probabilityIndex = _lootbox.probabilitiesSum + _loot.probability;\\n        _lootbox.probabilitiesSum += _loot.probability;\\n        _loot.lootHash = uint256(\\n            keccak256(abi.encodePacked(_lootbox.lootboxHash, _loot.symbol))\\n        );\\n\\n        // emit a message about it\\n        emit LootAdded(msg.sender, _lootbox.lootboxHash, _lootbox, _loot);\\n\\n        // return the added loot item index\\n        return _lootboxData.addLoot(_lootbox.lootboxHash, _loot);\\n    }\\n\\n    function _recalculateProbabilities() internal {\\n        // get all the loot there is to award\\n        Loot[] memory _allLoot = _lootboxData.allLoot(_lootbox.lootboxHash);\\n        uint256 floor = 0;\\n        // iterate through the loot items\\n        for (uint256 i = 0; i < _allLoot.length; i++) {\\n            // set the probability index to the floor\\n            _allLoot[i].probabilityIndex = floor + _allLoot[i].probability;\\n            floor += _allLoot[i].probability;\\n            _lootboxData.setLoot(_lootbox.lootboxHash, i, _allLoot[i]);\\n        }\\n    }\\n\\n    function getLoot(uint256 index)\\n        external\\n        view\\n        override\\n        initialized\\n        returns (Loot memory)\\n    {\\n        return _lootboxData.getLoot(_lootbox.lootboxHash, index);\\n    }\\n\\n    function withdrawFees(address receiver)\\n        external\\n        initialized\\n        onlyController\\n    {\\n        require(address(this).balance > 0, \\\"Lootbox is empty\\\");\\n        payable(receiver).transfer(address(this).balance);\\n    }\\n\\n    function feeBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function migrate(address migrateTo) external initialized onlyController {\\n        IControllable(address(_lootboxData)).addController(migrateTo);\\n        ILootbox(migrateTo).initialize(address(_lootboxData), _lootbox);\\n        selfdestruct(payable(migrateTo));\\n    }\\n}\\n\",\"keccak256\":\"0x32cb62c1676b9206f986a2753546894839e7d7e25d2ef66d59311d51ad204108\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "libraries": {
    "Strings": "0xeB3E79099663eC952e02E608E00d463F36b4Fb75",
    "AddressSet": "0x8974D57fCfF9C10E9d41709da86d006604D8c75d",
    "UInt256Set": "0x8B6893DB13b55d4952a51d5188215e2a470515a9",
    "Create2": "0xBa85d3e8E0F9e48F5c21649d33f6d0f9Af12E3f5",
    "WrappedTokenLib": "0x0307a2E913FD8fb384a939Cfb7655C30820727D8",
    "ComplexPoolLib": "0x3802c9d35c585ac6668e24A93Bb341D50662aA4E"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "allLootboxes(uint256)": {
        "details": "get the quantized token for this"
      },
      "allLootboxesLength()": {
        "details": "number of lootboxes"
      },
      "createLootbox(address,(address,address,address,address,uint256,string,string,string,uint8,uint8,uint256,uint256,uint256,uint256,uint256,uint256,bool))": {
        "details": "deploy a new lootbox using create2"
      },
      "getLootbox(uint256)": {
        "details": "get a lootbox"
      },
      "initialize(address)": {
        "details": "contract initialiser - set the data object"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "lootboxes()": {
        "details": "get the quantized token for this"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12920,
        "contract": "src/factories/LootboxFactory.sol:LootboxFactory",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 109,
        "contract": "src/factories/LootboxFactory.sol:LootboxFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 112,
        "contract": "src/factories/LootboxFactory.sol:LootboxFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 13607,
        "contract": "src/factories/LootboxFactory.sol:LootboxFactory",
        "label": "_lootboxData",
        "offset": 2,
        "slot": "1",
        "type": "t_contract(ILootboxData)16334"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILootboxData)16334": {
        "encoding": "inplace",
        "label": "contract ILootboxData",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}