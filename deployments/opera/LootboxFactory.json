{
  "address": "0x3769A78Faf530C82Bfa694F7e99b184D16217C6e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Lootbox",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "LootboxCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Lootbox",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "LootboxMigrated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "allLootboxes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct ILootbox.Lootbox",
          "name": "_lootbox",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allLootboxesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_len",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct ILootbox.Lootbox",
          "name": "_lootbox",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "enum ITokenSeller.BuyPriceIncreaseRateType",
              "name": "buyPriceIncreaseRateType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceIncreaseRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxQuantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxBuyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalBuyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleEndTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "open",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "totalPurchased",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITokenSeller.TokenSellerInfo",
          "name": "_tokenSellerInfo",
          "type": "tuple"
        }
      ],
      "name": "createLootbox",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct ILootbox.Lootbox",
          "name": "lootbox_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_symbolHash",
          "type": "uint256"
        }
      ],
      "name": "getLootbox",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct ILootbox.Lootbox",
          "name": "_lootbox",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__data",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lootboxes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct ILootbox.Lootbox[]",
          "name": "_all",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "migrateTo",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x78dd241f57035e87fd5ec5e94f419b025ae659403b82bba3889716a8c097a79c",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x3769A78Faf530C82Bfa694F7e99b184D16217C6e",
    "transactionIndex": 2,
    "gasUsed": "5266434",
    "logsBloom": "0x
    "blockHash": "0x0000795000000f2a2361752dcf9a7120388428a87590582fa8b010a2162e4f33",
    "transactionHash": "0x78dd241f57035e87fd5ec5e94f419b025ae659403b82bba3889716a8c097a79c",
    "logs": [],
    "blockNumber": 16212498,
    "cumulativeGasUsed": "5603767",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2dcd9e984e50e58528a2168ad5da2fbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"LootboxCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"LootboxMigrated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"allLootboxes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"_lootbox\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allLootboxesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"_lootbox\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ITokenSeller.BuyPriceIncreaseRateType\",\"name\":\"buyPriceIncreaseRateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceIncreaseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchased\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenSeller.TokenSellerInfo\",\"name\":\"_tokenSellerInfo\",\"type\":\"tuple\"}],\"name\":\"createLootbox\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"lootbox_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_symbolHash\",\"type\":\"uint256\"}],\"name\":\"getLootbox\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"_lootbox\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__data\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootboxes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct ILootbox.Lootbox[]\",\"name\":\"_all\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrateTo\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"allLootboxes(uint256)\":{\"details\":\"get the quantized token for this\"},\"allLootboxesLength()\":{\"details\":\"number of lootboxes\"},\"createLootbox(address,(address,address,address,address,uint256,string,string,string,uint8,uint8,uint256,uint256,uint256,uint256,bool),(address,address,address,uint256,uint256,uint8,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,uint256))\":{\"details\":\"deploy a new lootbox using create2\"},\"getLootbox(uint256)\":{\"details\":\"get a lootbox\"},\"initialize(address)\":{\"details\":\"contract initialiser - set the data object\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"lootboxes()\":{\"details\":\"get the quantized token for this\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/factories/LootboxFactory.sol\":\"LootboxFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x27f9465d84949f059ed37b23c82f4a9fc16c1b8d6fbd69837a0f920875e2af83\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa31f752b3b092c788ea06a6dced266db79c4407d69733d78bc15e519f39e1d3f\",\"license\":\"MIT\"},\"src/factories/LootboxFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../lootbox/LootboxContract.sol\\\";\\n\\nimport \\\"../interfaces/ITokenSeller.sol\\\";\\n\\nimport \\\"../interfaces/ILootbox.sol\\\";\\n\\nimport \\\"../interfaces/ILootboxData.sol\\\";\\n\\nimport \\\"../interfaces/ILootboxFactory.sol\\\";\\n\\nimport \\\"../access/Controllable.sol\\\";\\n\\ncontract LootboxFactory is ILootboxFactory, Controllable, Initializable {\\n    ILootboxData internal _lootboxData;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    modifier initialized() {\\n        require(\\n            address(_lootboxData) != address(0),\\n            \\\"Lootbox is not initialized\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev contract initialiser - set the data object\\n     */\\n    function initialize(address __data) external override initializer {\\n        require(\\n            IControllable(__data).isController(address(this)) == true,\\n            \\\"Lootbox data must be controlled by this lootbox factory\\\"\\n        );\\n        _lootboxData = ILootboxData(__data);\\n    }\\n\\n    function isInitialized() external view returns (bool) {\\n        return address(_lootboxData) != address(0);\\n    }\\n\\n    /**\\n     * @dev get a lootbox\\n     */\\n    function getLootbox(uint256 _symbolHash)\\n        external\\n        view\\n        override\\n        initialized\\n        returns (ILootbox.Lootbox memory _lootbox)\\n    {\\n        _lootbox = _lootboxData.getLootboxByHash(_symbolHash);\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function lootboxes()\\n        external\\n        view\\n        override\\n        initialized\\n        returns (ILootbox.Lootbox[] memory _all)\\n    {\\n        _all = _lootboxData.lootboxes();\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function allLootboxes(uint256 idx)\\n        external\\n        view\\n        override\\n        initialized\\n        returns (ILootbox.Lootbox memory _lootbox)\\n    {\\n        _lootbox = _lootboxData.allLootboxes(idx);\\n    }\\n\\n    /**\\n     * @dev number of lootboxes\\n     */\\n    function allLootboxesLength()\\n        external\\n        view\\n        override\\n        initialized\\n        returns (uint256 _len)\\n    {\\n        _len = _lootboxData.allLootboxesLength();\\n    }\\n\\n    /**\\n     * @dev deploy a new lootbox using create2\\n     */\\n    function createLootbox(address owner, ILootbox.Lootbox memory _lootbox, ITokenSeller.TokenSellerInfo memory _tokenSellerInfo)\\n        external\\n        override\\n        initialized\\n        returns (ILootbox.Lootbox memory lootbox_)\\n    {\\n        // create the lookup hash for the given symbol\\n        // and check if it already exists\\n        bytes32 salt = keccak256(abi.encodePacked(_lootbox.symbol));\\n        require(\\n            _lootboxData.getLootboxByHash(uint256(salt)).contractAddress ==\\n                address(0),\\n            \\\"Lootbox EXISTS\\\"\\n        ); // single check is sufficient\\n\\n        // TODO: validation checks on the incoming Lootbox data\\n\\n        // create the gem pool using create2, which lets us determine the\\n        // address of a gem pool without interacting with the contract itself\\n        bytes memory bytecode = type(LootboxContract).creationCode;\\n\\n        // initialize lootbox object\\n        lootbox_ = _lootbox;\\n\\n        // use create2 to deploy the gem pool contract\\n        lootbox_.contractAddress = payable(Create2.deploy(0, salt, bytecode));\\n\\n        // set the controller of the lootbox\\n        IControllable(lootbox_.contractAddress).addController(owner);\\n        IControllable(address(_lootboxData)).addController(lootbox_.contractAddress);\\n\\n        // initialize the lootbox data\\n        ILootbox(lootbox_.contractAddress).initialize(address(_lootboxData), _tokenSellerInfo, _lootbox);\\n\\n        // emit an event about the new pool being created\\n        emit LootboxCreated(\\n            _lootbox.lootboxHash,\\n            _lootbox.contractAddress,\\n            _lootbox\\n        );\\n    }\\n\\n    function migrate(address migrateTo) external initialized onlyController {\\n        Controllable(address(_lootboxData)).addController(migrateTo);\\n        LootboxFactory(migrateTo).initialize(address(_lootboxData));\\n        selfdestruct(payable(migrateTo));\\n    }\\n}\\n\",\"keccak256\":\"0xb30c745ca1e64d95e4a84b824e517fe1e63eef8219af0914cbcf9512aec495af\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/ILootbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ITokenSeller.sol\\\";\\n\\n/// @dev A lootbox is a contract that works with an erc1155 to implement a game lootbox:\\n/// a lootbox is a contract that accepts a single quantity of some erc1155 tokenhash and\\n/// then based on a set of rules goverened by probability, mints one or more outgoing tokens\\n/// as it burns the incoming token. The rules are defined by the lootbox author and are\\n/// stored in the lootbox contract. A newly-created lootbox contract assigns controllership\\n/// to its creator, who can them add other controllers, and can set the rules for the lootbox.\\n/// Each lootbox is configured with some number of Loot items, each of which has deterministic\\n/// tokenhash. These loot items each have names, symboles, and a probability of being minted.\\n/// Users open the lootbox by providing the right gem to the lootbox contract, and then\\n/// the lootbox contract mints the right number of tokens for the user. This contract uses\\n/// a pseudo-random deterministic sieve to determine the number and type of tokens minted\\n\\ninterface ILootbox {\\n    // the lootbox itself\\n    struct Lootbox {\\n        address owner; // the owner of the lootbox. they can do some admin things others cannot\\n        address contractAddress; // this is the address of the smart contract that implements lootbox\\n        address randomFarmer; // address of the random number generator used to generate the random numbers\\n        address multitoken; // address of the multitoken contract that mints the tokens\\n        uint256 lootboxHash; // identifier and lootbox token hash for the lootbox\\n        string symbol; // the symbol of the lootbox\\n        string name; // the name of the lootbox\\n        string description; // the description of the lootbox\\n        uint8 minLootPerOpen; // the minimum number of loot items that can be issued per open\\n        uint8 maxLootPerOpen; // the maximum number of loot items that can be issued per open\\n        uint256 maxOpens; // maximum number of times the lootbox can be opened\\n        // these are all values set by the system - not configurable by the user\\n        uint256 openCount;\\n        uint256 totalLootGenerated;\\n        uint256 probabilitiesSum;\\n        bool initialized;\\n    }\\n\\n    // loot items\\n    struct Loot {\\n        uint256 lootHash;\\n        address owner;\\n        address multitoken;\\n        string symbol;\\n        string name;\\n        uint256 probability;\\n        uint256 probabilityIndex;\\n        uint256 probabilityRoll;\\n        uint256 maxMint;\\n        uint256 minted;\\n    }\\n\\n    event LootboxCreated(\\n        address indexed creator,\\n        uint256 indexed hash,\\n        address indexed contractAddress,\\n        Lootbox data\\n    );\\n\\n    event LootboxMigrated(\\n        address indexed migrator,\\n        uint256 indexed hash,\\n        address indexed oldContractAddress,\\n        address newContractAddress,\\n        Lootbox data\\n    );\\n\\n    event LootboxOpened(\\n        address indexed opener,\\n        uint256 indexed hash,\\n        Lootbox openedLootbox,\\n        Loot[] receivedLoot\\n    );\\n\\n    event LootAdded(\\n        address indexed adder,\\n        uint256 indexed hash,\\n        Lootbox addedLootbox,\\n        Loot addedLoot\\n    );\\n\\n    event LootboxTokensMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        Lootbox mintedLootbox,\\n        uint256 mintedAmount\\n    );\\n\\n    event LootMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        Lootbox mintedLootbox,\\n        Loot mintedLoot\\n    );\\n\\n    function initialize(\\n        address lootboxData,\\n        ITokenSeller.TokenSellerInfo memory tokenSellerInfo,\\n        ILootbox.Lootbox memory lootboxInit\\n    ) external;\\n\\n    function mintLootboxTokens(uint256 amount) external;\\n\\n    function mintLoot(uint8 index, uint256 amount)\\n        external\\n        returns (Loot memory);\\n\\n    function openLootbox() external returns (Loot[] memory);\\n\\n    function allLoot() external view returns (Loot[] memory);\\n\\n    function addLoot(Loot memory _loot) external returns (uint256);\\n\\n    function getLoot(uint256 index) external view returns (Loot memory);\\n\\n    // TODO: add a allItemsLength()\\n}\\n\",\"keccak256\":\"0xf0e627372286960d65a46f4df6310c64b557055428322b8f2201f3a2352c6d16\",\"license\":\"MIT\"},\"src/interfaces/ILootboxData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ILootbox.sol\\\";\\nimport \\\"./ITokenSeller.sol\\\";\\n\\ninterface ILootboxData {\\n    function getFeeManager() external view returns (address);\\n\\n    function setFeeManager(address feeManagerAddress) external;\\n\\n    function addLootbox(ILootbox.Lootbox memory)\\n        external\\n        returns (uint256 lootbox);\\n\\n    function getLootboxByAddress(address lootbox)\\n        external\\n        view\\n        returns (ILootbox.Lootbox memory);\\n\\n    function getLootboxByHash(uint256 lootbox)\\n        external\\n        view\\n        returns (ILootbox.Lootbox memory);\\n\\n    function setLootbox(\\n        ILootbox.Lootbox memory lootboxData\\n    ) external;\\n\\n    function lootboxes() external view returns (ILootbox.Lootbox[] memory);\\n\\n    function allLootboxes(uint256 index)\\n        external\\n        view\\n        returns (ILootbox.Lootbox memory);\\n\\n    function allLootboxesLength() external view returns (uint256);\\n\\n    function getLoot(uint256 lootbox, uint256 index)\\n        external\\n        view\\n        returns (ILootbox.Loot memory);\\n\\n    function addLoot(uint256 lootbox, ILootbox.Loot memory lootboxData)\\n        external\\n        returns (uint256);\\n\\n    function setLoot(\\n        uint256 lootbox,\\n        uint256 index,\\n        ILootbox.Loot memory lootboxData\\n    ) external;\\n\\n    function allLoot(uint256 lootbox)\\n        external\\n        view\\n        returns (ILootbox.Loot[] memory);\\n\\n    function delLoot(uint256 lootbox, uint256 index)\\n        external\\n        returns (ILootbox.Loot memory);\\n\\n    function addTokenSeller(\\n        address tokenSeller,\\n        ITokenSeller.TokenSellerInfo memory\\n    ) external returns (uint256 tokenSellerIndex);\\n\\n    function getTokenSeller(address tokenSeller)\\n        external\\n        view\\n        returns (ITokenSeller.TokenSellerInfo memory);\\n\\n    function setTokenSeller(\\n        address tokenSellerAddress,\\n        ITokenSeller.TokenSellerInfo memory tokenSellerData\\n    ) external;\\n\\n    function tokenSellers()\\n        external\\n        view\\n        returns (ITokenSeller.TokenSellerInfo[] memory);\\n\\n    function allTokenSellers(uint256 index)\\n        external\\n        view\\n        returns (ITokenSeller.TokenSellerInfo memory);\\n\\n    function allTokenSellersLength() external view returns (uint256);\\n\\n    function increaseBuyPrice(address tokenSeller) external view  returns (uint256);\\n}\\n\",\"keccak256\":\"0x8bb32e5de27e125c38a97c75464ca6a6b585228794ffb4d276bd2129f79f92b1\",\"license\":\"MIT\"},\"src/interfaces/ILootboxFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ILootbox.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem lootbox factory\\n */\\ninterface ILootboxFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event LootboxCreated(\\n        uint256 id,\\n        address contractAddress,\\n        ILootbox.Lootbox data\\n    );\\n\\n    event LootboxMigrated(\\n        uint256 id,\\n        address contractAddress,\\n        ILootbox.Lootbox data\\n    );\\n\\n    function initialize(address) external;\\n\\n    function getLootbox(uint256 _symbolHash)\\n        external\\n        view\\n        returns (ILootbox.Lootbox memory);\\n\\n    function lootboxes() external view returns (ILootbox.Lootbox[] memory _all);\\n\\n    function allLootboxes(uint256 idx) external view returns (ILootbox.Lootbox memory _lootbox);\\n\\n    function allLootboxesLength() external view returns (uint256);\\n\\n    function createLootbox(address owner, ILootbox.Lootbox memory _lootbox, ITokenSeller.TokenSellerInfo memory _tokenSellerInfo)\\n        external\\n        returns (ILootbox.Lootbox memory);\\n}\\n\",\"keccak256\":\"0x296335e880e752278ac1e3983e34e651a5476cee8f28381ed75a395485ea1d61\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INFTGemFeeManager {\\n    event FeeChanged(\\n        address indexed operator,\\n        uint256 indexed feeHash,\\n        uint256 value\\n    );\\n\\n    function fee(uint256 feeTypeHash) external view returns (uint256);\\n\\n    function setFee(uint256 feeTypeHash, uint256 _fee) external;\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x073089b45be4de1e2feecfa65d36ea9cb3ec18cec7e3c1e9de18ea8923c016c2\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    struct Royalty {\\n        address owner;\\n        uint256 royaltyPermillion;\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function setRoyaltyInfo(\\n        uint256 _tokenId,\\n        address _owner,\\n        uint256 feePermil\\n    ) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0x1d54431d4f990265d8a0c692430e75c5c77870b78f19264069e1cfe86d7464c0\",\"license\":\"MIT\"},\"src/interfaces/IRandomFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IRandomFarmer {\\n    function getRandomBytes(uint8 amount) external returns (bytes32[] memory);\\n\\n    function getRandomUints(uint8 amount) external returns (uint256[] memory);\\n\\n    function getRandomNumber(uint256 min, uint256 max)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IRandomFarm is IRandomFarmer {\\n    function initialize(uint256 seed) external;\\n\\n    function addRandomness(uint256 randomness) external;\\n}\\n\",\"keccak256\":\"0x30c47bb1d97367da45f911bfb8c63b0af671e1dae3d5faac65a6203af6717cf6\",\"license\":\"MIT\"},\"src/interfaces/ITokenSeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @dev A token seller is a contract that can sell tokens to a token buyer.\\n/// The token buyer can buy tokens from the seller by paying a certain amount\\n/// of base currency to receive a certain amount of erc1155 tokens. the number\\n/// of tokens that can be bought is limited by the seller - the seller can\\n/// specify the maximum number of tokens that can be bought per transaction\\n/// and the maximum number of tokens that can be bought in total for a given\\n/// address. The seller can also specify the price of erc1155 tokens and how\\n/// that price increases per successful transaction. the token seller assumes\\n/// supply of the erc1155 is unlimited and features a request method\\n\\ninterface ITokenSeller {\\n    enum BuyPriceIncreaseRateType {\\n        NONE,\\n        FIXED,\\n        EXPONENTIAL,\\n        INVERSELOG\\n    }\\n\\n    struct TokenSellerInfo {\\n        address multitoken;\\n        address contractAddress;\\n        address owner;\\n        uint256 tokenHash;\\n        uint256 buyPrice;\\n        BuyPriceIncreaseRateType buyPriceIncreaseRateType;\\n        uint256 buyPriceIncreaseRate;\\n        uint256 maxQuantity;\\n        uint256 maxBuyAmount;\\n        uint256 maxTotalBuyAmount;\\n        uint256 saleStartTime;\\n        uint256 saleEndTime;\\n        bool initialized;\\n        bool open;\\n        uint256 totalPurchased;\\n    }\\n\\n    event TokenSellerCreated(address indexed creator, TokenSellerInfo info);\\n\\n    event Sold(\\n        address indexed contractAddress,\\n        address indexed buyer,\\n        uint256 indexed tokenHash,\\n        uint256 price,\\n        uint256 amount\\n    );\\n\\n    event Requested(\\n        address indexed contractAddress,\\n        address indexed seller,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n\\n    event Funded(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n\\n    event FundsCollected(address indexed receiver, uint256 indexed amount);\\n\\n    event TokenSellerMigrated(\\n        address indexed migrator,\\n        address indexed hash,\\n        address indexed oldContractAddress,\\n        address newContractAddress,\\n        TokenSellerInfo data\\n    );\\n\\n    function initialize(address tokenSellerData, TokenSellerInfo memory _info)\\n        external;\\n\\n    function isInitialized() external view returns (bool);\\n\\n    function getInfo() external view returns (TokenSellerInfo memory);\\n\\n    function setInfo(TokenSellerInfo memory _info) external;\\n\\n    /// @dev Buy tokens from the token seller.\\n    /// @param _amount The amount of erc1155 tokens to buy.\\n    /// @return The amount of erc1155 tokens that were bought.\\n    function buy(uint256 _amount) external payable returns (uint256);\\n\\n    /// @dev Request tokens from the token provider.\\n    /// @param _recipient The address of the token receiver.\\n    /// @param _amount The amount of erc1155 tokens to buy.\\n    /// @return The amount of erc1155 tokens that were requested.\\n    function request(address _recipient, uint256 _amount)\\n        external\\n        returns (uint256);\\n\\n    function receivePayout(address payable _recipient) external;\\n}\\n\",\"keccak256\":\"0x8783cfa454e469fc9425161cdc4336a2ea0db1379ad2828de0ab9197c36ea43c\",\"license\":\"MIT\"},\"src/lootbox/LootboxContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../interfaces/ILootbox.sol\\\";\\nimport \\\"../interfaces/IRandomFarm.sol\\\";\\nimport \\\"../interfaces/ILootboxData.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"./TokenSeller.sol\\\";\\nimport \\\"./LootboxLib.sol\\\";\\n\\n/// @dev A lootbox is a contract that works with an erc1155 to implement a game lootbox:\\n/// a lootbox is a contract that accepts a single quantity of some erc1155 tokenhash and\\n/// then based on a set of rules goverened by probability, mints one or more outgoing tokens\\n/// as it burns the incoming token. The rules are defined by the lootbox author and are\\n/// stored in the lootbox contract. A newly-created lootbox contract assigns controllership\\n/// to its creator, who can them add other controllers, and can set the rules for the lootbox.\\n/// Each lootbox is configured with some number of Loot items, each of which has deterministic\\n/// tokenhash. These loot items each have names, symbols, and a probability of being minted.\\n/// Users open the lootbox by providing the right gem to the lootbox contract, and then\\n/// the lootbox contract mints the right number of tokens for the user. This contract uses\\n/// a pseudo-random deterministic sieve to determine the number and type of tokens minted\\n\\ncontract LootboxContract is ILootbox, Controllable, Initializable, TokenSeller {\\n    ILootboxData internal _lootboxData;\\n    ILootbox.Lootbox internal _lootbox;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /// @dev contract must be initilized for modified method to be called\\n    modifier initialized() override {\\n        require(\\n            _lootbox.lootboxHash != 0 && _lootbox.initialized == true,\\n            \\\"Lootbox is not initialized\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Sets the lootbox data. The lootbox contract can either initialise a new\\n    // lootbox struct or it can load and update an existing lootbox struct.\\n    function initialize(\\n        address lootboxData,\\n        ITokenSeller.TokenSellerInfo memory tokenSellerInfo,\\n        ILootbox.Lootbox memory lootboxInit\\n    ) external override initializer {\\n        _lootboxData = ILootboxData(lootboxData);\\n        bool _isNew = false;\\n\\n        (_lootboxData, _isNew, _lootbox, tokenSellerInfo) = LootboxLib\\n            .initialize(\\n                address(this),\\n                lootboxData,\\n                tokenSellerInfo,\\n                lootboxInit\\n            );\\n\\n        this.initialize(lootboxData, tokenSellerInfo);\\n        if (_isNew) {\\n            emit LootboxCreated(\\n                msg.sender,\\n                _lootbox.lootboxHash,\\n                address(this),\\n                _lootbox\\n            );\\n        } else {\\n            emit LootboxMigrated(\\n                msg.sender,\\n                _lootbox.lootboxHash,\\n                _lootbox.contractAddress,\\n                address(this),\\n                _lootbox\\n            );\\n        }\\n    }\\n\\n    function openLootbox()\\n        external\\n        override\\n        initialized\\n        returns (Loot[] memory _lootOut)\\n    {\\n        Loot[] memory _allLoot = _lootboxData.allLoot(_lootbox.lootboxHash);\\n        return LootboxLib.openLootbox(_lootbox, _allLoot);\\n    }\\n\\n    function mintLootboxTokens(uint256 amount)\\n        external\\n        override\\n        initialized\\n        onlyController\\n    {\\n        // mint the loot item to the owner\\n        INFTGemMultiToken(_lootbox.multitoken).mint(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            amount\\n        );\\n\\n        // generate an event reporting on the loot that was found\\n        emit LootboxTokensMinted(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            _lootbox,\\n            amount\\n        );\\n    }\\n\\n    function mintLoot(uint8 index, uint256 amount)\\n        external\\n        override\\n        initialized\\n        onlyController\\n        returns (Loot memory)\\n    {\\n        Loot[] memory _allLoot = _lootboxData.allLoot(_lootbox.lootboxHash);\\n        return LootboxLib.mintLoot(_lootbox, _allLoot, index, amount);\\n    }\\n\\n    function allLoot()\\n        external\\n        view\\n        override\\n        initialized\\n        returns (Loot[] memory)\\n    {\\n        return _lootboxData.allLoot(_lootbox.lootboxHash);\\n    }\\n\\n    function addLoot(Loot memory _loot)\\n        external\\n        override\\n        initialized\\n        onlyController\\n        returns (uint256 _result)\\n    {\\n        // basic sanity checks\\n        require(bytes(_loot.symbol).length > 0, \\\"Symbol must be set\\\");\\n        require(bytes(_loot.name).length > 0, \\\"name must be set\\\");\\n        require(_loot.probability > 0, \\\"probability must be set\\\");\\n\\n        // populate field values the loot must have\\n        _loot.owner = _lootbox.owner;\\n        _loot.multitoken = _lootbox.multitoken;\\n        _loot.probabilityIndex = _lootbox.probabilitiesSum + _loot.probability;\\n        _lootbox.probabilitiesSum += _loot.probability;\\n        _lootboxData.setLootbox(_lootbox);\\n        _loot.lootHash = uint256(\\n            keccak256(abi.encodePacked(_lootbox.symbol, _loot.symbol))\\n        );\\n\\n        // emit a message about it\\n        emit LootAdded(msg.sender, _lootbox.lootboxHash, _lootbox, _loot);\\n\\n        // return the addeduint loot item index\\n        _result = _lootboxData.addLoot(_lootbox.lootboxHash, _loot);\\n    }\\n\\n    function getLoot(uint256 index)\\n        external\\n        view\\n        override\\n        initialized\\n        returns (Loot memory)\\n    {\\n        return _lootboxData.getLoot(_lootbox.lootboxHash, index);\\n    }\\n\\n    function withdrawFees(address receiver)\\n        external\\n        initialized\\n        onlyController\\n    {\\n        require(address(this).balance > 0, \\\"Lootbox is empty\\\");\\n        payable(receiver).transfer(address(this).balance);\\n    }\\n\\n    function migrate_LootboxContract(address migrateTo)\\n        external\\n        initialized\\n        onlyController\\n    {\\n        this.migrate_TokenSeller(migrateTo, false);\\n        IControllable(address(_lootboxData)).addController(migrateTo);\\n        ILootbox(migrateTo).initialize(\\n            address(_lootboxData),\\n            _tokenSeller,\\n            _lootbox\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7d212aaac942499c194d4ca1d2520cd0203b7d857344bb58cf01c5e31aa4fb97\",\"license\":\"MIT\"},\"src/lootbox/LootboxLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/ILootbox.sol\\\";\\nimport \\\"../interfaces/IRandomFarm.sol\\\";\\nimport \\\"../interfaces/ILootboxData.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"./TokenSeller.sol\\\";\\n\\nlibrary LootboxLib {\\n    event LootboxCreated(\\n        address indexed creator,\\n        uint256 indexed hash,\\n        address indexed contractAddress,\\n        ILootbox.Lootbox data\\n    );\\n\\n    event LootboxMigrated(\\n        address indexed migrator,\\n        uint256 indexed hash,\\n        address indexed oldContractAddress,\\n        address newContractAddress,\\n        ILootbox.Lootbox data\\n    );\\n\\n    event LootboxOpened(\\n        address indexed opener,\\n        uint256 indexed hash,\\n        ILootbox.Lootbox openedLootbox,\\n        ILootbox.Loot[] receivedLoot\\n    );\\n\\n    event LootAdded(\\n        address indexed adder,\\n        uint256 indexed hash,\\n        ILootbox.Lootbox addedLootbox,\\n        ILootbox.Loot addedLoot\\n    );\\n\\n    event LootboxTokensMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        ILootbox.Lootbox mintedLootbox,\\n        uint256 mintedAmount\\n    );\\n\\n    event LootMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        ILootbox.Lootbox mintedLootbox,\\n        ILootbox.Loot mintedLoot\\n    );\\n\\n    /// @dev Sets the lootbox data. The lootbox contract can either initialise a new\\n    // lootbox struct or it can load and update an existing lootbox struct.\\n    function initialize(\\n        address contractAddress,\\n        address lootboxData,\\n        ITokenSeller.TokenSellerInfo memory tokenSellerInfo,\\n        ILootbox.Lootbox memory lootboxInit\\n    )\\n        external\\n        returns (\\n            ILootboxData _lootboxData,\\n            bool _isNew,\\n            ILootbox.Lootbox memory _lootbox,\\n            ITokenSeller.TokenSellerInfo memory tokenSellerInfo_\\n        )\\n    {\\n        require(\\n            IControllable(lootboxData).isController(address(this)) == true,\\n            \\\"Lootbox data must be controlled by this lootbox\\\"\\n        );\\n        tokenSellerInfo_ = tokenSellerInfo;\\n        _lootboxData = ILootboxData(lootboxData);\\n        _isNew = lootboxInit.lootboxHash == 0;\\n        if (lootboxInit.lootboxHash == 0) {\\n            require(\\n                lootboxInit.multitoken != address(0),\\n                \\\"Multitoken address must be set\\\"\\n            );\\n            require(bytes(lootboxInit.name).length != 0, \\\"Name must be set\\\");\\n            require(\\n                bytes(lootboxInit.symbol).length != 0,\\n                \\\"Symbol must be set\\\"\\n            );\\n            require(lootboxInit.minLootPerOpen != 0, \\\"Min loot must be set\\\");\\n            require(lootboxInit.maxLootPerOpen != 0, \\\"Max loot must be set\\\");\\n            // TODO: additional validity checks would not hurt here\\n            _lootbox = lootboxInit;\\n            _lootbox.lootboxHash = uint256(\\n                keccak256(abi.encodePacked(lootboxInit.symbol))\\n            );\\n            _lootbox.initialized = true;\\n        }\\n        _lootbox.contractAddress = contractAddress;\\n        tokenSellerInfo_.tokenHash = _lootbox.lootboxHash;\\n        _lootboxData.setTokenSeller(contractAddress, tokenSellerInfo);\\n        if (_isNew) {\\n            _lootboxData.addLootbox(_lootbox);\\n        } else {\\n            // load the lootbox struct\\n            _lootbox = _lootboxData.getLootboxByHash(lootboxInit.lootboxHash);\\n            _lootbox.contractAddress = contractAddress;\\n            _lootboxData.setLootbox(_lootbox);\\n            require(\\n                _lootbox.owner == msg.sender,\\n                \\\"Lootbox must be owned by the caller to uppgrade contract\\\"\\n            );\\n        }\\n    }\\n\\n    function openLootbox(\\n        ILootbox.Lootbox memory _lootbox,\\n        ILootbox.Loot[] memory _loot\\n    ) external returns (ILootbox.Loot[] memory _lootOut) {\\n        // make sure that the caller has at least one lootbox token\\n        require(\\n            IERC1155(_lootbox.multitoken).balanceOf(\\n                msg.sender,\\n                _lootbox.lootboxHash\\n            ) > 0,\\n            \\\"Insufficient lootbox token balance\\\"\\n        );\\n\\n        // no need to transfer the lootbox token anywhere, we can just burn it in place\\n        INFTGemMultiToken(_lootbox.multitoken).burn(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            1\\n        );\\n\\n        // first we need to determine the number of loot items to mint\\n        // if min == max, then we mint that exact number of items. Otherwise,\\n        // we use a random number between min and max to determine the number\\n        // of loot items to mint\\n        uint8 lootCount = _lootbox.minLootPerOpen;\\n        if (_lootbox.minLootPerOpen != _lootbox.maxLootPerOpen) {\\n            lootCount = uint8(\\n                IRandomFarmer(_lootbox.randomFarmer).getRandomNumber(\\n                    uint256(_lootbox.minLootPerOpen),\\n                    uint256(_lootbox.maxLootPerOpen)\\n                )\\n            );\\n        } else lootCount = _lootbox.minLootPerOpen;\\n\\n        // now that we know how much we need to mint, we can create the\\n        // loot roll array that will hold our results and create some loot\\n        _lootOut = new ILootbox.Loot[](lootCount);\\n\\n        // now we need some randomness to determine which loot items we win\\n        // we use a pseudo-random deterministic sieve to determine the number\\n        // and type of tokens minted\\n        uint256[] memory _lootRoll = IRandomFarmer(_lootbox.randomFarmer)\\n            .getRandomUints(lootCount);\\n\\n        // mint the loot items\\n        for (uint256 i = 0; i < lootCount; i++) {\\n            // generate a loot item given a random seed\\n            (uint8 winIndex, uint256 winRoll) = _generateLoot(\\n                _loot,\\n                _lootRoll[i],\\n                _lootbox.probabilitiesSum\\n            );\\n\\n            // assign the loot item to the loot array\\n            _lootOut[i] = _loot[winIndex];\\n            _lootOut[i].probabilityRoll = winRoll;\\n\\n            // mint the loot item to the multitoken\\n            INFTGemMultiToken(_lootbox.multitoken).mint(\\n                msg.sender,\\n                _lootOut[i].lootHash,\\n                1\\n            );\\n        }\\n\\n        /// generate an event reporting on the loot that was found\\n        emit LootboxOpened(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            _lootbox,\\n            _lootOut\\n        );\\n    }\\n\\n    function mintLoot(\\n        ILootbox.Lootbox memory _lootbox,\\n        ILootbox.Loot[] memory _allLoot,\\n        uint8 index,\\n        uint256 amount\\n    ) external returns (ILootbox.Loot memory) {\\n        require(index < _allLoot.length, \\\"Loot index out of bounds\\\");\\n        // mint the loot item to the minter\\n        INFTGemMultiToken(_lootbox.multitoken).mint(\\n            msg.sender,\\n            _allLoot[index].lootHash,\\n            amount\\n        );\\n        // forced to use GOVERNANCE here as a token type because\\n        // someone decided to 'clean up' what they didn't understand.\\n        // there was a very good reason for this, that being that an\\n        // int type rather than an enum allows us to easily add new\\n        // token types. Noe I have to figure out how to handle this\\n        // in some other way. Thanks, Justin\\n        INFTGemMultiToken(_lootbox.multitoken).setTokenData(\\n            _allLoot[index].lootHash,\\n            INFTGemMultiToken.TokenType.GOVERNANCE,\\n            address(this)\\n        );\\n\\n        // emit a message about it\\n        emit LootMinted(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            _lootbox,\\n            _allLoot[index]\\n        );\\n        // return the loot item we minted\\n        return _allLoot[index];\\n    }\\n\\n    function _generateLoot(\\n        ILootbox.Loot[] memory _loot,\\n        uint256 dice,\\n        uint256 _probabilitiesSum\\n    ) internal pure returns (uint8 winnerIndex, uint256 winnerRoll) {\\n        // validate the dice roll is in the proper range\\n        require(\\n            dice < _probabilitiesSum,\\n            \\\"Dice roll must be less than total probability\\\"\\n        );\\n        uint256 floor = 0;\\n        // get all the loot there is to award\\n\\n        // iterate through the loot items\\n        for (uint256 i = 0; i < _loot.length; i++) {\\n            // if the dice roll is between the floor and the probability index\\n            // then this is the item we will award\\n            if (floor <= dice && dice < _loot[i].probabilityIndex) {\\n                winnerIndex = uint8(i);\\n                winnerRoll = dice;\\n                break;\\n            }\\n            // increment the floor to the next probability index\\n            floor = _loot[i].probabilityIndex;\\n        }\\n        return (winnerIndex, winnerRoll);\\n    }\\n\\n    function recalculateProbabilities(address lootboxData, uint256 _lootboxHash)\\n        public\\n        returns (ILootbox.Loot[] memory _allLootOut)\\n    {\\n        uint256 floor = 0;\\n        // iterate through the loot items\\n        ILootbox.Loot[] memory _allLoot = ILootboxData(lootboxData).allLoot(\\n            _lootboxHash\\n        );\\n        for (uint256 i = 0; i < _allLoot.length; i++) {\\n            // set the probability index to the floor\\n            _allLoot[i].probabilityIndex = floor + _allLoot[i].probability;\\n            floor += _allLoot[i].probability;\\n            ILootboxData(lootboxData).setLoot(_lootboxHash, i, _allLoot[i]);\\n        }\\n        _allLootOut = _allLoot;\\n    }\\n}\\n\",\"keccak256\":\"0xe7596cc7a23921f42369d8933136503fc0d964281f20b2ac729dfc53aa4cbcf8\",\"license\":\"MIT\"},\"src/lootbox/TokenSeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/ITokenSeller.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/ILootboxData.sol\\\";\\nimport \\\"../access/Controllable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract TokenSeller is ITokenSeller, Controllable, Initializable {\\n    ILootboxData internal _tokenSellerData;\\n    ITokenSeller.TokenSellerInfo internal _tokenSeller;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /// @dev contract must be initilized for modified method to be called\\n    modifier initialized() virtual {\\n        require(\\n            _tokenSeller.multitoken != address(0) &&\\n                _tokenSeller.initialized == true,\\n            \\\"Token seller is not initialized\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Sets the lootbox data. The lootbox contract can either initialise a new\\n    // lootbox struct or it can load and update an existing lootbox struct.\\n    function initialize(\\n        address tokenSellerData,\\n        ITokenSeller.TokenSellerInfo memory tokenSellerInit\\n    ) external override initializer {\\n        require(\\n            IControllable(tokenSellerData).isController(address(this)) == true,\\n            \\\"Token seller data must be controlled by this token seller\\\"\\n        );\\n        _tokenSellerData = ILootboxData(tokenSellerData);\\n        if (tokenSellerInit.contractAddress == address(0)) {\\n            require(\\n                tokenSellerInit.multitoken != address(0),\\n                \\\"Multitoken address must be set\\\"\\n            );\\n            require(tokenSellerInit.tokenHash != 0, \\\"token hash must be set\\\");\\n            require(tokenSellerInit.buyPrice != 0, \\\"Price must be set\\\");\\n            _tokenSeller = tokenSellerInit;\\n            _tokenSeller.contractAddress = address(this);\\n            _tokenSeller.initialized = true;\\n            _tokenSellerData.addTokenSeller(address(this), _tokenSeller);\\n            emit TokenSellerCreated(msg.sender, _tokenSeller);\\n        } else {\\n            // load the lootbox struct\\n            _tokenSeller = _tokenSellerData.getTokenSeller(address(this));\\n            _tokenSeller.contractAddress = address(this);\\n            _tokenSellerData.setTokenSeller(address(this), _tokenSeller);\\n            require(\\n                _tokenSeller.owner == msg.sender,\\n                \\\"Lootbox must be owned by the caller to uppgrade contract\\\"\\n            );\\n            emit TokenSellerMigrated(\\n                msg.sender,\\n                address(this),\\n                _tokenSeller.contractAddress,\\n                address(this),\\n                _tokenSeller\\n            );\\n        }\\n    }\\n\\n    function isInitialized() external view override returns (bool) {\\n        return _tokenSeller.initialized;\\n    }\\n\\n    function getInfo() external view override returns (TokenSellerInfo memory) {\\n        return _tokenSeller;\\n    }\\n\\n    function setInfo(TokenSellerInfo memory _info)\\n        external\\n        override\\n        onlyController\\n    {\\n        _tokenSeller.buyPrice = _info.buyPrice;\\n        _tokenSeller.buyPriceIncreaseRateType = _info.buyPriceIncreaseRateType;\\n        _tokenSeller.buyPriceIncreaseRate = _info.buyPriceIncreaseRate;\\n        _tokenSeller.maxQuantity = _info.maxQuantity;\\n        _tokenSeller.maxBuyAmount = _info.maxBuyAmount;\\n        _tokenSeller.maxTotalBuyAmount = _info.maxTotalBuyAmount;\\n        _tokenSeller.saleStartTime = _info.saleStartTime;\\n        _tokenSeller.saleEndTime = _info.saleEndTime;\\n        _tokenSeller.open = _info.open;\\n        _tokenSeller.maxTotalBuyAmount = _info.maxTotalBuyAmount;\\n        _tokenSellerData.setTokenSeller(address(this), _tokenSeller);\\n    }\\n\\n    function _request(\\n        address _recipient,\\n        uint256 _token,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        // mint the target token directly into the user's account\\n        INFTGemMultiToken(_tokenSeller.multitoken).mint(\\n            _recipient,\\n            _token,\\n            _amount\\n        );\\n        // set the token data - it's not a claim or gem and it was minted here\\n        INFTGemMultiToken(_tokenSeller.multitoken).setTokenData(\\n            _token,\\n            INFTGemMultiToken.TokenType.GOVERNANCE,\\n            address(this)\\n        );\\n        return _amount;\\n    }\\n\\n    /// @dev Buy tokens from the token seller.\\n    /// @param _amount The amount of erc1155 tokens to buy.\\n    /// @return The amount of erc1155 tokens that were bought.\\n    function buy(uint256 _amount) external payable override returns (uint256) {\\n        require(_tokenSeller.open == true, \\\"The token seller is closed\\\");\\n        require(\\n            _tokenSeller.totalPurchased < _tokenSeller.maxQuantity,\\n            \\\"The maximum amount of tokens has been bought.\\\"\\n        );\\n        require(\\n            msg.value >= _tokenSeller.buyPrice * _amount,\\n            \\\"Insufficient base currency\\\"\\n        );\\n        require(\\n            _amount <= _tokenSeller.maxBuyAmount,\\n            \\\"Amount exceeds maximum buy amount\\\"\\n        );\\n        require(\\n            _amount <=\\n                _tokenSeller.maxTotalBuyAmount -\\n                    IERC1155(_tokenSeller.multitoken).balanceOf(\\n                        msg.sender,\\n                        _tokenSeller.tokenHash\\n                    ),\\n            \\\"Amount exceeds maximum buy total\\\"\\n        );\\n        require(\\n            block.timestamp >= _tokenSeller.saleStartTime ||\\n                _tokenSeller.saleStartTime == 0,\\n            \\\"The sale has not started yet\\\"\\n        );\\n        require(\\n            block.timestamp <= _tokenSeller.saleEndTime ||\\n                _tokenSeller.saleEndTime == 0,\\n            \\\"The sale has ended\\\"\\n        );\\n        // request (mint) the tokens\\n        _request(msg.sender, _tokenSeller.tokenHash, _amount);\\n        // increase total bought\\n        _tokenSeller.totalPurchased += _amount;\\n        // emit a message about the purchase\\n        emit Sold(\\n            address(this),\\n            msg.sender,\\n            _tokenSeller.tokenHash,\\n            _tokenSeller.buyPrice,\\n            _amount\\n        );\\n        // increase the purchase price if it's not fixed\\n        _tokenSeller.buyPrice = _tokenSellerData.increaseBuyPrice(address(this));\\n        _tokenSellerData.setTokenSeller(address(this), _tokenSeller);\\n        // return the amount of tokens that were bought\\n        return _amount;\\n    }\\n\\n    /// @dev Request tokens from the token provider.\\n    /// @param _recipient The address of the token receiver.\\n    /// @param _amount The amount of erc1155 tokens to buy.\\n    /// @return The amount of erc1155 tokens that were requested.\\n    function request(address _recipient, uint256 _amount)\\n        external\\n        override\\n        onlyController\\n        returns (uint256)\\n    {\\n        require(\\n            _tokenSeller.totalPurchased < _tokenSeller.maxQuantity,\\n            \\\"The maximum amount of tokens has been bought.\\\"\\n        );\\n        return _request(_recipient, _tokenSeller.tokenHash, _amount);\\n    }\\n\\n    function migrate_TokenSeller(address migrateTo, bool bDestroy) external initialized onlyController {\\n        IControllable(address(_tokenSellerData)).addController(migrateTo);\\n        ITokenSeller(migrateTo).initialize(\\n            address(_tokenSellerData),\\n            _tokenSeller\\n        );\\n         if(bDestroy == true) {\\n             selfdestruct(payable(migrateTo));\\n         }\\n    }\\n\\n    function receivePayout(address payable _recipient) external override {\\n        require(\\n            this.isController(msg.sender) || msg.sender == _tokenSeller.owner,\\n            \\\"Only the token seller can receive payouts\\\"\\n        );\\n        uint256 balance = payable(address(this)).balance;\\n        if (balance == 0) {\\n            return;\\n        }\\n        address feeManager = _tokenSellerData.getFeeManager();\\n        require(\\n            feeManager != address(this),\\n            \\\"The token seller has no fee manager\\\"\\n        );\\n        uint256 fee = INFTGemFeeManager(feeManager).fee(\\n            uint256(keccak256(abi.encodePacked(\\\"lootbox\\\")))\\n        );\\n        _recipient = _recipient != address(0)\\n            ? _recipient\\n            : payable(msg.sender);\\n        fee = fee != 0 ? fee : 333;\\n        uint256 feeAmount = balance / fee;\\n        uint256 userPortion = balance - feeAmount;\\n        require(payable(_recipient).send(userPortion), \\\"Failed to send\\\");\\n        require(\\n            payable(feeManager).send(feeAmount),\\n            \\\"Failed to send to fee manager\\\"\\n        );\\n        emit FundsCollected(_recipient, userPortion);\\n    }\\n}\\n\",\"keccak256\":\"0x63d972d4ae1a13464856cf319d7cef477f9179e406fa3971ad08fda8b0d46be4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610043565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b615e2d806100526000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80635d61017711610081578063c4d66de81161005b578063c4d66de814610184578063ce5494bb14610197578063e1c28bef146101aa576100c9565b80635d61017714610147578063a7fc7a071461015c578063b429afeb14610171576100c9565b8063392e53cd116100b2578063392e53cd1461010a578063516d16b91461011f5780635213b7ff14610134576100c9565b806301768052146100ce5780632717473f146100f7575b600080fd5b6100e16100dc36600461123a565b6101b2565b6040516100ee91906117e9565b60405180910390f35b6100e1610105366004610fb8565b610299565b6101126105a7565b6040516100ee91906115b6565b6101276105be565b6040516100ee91906117fc565b6100e161014236600461123a565b61067a565b61014f6106fe565b6040516100ee9190611538565b61016f61016a366004610f95565b6107b9565b005b61011261017f366004610f95565b61081b565b61016f610192366004610f95565b610839565b61016f6101a5366004610f95565b61099c565b61016f610afc565b6101ba610bcd565b6001546201000090046001600160a01b03166101f15760405162461bcd60e51b81526004016101e8906116c1565b60405180910390fd5b6001546040517f01768052000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063017680529061023f9085906004016117fc565b60006040518083038186803b15801561025757600080fd5b505afa15801561026b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102939190810190611207565b92915050565b6102a1610bcd565b6001546201000090046001600160a01b03166102cf5760405162461bcd60e51b81526004016101e8906116c1565b60008360a001516040516020016102e691906113ff565b60408051601f198184030181529082905280516020909101206001547f0f09b13e000000000000000000000000000000000000000000000000000000008352909250600091620100009091046001600160a01b031690630f09b13e906103509085906004016117fc565b60006040518083038186803b15801561036857600080fd5b505afa15801561037c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103a49190810190611207565b602001516001600160a01b0316146103ce5760405162461bcd60e51b81526004016101e8906115f6565b6000604051806020016103e090610c6f565b601f1982820381018352601f90910116604052859350905061040460008383610b53565b6001600160a01b03166020840181905260405163a7fc7a0760e01b815263a7fc7a079061043590899060040161141b565b600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b5050600154602086015160405163a7fc7a0760e01b8152620100009092046001600160a01b0316935063a7fc7a07925061049f9160040161141b565b600060405180830381600087803b1580156104b957600080fd5b505af11580156104cd573d6000803e3d6000fd5b50505060208401516001546040517f38202eaa0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831693506338202eaa9261052992620100009004169088908a9060040161142f565b600060405180830381600087803b15801561054357600080fd5b505af1158015610557573d6000803e3d6000fd5b505050507f90b30800c29ef63b2bc508488beda55ca3b546c77026e3a9b9d381d1f3741d90856080015186602001518760405161059693929190611805565b60405180910390a150509392505050565b6001546201000090046001600160a01b0316151590565b6001546000906201000090046001600160a01b03166105ef5760405162461bcd60e51b81526004016101e8906116c1565b600160029054906101000a90046001600160a01b03166001600160a01b031663516d16b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190611252565b905090565b610682610bcd565b6001546201000090046001600160a01b03166106b05760405162461bcd60e51b81526004016101e8906116c1565b6001546040517f0f09b13e000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630f09b13e9061023f9085906004016117fc565b6001546060906201000090046001600160a01b031661072f5760405162461bcd60e51b81526004016101e8906116c1565b600160029054906101000a90046001600160a01b03166001600160a01b0316635d6101776040518163ffffffff1660e01b815260040160006040518083038186803b15801561077d57600080fd5b505afa158015610791573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610675919081019061114c565b3360009081526020819052604090205460ff161515600114806107db57503033145b6107f75760405162461bcd60e51b81526004016101e8906116f8565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b600154610100900460ff1680610852575060015460ff16155b61086e5760405162461bcd60e51b81526004016101e89061162d565b600154610100900460ff16158015610898576001805460ff1961ff00199091166101001716811790555b6040517fb429afeb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063b429afeb906108dd90309060040161141b565b60206040518083038186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d91906111eb565b151560011461094e5760405162461bcd60e51b81526004016101e890611755565b600180547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038516021790558015610998576001805461ff00191690555b5050565b6001546201000090046001600160a01b03166109ca5760405162461bcd60e51b81526004016101e8906116c1565b3360009081526020819052604090205460ff161515600114806109ec57503033145b610a085760405162461bcd60e51b81526004016101e8906116f8565b60015460405163a7fc7a0760e01b8152620100009091046001600160a01b03169063a7fc7a0790610a3d90849060040161141b565b600060405180830381600087803b158015610a5757600080fd5b505af1158015610a6b573d6000803e3d6000fd5b50506001546040517fc4d66de80000000000000000000000000000000000000000000000000000000081526001600160a01b03808616945063c4d66de89350610abe92620100009004169060040161141b565b600060405180830381600087803b158015610ad857600080fd5b505af1158015610aec573d6000803e3d6000fd5b50505050806001600160a01b0316ff5b3360009081526020819052604090205460ff16151560011480610b1e57503033145b610b3a5760405162461bcd60e51b81526004016101e8906116f8565b336000908152602081905260409020805460ff19169055565b60008084471015610b765760405162461bcd60e51b81526004016101e8906117b2565b8251610b945760405162461bcd60e51b81526004016101e8906115c1565b8383516020850187f590506001600160a01b038116610bc55760405162461bcd60e51b81526004016101e89061168a565b949350505050565b604051806101e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081526020016060815260200160608152602001600060ff168152602001600060ff168152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6144db8061191d83390190565b8035610c87816118e7565b919050565b8051610c87816118e7565b8035610c87816118ff565b8051610c87816118ff565b803560048110610c8757600080fd5b600082601f830112610ccc578081fd5b8135610cdf610cda82611860565b611836565b818152846020838601011115610cf3578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112610d1d578081fd5b8151610d2b610cda82611860565b818152846020838601011115610d3f578283fd5b610bc5826020830160208701611888565b60006101e0808385031215610d63578182fd5b610d6c81611836565b915050610d7882610c8c565b8152610d8660208301610c8c565b6020820152610d9760408301610c8c565b6040820152610da860608301610c8c565b60608201526080820151608082015260a082015167ffffffffffffffff80821115610dd257600080fd5b610dde85838601610d0d565b60a084015260c0840151915080821115610df757600080fd5b610e0385838601610d0d565b60c084015260e0840151915080821115610e1c57600080fd5b50610e2984828501610d0d565b60e083015250610100610e3d818401610f8a565b90820152610120610e4f838201610f8a565b908201526101408281015190820152610160808301519082015261018080830151908201526101a080830151908201526101c0610e8d818401610ca2565b9082015292915050565b60006101e0808385031215610eaa578182fd5b610eb381611836565b915050610ebf82610c7c565b8152610ecd60208301610c7c565b6020820152610ede60408301610c7c565b60408201526060820135606082015260808201356080820152610f0360a08301610cad565b60a082015260c0828101359082015260e080830135908201526101008083013590820152610120808301359082015261014080830135908201526101608083013590820152610180610f56818401610c97565b908201526101a0610f68838201610c97565b81830152506101c080830135818301525092915050565b8035610c878161190d565b8051610c878161190d565b600060208284031215610fa6578081fd5b8135610fb1816118e7565b9392505050565b60008060006102208486031215610fcd578182fd5b8335610fd8816118e7565b9250602084013567ffffffffffffffff80821115610ff4578384fd5b81860191506101e080838903121561100a578485fd5b61101381611836565b905061101e83610c7c565b815261102c60208401610c7c565b602082015261103d60408401610c7c565b604082015261104e60608401610c7c565b60608201526080830135608082015260a08301358281111561106e578586fd5b61107a89828601610cbc565b60a08301525060c083013582811115611091578586fd5b61109d89828601610cbc565b60c08301525060e0830135828111156110b4578586fd5b6110c089828601610cbc565b60e08301525061010091506110d6828401610f7f565b8282015261012091506110ea828401610f7f565b918101919091526101408281013590820152610160808301359082015261018080830135908201526101a080830135908201526101c09061112c828401610c97565b828201528094505050506111438560408601610e97565b90509250925092565b6000602080838503121561115e578182fd5b825167ffffffffffffffff80821115611175578384fd5b818501915085601f830112611188578384fd5b81518181111561119a5761119a6118b8565b6111a78485830201611836565b8181528481019250838501865b838110156111dd576111cb8a888451890101610d50565b855293860193908601906001016111b4565b509098975050505050505050565b6000602082840312156111fc578081fd5b8151610fb1816118ff565b600060208284031215611218578081fd5b815167ffffffffffffffff81111561122e578182fd5b610bc584828501610d50565b60006020828403121561124b578081fd5b5035919050565b600060208284031215611263578081fd5b5051919050565b6001600160a01b03169052565b15159052565b600481106112b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600081518084526112d0816020860160208601611888565b601f01601f19169290920160200192915050565b60006101e06112f484845161126a565b6020830151611306602086018261126a565b506040830151611319604086018261126a565b50606083015161132c606086018261126a565b506080830151608085015260a08301518160a086015261134e828601826112b8565b91505060c083015184820360c086015261136882826112b8565b91505060e083015184820360e086015261138282826112b8565b91505061010080840151611398828701826113f8565b5050610120808401516113ad828701826113f8565b50506101408381015190850152610160808401519085015261018080840151908501526101a080840151908501526101c0808401516113ee82870182611277565b5090949350505050565b60ff169052565b60008251611411818460208701611888565b9190910192915050565b6001600160a01b0391909116815260200190565b60006102206001600160a01b038616835261144e60208401865161126a565b6020850151611460604085018261126a565b506040850151611473606085018261126a565b5060608501516080840152608085015160a084015260a085015161149a60c085018261127d565b5060c085015160e08481019190915285015161010080850191909152850151610120808501919091528501516101408085019190915285015161016080850191909152850151610180808501919091528501516101a06114fc81860183611277565b86015190506101c061151085820183611277565b8601516101e085015250610200830181905261152e818401856112e4565b9695505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156115a9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526115978583516112e4565b9450928501929085019060010161155d565b5092979650505050505050565b901515815260200190565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b6020808252600e908201527f4c6f6f74626f7820455849535453000000000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601a908201527f4c6f6f74626f78206973206e6f7420696e697469616c697a6564000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b60208082526037908201527f4c6f6f74626f782064617461206d75737420626520636f6e74726f6c6c65642060408201527f62792074686973206c6f6f74626f7820666163746f7279000000000000000000606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b600060208252610fb160208301846112e4565b90815260200190565b60008482526001600160a01b03841660208301526060604083015261182d60608301846112e4565b95945050505050565b60405181810167ffffffffffffffff81118282101715611858576118586118b8565b604052919050565b600067ffffffffffffffff82111561187a5761187a6118b8565b50601f01601f191660200190565b60005b838110156118a357818101518382015260200161188b565b838111156118b2576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b03811681146118fc57600080fd5b50565b80151581146118fc57600080fd5b60ff811681146118fc57600080fdfe60806040523480156200001157600080fd5b506200001d336200002e565b62000028336200002e565b62000052565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b61447980620000626000396000f3fe60806040526004361061015f5760003560e01c80636db11070116100c0578063c8c01a5511610074578063e1c28bef11610059578063e1c28bef14610397578063e6f53d91146103ac578063e9606f2a146103cc5761015f565b8063c8c01a5514610364578063d96a094a146103845761015f565b8063a7fc7a07116100a5578063a7fc7a071461030f578063b2cd3b9a1461032f578063b429afeb146103445761015f565b80636db11070146102c257806380d91574146102e25761015f565b8063392e53cd11610117578063425ce651116100fc578063425ce651146102605780635a9b0b89146102805780636a520d3c146102a25761015f565b8063392e53cd1461021c5780633cda54e51461023e5761015f565b8063164e68de11610148578063164e68de146101bc5780631da5582a146101dc57806338202eaa146101fc5761015f565b80630ab6d2e31461016457806315bcde2e1461019a575b600080fd5b34801561017057600080fd5b5061018461017f3660046131eb565b6103ec565b6040516101919190614112565b60405180910390f35b3480156101a657600080fd5b506101ba6101b5366004612b92565b6105ae565b005b3480156101c857600080fd5b506101ba6101d7366004612b92565b6108f2565b3480156101e857600080fd5b506101ba6101f7366004613183565b6109bd565b34801561020857600080fd5b506101ba610217366004612c38565b610af1565b34801561022857600080fd5b50610231610eb3565b6040516101919190613ae8565b34801561024a57600080fd5b50610253610ebc565b6040516101919190613a6a565b34801561026c57600080fd5b5061018461027b3660046131bb565b61102a565b34801561028c57600080fd5b5061029561110e565b60405161019191906141e9565b3480156102ae57600080fd5b506101ba6102bd366004612c02565b611217565b3480156102ce57600080fd5b506101ba6102dd3660046131bb565b6118f0565b3480156102ee57600080fd5b506103026102fd36600461305c565b611a30565b6040516101919190614207565b34801561031b57600080fd5b506101ba61032a366004612b92565b611cef565b34801561033b57600080fd5b50610253611d51565b34801561035057600080fd5b5061023161035f366004612b92565b611e12565b34801561037057600080fd5b5061030261037f366004612dcd565b611e30565b6103026103923660046131bb565b611ea8565b3480156103a357600080fd5b506101ba6121e9565b3480156103b857600080fd5b506101ba6103c7366004612bca565b612240565b3480156103d857600080fd5b506101ba6103e7366004612b92565b6123cd565b6103f4612682565b6015541580159061040c5750601e5460ff1615156001145b6104315760405162461bcd60e51b815260040161042890613dc6565b60405180910390fd5b3360009081526020819052604090205460ff1615156001148061045357503033145b61046f5760405162461bcd60e51b815260040161042890613ec8565b601054601554604051639b73a6fb60e01b81526000926001600160a01b031691639b73a6fb916104a29190600401614207565b60006040518083038186803b1580156104ba57600080fd5b505afa1580156104ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f69190810190612df8565b6040517fa1ed5e8f00000000000000000000000000000000000000000000000000000000815290915073211f558db66012ac014d5b252823Fc862588EA7F9063a1ed5e8f9061055090601190859089908990600401614166565b60006040518083038186803b15801561056857600080fd5b505af415801561057c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a49190810190613150565b9150505b92915050565b6040517fb429afeb000000000000000000000000000000000000000000000000000000008152309063b429afeb906105ea9033906004016137f2565b60206040518083038186803b15801561060257600080fd5b505afa158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190612e97565b8061064f57506004546001600160a01b031633145b61066b5760405162461bcd60e51b815260040161042890613d69565b30318061067857506108ef565b6000600160029054906101000a90046001600160a01b03166001600160a01b031663f2d638266040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c857600080fd5b505afa1580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190612bae565b90506001600160a01b03811630141561072b5760405162461bcd60e51b815260040161042890613af3565b6000816001600160a01b03166339b37ab060405160200161074b906137c9565b60408051601f198184030181529082905280516020909101207fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16825261079991600401614207565b60206040518083038186803b1580156107b157600080fd5b505afa1580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e991906131d3565b90506001600160a01b0384166107ff5733610801565b835b9350806108105761014d610812565b805b9050600061082082856142d5565b9050600061082e8286614332565b6040519091506001600160a01b0387169082156108fc029083906000818181858888f193505050506108725760405162461bcd60e51b815260040161042890614001565b6040516001600160a01b0385169083156108fc029084906000818181858888f193505050506108b35760405162461bcd60e51b815260040161042890613bad565b60405181906001600160a01b038816907f067e335270006737485da9eba56ed0753a5339fffc5dc1b53ea849447c98db5490600090a350505050505b50565b6015541580159061090a5750601e5460ff1615156001145b6109265760405162461bcd60e51b815260040161042890613dc6565b3360009081526020819052604090205460ff1615156001148061094857503033145b6109645760405162461bcd60e51b815260040161042890613ec8565b600047116109845760405162461bcd60e51b815260040161042890613be4565b6040516001600160a01b038216904780156108fc02916000818181858888f193505050501580156109b9573d6000803e3d6000fd5b5050565b3360009081526020819052604090205460ff161515600114806109df57503033145b6109fb5760405162461bcd60e51b815260040161042890613ec8565b608081015160065560a08101516007805460ff19166001836003811115610a3257634e487b7160e01b600052602160045260246000fd5b021790555060c081015160085560e081015160095561010080820151600a55610120820151600b55610140820151600c55610160820151600d556101a0820151600e805461ff00191691151590920217905560015460405163d8ba590360e01b8152620100009091046001600160a01b03169063d8ba590390610abc9030906002906004016139d7565b600060405180830381600087803b158015610ad657600080fd5b505af1158015610aea573d6000803e3d6000fd5b5050505050565b600154610100900460ff1680610b0a575060015460ff16155b610b265760405162461bcd60e51b815260040161042890613cd5565b600154610100900460ff16158015610b50576001805460ff1961ff00199091166101001716811790555b6010805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790556040517f8bf455a200000000000000000000000000000000000000000000000000000000815260009073211f558db66012ac014d5b252823Fc862588EA7F90638bf455a290610bd1903090899089908990600401613806565b60006040518083038186803b158015610be957600080fd5b505af4158015610bfd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c259190810190612eb3565b81516011805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0393841617825560208086015160128054841691861691909117905560408601516013805484169186169190911790556060860151601480549093169416939093179055608084015160155560a08401518051939a508a9360109360009387939092610cbb9260169201906126e7565b5060c08201518051610cd79160068401916020909101906126e7565b5060e08201518051610cf39160078401916020909101906126e7565b506101008281015160088301805461012086015160ff1991821660ff9485161761ff001916931684029290921790556101408401516009840155610160840151600a840155610180840151600b8401556101a0840151600c8401556101c090930151600d909201805490931691151591909117909155825491900a6001600160a01b0381810219909216969091160294909417909355506040517f6a520d3c000000000000000000000000000000000000000000000000000000008152909250309150636a520d3c90610dcc90889088906004016139b9565b600060405180830381600087803b158015610de657600080fd5b505af1158015610dfa573d6000803e3d6000fd5b505050508015610e4a5760155460405130919033907f4f7d855e72a3885928bf8036944d5c654e82db54f489ecfcf483ce13472691bf90610e3d90601190614125565b60405180910390a4610e9a565b6012546015546040516001600160a01b039092169133907ff83d242ea8444e4b6c1668a68eb2f5c32fa83f01faf00dc22ab0db6309f8cc0790610e91903090601190613997565b60405180910390a45b508015610ead576001805461ff00191690555b50505050565b600e5460ff1690565b60155460609015801590610ed75750601e5460ff1615156001145b610ef35760405162461bcd60e51b815260040161042890613dc6565b601054601554604051639b73a6fb60e01b81526000926001600160a01b031691639b73a6fb91610f269190600401614207565b60006040518083038186803b158015610f3e57600080fd5b505afa158015610f52573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f7a9190810190612df8565b6040517f69dac38100000000000000000000000000000000000000000000000000000000815290915073211f558db66012ac014d5b252823Fc862588EA7F906369dac38190610fd0906011908590600401614138565b60006040518083038186803b158015610fe857600080fd5b505af4158015610ffc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110249190810190612df8565b91505090565b611032612682565b6015541580159061104a5750601e5460ff1615156001145b6110665760405162461bcd60e51b815260040161042890613dc6565b6010546015546040517f53b8a8640000000000000000000000000000000000000000000000000000000081526001600160a01b03909216916353b8a864916110b291869060040161425d565b60006040518083038186803b1580156110ca57600080fd5b505afa1580156110de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111069190810190613150565b90505b919050565b61111661276b565b604080516101e081018252600280546001600160a01b039081168352600380548216602085015260045490911693830193909352600554606083015260065460808301526007549192909160a084019160ff9091169081111561118957634e487b7160e01b600052602160045260246000fd5b60038111156111a857634e487b7160e01b600052602160045260246000fd5b815260068201546020820152600782015460408201526008820154606082015260098201546080820152600a82015460a0820152600b82015460c0820152600c82015460ff808216151560e08401526101009182900416151590820152600d9091015461012090910152905090565b600154610100900460ff1680611230575060015460ff16155b61124c5760405162461bcd60e51b815260040161042890613cd5565b600154610100900460ff16158015611276576001805460ff1961ff00199091166101001716811790555b6040517fb429afeb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063b429afeb906112bb9030906004016137f2565b60206040518083038186803b1580156112d357600080fd5b505afa1580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130b9190612e97565b151560011461132c5760405162461bcd60e51b815260040161042890613e34565b600180546001600160a01b0380861662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179091556020830151166116135781516001600160a01b031661139c5760405162461bcd60e51b815260040161042890613f5c565b60608201516113bd5760405162461bcd60e51b815260040161042890613e91565b60808201516113de5760405162461bcd60e51b8152600401610428906140db565b81516002805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03938416178255602085015160038054831691851691909117815560408601516004805490931694169390931790556060840151600555608084015160065560a084015160078054869460ff1990911690600190849081111561147757634e487b7160e01b600052602160045260246000fd5b021790555060c0820151600682015560e082015160078201556101008083015160088301556101208301516009830155610140830151600a830155610160830151600b830155610180830151600c830180546101a0860151151590930261ff001992151560ff1994851617929092169190911790556101c090920151600d909101556003805473ffffffffffffffffffffffffffffffffffffffff191630908117909155600e8054909216600190811790925590546040517febb4465f000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169163ebb4465f9161157991906002906004016139d7565b602060405180830381600087803b15801561159357600080fd5b505af11580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb91906131d3565b50336001600160a01b03167fb34b6918488a3dc8597953574e109dd1f7843322440d2d43307ee9b7b49e9c75600260405161160691906141f8565b60405180910390a26118d9565b6001546040517f22f7a450000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b0316906322f7a450906116619030906004016137f2565b6101e06040518083038186803b15801561167a57600080fd5b505afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b2919061319f565b80516002805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03938416178255602084015160038054831691851691909117815560408501516004805490931694169390931790556060830151600555608083015160065560a08301516007805492939192909160ff1990911690600190849081111561174f57634e487b7160e01b600052602160045260246000fd5b021790555060c0820151600682015560e082015160078201556101008083015160088301556101208301516009830155610140830151600a830155610160830151600b830155610180830151600c830180546101a086015160ff199091169215159290921761ff0019169115159092021790556101c090910151600d90910155600380543073ffffffffffffffffffffffffffffffffffffffff19909116811790915560015460405163d8ba590360e01b81526001600160a01b0362010000909204919091169163d8ba59039161182c91906002906004016139d7565b600060405180830381600087803b15801561184657600080fd5b505af115801561185a573d6000803e3d6000fd5b50506004546001600160a01b03163314915061188a90505760405162461bcd60e51b815260040161042890613b50565b6003546040516001600160a01b0390911690309033907f5307b520f0b9cda8bf7f047d40f86c633f5678059d27db85e08b8cab8354a24a906118d09084906002906139d7565b60405180910390a45b80156118eb576001805461ff00191690555b505050565b601554158015906119085750601e5460ff1615156001145b6119245760405162461bcd60e51b815260040161042890613dc6565b3360009081526020819052604090205460ff1615156001148061194657503033145b6119625760405162461bcd60e51b815260040161042890613ec8565b6014546015546040517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163156e29f6916119b1913391908690600401613a49565b600060405180830381600087803b1580156119cb57600080fd5b505af11580156119df573d6000803e3d6000fd5b50505050601160040154336001600160a01b03167f7996e12debea99bc6745e26335facf416518f1345f2f66208e32846961bc8c05601184604051611a259291906141c7565b60405180910390a350565b60155460009015801590611a4b5750601e5460ff1615156001145b611a675760405162461bcd60e51b815260040161042890613dc6565b3360009081526020819052604090205460ff16151560011480611a8957503033145b611aa55760405162461bcd60e51b815260040161042890613ec8565b600082606001515111611aca5760405162461bcd60e51b815260040161042890613d32565b600082608001515111611aef5760405162461bcd60e51b815260040161042890613fca565b60008260a0015111611b135760405162461bcd60e51b81526004016104289061406f565b6011546001600160a01b03908116602084015260145416604083015260a0820151601d54611b4191906142bd565b60c083015260a0820151601d8054600090611b5d9084906142bd565b90915550506010546040517f29962c5e0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906329962c5e90611bac90601190600401614125565b600060405180830381600087803b158015611bc657600080fd5b505af1158015611bda573d6000803e3d6000fd5b505050506060820151604051611bf591601691602001613749565b60408051601f1981840301815291815281516020909201919091208352601554905133907f456cf278453e114332479d8a39b8ba72dbeca513c9da114554eda244ea7c07d690611c499060119087906141a2565b60405180910390a36010546015546040517f9a929e320000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691639a929e3291611c9d918690600401614244565b602060405180830381600087803b158015611cb757600080fd5b505af1158015611ccb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110691906131d3565b3360009081526020819052604090205460ff16151560011480611d1157503033145b611d2d5760405162461bcd60e51b815260040161042890613ec8565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b60155460609015801590611d6c5750601e5460ff1615156001145b611d885760405162461bcd60e51b815260040161042890613dc6565b601054601554604051639b73a6fb60e01b81526001600160a01b0390921691639b73a6fb91611db991600401614207565b60006040518083038186803b158015611dd157600080fd5b505afa158015611de5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e0d9190810190612df8565b905090565b6001600160a01b031660009081526020819052604090205460ff1690565b3360009081526020819052604081205460ff16151560011480611e5257503033145b611e6e5760405162461bcd60e51b815260040161042890613ec8565b600954600f5410611e915760405162461bcd60e51b815260040161042890613c1b565b611ea1836002600301548461257a565b9392505050565b600e5460009060ff610100909104161515600114611ed85760405162461bcd60e51b815260040161042890613f93565b600954600f5410611efb5760405162461bcd60e51b815260040161042890613c1b565b600654611f099083906142f5565b341015611f285760405162461bcd60e51b815260040161042890613dfd565b600a54821115611f4a5760405162461bcd60e51b815260040161042890613c78565b6002546005546040517efdd58e0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169162fdd58e91611f9591339190600401613a30565b60206040518083038186803b158015611fad57600080fd5b505afa158015611fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe591906131d3565b600b54611ff29190614332565b8211156120115760405162461bcd60e51b8152600401610428906140a6565b600c54421015806120225750600c54155b61203e5760405162461bcd60e51b815260040161042890613f25565b600d544211158061204f5750600d54155b61206b5760405162461bcd60e51b815260040161042890614038565b61207b336002600301548461257a565b50816002600d01600082825461209191906142bd565b9091555050600554600654604051339130917f9be8a5ca22b7e6e81f04b5879f0248227bb770114291bd47dfaee4c3a82ad60e916120d091889061425d565b60405180910390a46001546040517f05308ff0000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b0316906305308ff0906121269030906004016137f2565b60206040518083038186803b15801561213e57600080fd5b505afa158015612152573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217691906131d3565b60065560015460405163d8ba590360e01b8152620100009091046001600160a01b03169063d8ba5903906121b19030906002906004016139d7565b600060405180830381600087803b1580156121cb57600080fd5b505af11580156121df573d6000803e3d6000fd5b5093949350505050565b3360009081526020819052604090205460ff1615156001148061220b57503033145b6122275760405162461bcd60e51b815260040161042890613ec8565b336000908152602081905260409020805460ff19169055565b601554158015906122585750601e5460ff1615156001145b6122745760405162461bcd60e51b815260040161042890613dc6565b3360009081526020819052604090205460ff1615156001148061229657503033145b6122b25760405162461bcd60e51b815260040161042890613ec8565b6001546040517fa7fc7a07000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063a7fc7a07906123009085906004016137f2565b600060405180830381600087803b15801561231a57600080fd5b505af115801561232e573d6000803e3d6000fd5b50506001546040517f6a520d3c0000000000000000000000000000000000000000000000000000000081526001600160a01b038087169450636a520d3c93506123849262010000900416906002906004016139d7565b600060405180830381600087803b15801561239e57600080fd5b505af11580156123b2573d6000803e3d6000fd5b50505050801515600114156109b957816001600160a01b0316ff5b601554158015906123e55750601e5460ff1615156001145b6124015760405162461bcd60e51b815260040161042890613dc6565b3360009081526020819052604090205460ff1615156001148061242357503033145b61243f5760405162461bcd60e51b815260040161042890613ec8565b6040517fe6f53d91000000000000000000000000000000000000000000000000000000008152309063e6f53d919061247e90849060009060040161397c565b600060405180830381600087803b15801561249857600080fd5b505af11580156124ac573d6000803e3d6000fd5b50506010546040517fa7fc7a070000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063a7fc7a0791506124f99084906004016137f2565b600060405180830381600087803b15801561251357600080fd5b505af1158015612527573d6000803e3d6000fd5b50506010546040517f38202eaa0000000000000000000000000000000000000000000000000000000081526001600160a01b0380861694506338202eaa9350610abc9216906002906011906004016139f5565b6002546040517f156e29f60000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063156e29f6906125c890879087908790600401613a49565b600060405180830381600087803b1580156125e257600080fd5b505af11580156125f6573d6000803e3d6000fd5b50506002546040517f7c8810760000000000000000000000000000000000000000000000000000000081526001600160a01b039091169250637c88107691506126489086906000903090600401614210565b600060405180830381600087803b15801561266257600080fd5b505af1158015612676573d6000803e3d6000fd5b50939695505050505050565b6040518061014001604052806000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b8280546126f390614387565b90600052602060002090601f016020900481019282612715576000855561275b565b82601f1061272e57805160ff191683800117855561275b565b8280016001018555821561275b579182015b8281111561275b578251825591602001919060010190612740565b506127679291506127e5565b5090565b604080516101e08101825260008082526020820181905291810182905260608101829052608081018290529060a08201908152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600081525090565b5b8082111561276757600081556001016127e6565b803561110981614404565b805161110981614404565b803561110981614419565b805161110981614419565b803561110981614427565b805161110981614427565b600082601f83011261284c578081fd5b813561285f61285a82614295565b61426b565b818152846020838601011115612873578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261289d578081fd5b81516128ab61285a82614295565b8181528460208386010111156128bf578283fd5b6128d082602083016020870161435b565b949350505050565b60006101408083850312156128eb578182fd5b6128f48161426b565b9150508151815261290760208301612805565b602082015261291860408301612805565b6040820152606082015167ffffffffffffffff8082111561293857600080fd5b6129448583860161288d565b6060840152608084015191508082111561295d57600080fd5b5061296a8482850161288d565b60808301525060a082015160a082015260c082015160c082015260e082015160e082015261010080830151818301525061012080830151818301525092915050565b60006101e08083850312156129bf578182fd5b6129c88161426b565b9150506129d4826127fa565b81526129e2602083016127fa565b60208201526129f3604083016127fa565b60408201526060820135606082015260808201356080820152612a1860a08301612826565b60a082015260c0828101359082015260e080830135908201526101008083013590820152610120808301359082015261014080830135908201526101608083013590820152610180612a6b818401612810565b908201526101a0612a7d838201612810565b81830152506101c080830135818301525092915050565b60006101e0808385031215612aa7578182fd5b612ab08161426b565b915050612abc82612805565b8152612aca60208301612805565b6020820152612adb60408301612805565b60408201526060820151606082015260808201516080820152612b0060a08301612831565b60a082015260c0828101519082015260e080830151908201526101008083015190820152610120808301519082015261014080830151908201526101608083015190820152610180612b5381840161281b565b908201526101a0612b6583820161281b565b81830152506101c080830151818301525092915050565b803561110981614434565b805161110981614434565b600060208284031215612ba3578081fd5b8135611ea181614404565b600060208284031215612bbf578081fd5b8151611ea181614404565b60008060408385031215612bdc578081fd5b8235612be781614404565b91506020830135612bf781614419565b809150509250929050565b6000806102008385031215612c15578182fd5b8235612c2081614404565b9150612c2f84602085016129ac565b90509250929050565b60008060006102208486031215612c4d578081fd5b8335612c5881614404565b9250612c6785602086016129ac565b915061020084013567ffffffffffffffff80821115612c84578283fd5b81860191506101e0808389031215612c9a578384fd5b612ca38161426b565b9050612cae836127fa565b8152612cbc602084016127fa565b6020820152612ccd604084016127fa565b6040820152612cde606084016127fa565b60608201526080830135608082015260a083013582811115612cfe578485fd5b612d0a8982860161283c565b60a08301525060c083013582811115612d21578485fd5b612d2d8982860161283c565b60c08301525060e083013582811115612d44578485fd5b612d508982860161283c565b60e0830152506101009150612d66828401612b7c565b828201526101209150612d7a828401612b7c565b918101919091526101408281013590820152610160808301359082015261018080830135908201526101a080830135908201526101c090612dbc828401612810565b828201528093505050509250925092565b60008060408385031215612ddf578182fd5b8235612dea81614404565b946020939093013593505050565b60006020808385031215612e0a578182fd5b825167ffffffffffffffff80821115612e21578384fd5b818501915085601f830112612e34578384fd5b815181811115612e4657612e466143ee565b612e53848583020161426b565b8181528481019250838501865b83811015612e8957612e778a8884518901016128d8565b85529386019390860190600101612e60565b509098975050505050505050565b600060208284031215612ea8578081fd5b8151611ea181614419565b6000806000806102408587031215612ec9578182fd5b8451612ed481614404565b6020860151909450612ee581614419565b604086015190935067ffffffffffffffff80821115612f02578384fd5b81870191506101e080838a031215612f18578485fd5b612f218161426b565b9050612f2c83612805565b8152612f3a60208401612805565b6020820152612f4b60408401612805565b6040820152612f5c60608401612805565b60608201526080830151608082015260a083015182811115612f7c578586fd5b612f888a82860161288d565b60a08301525060c083015182811115612f9f578586fd5b612fab8a82860161288d565b60c08301525060e083015182811115612fc2578586fd5b612fce8a82860161288d565b60e0830152506101009150612fe4828401612b87565b828201526101209150612ff8828401612b87565b918101919091526101408281015190820152610160808301519082015261018080830151908201526101a080830151908201526101c09061303a82840161281b565b828201528094505050506130518660608701612a94565b905092959194509250565b60006020828403121561306d578081fd5b813567ffffffffffffffff80821115613084578283fd5b818401915061014080838703121561309a578384fd5b6130a38161426b565b9050823581526130b5602084016127fa565b60208201526130c6604084016127fa565b60408201526060830135828111156130dc578485fd5b6130e88782860161283c565b6060830152506080830135828111156130ff578485fd5b61310b8782860161283c565b60808301525060a0838101359082015260c0808401359082015260e0808401359082015261010080840135908201526101209283013592810192909252509392505050565b600060208284031215613161578081fd5b815167ffffffffffffffff811115613177578182fd5b6105a4848285016128d8565b60006101e08284031215613195578081fd5b611ea183836129ac565b60006101e082840312156131b1578081fd5b611ea18383612a94565b6000602082840312156131cc578081fd5b5035919050565b6000602082840312156131e4578081fd5b5051919050565b600080604083850312156131fd578182fd5b8235612dea81614434565b6001600160a01b03169052565b6000815180845260208085018081965082840281019150828601855b858110156132e95782840389528151610140815186528682015161325788880182613208565b5060408083015161326a82890182613208565b5050606080830151828289015261328383890182613310565b925050506080808301518783038289015261329e8382613310565b60a085810151908a015260c080860151908a015260e080860151908a015261010080860151908a01526101209485015194909801939093525050509784019790840190600101613231565b5091979650505050505050565b15159052565b6004811061330c5761330c6143d8565b9052565b6000815180845261332881602086016020860161435b565b601f01601f19169290920160200192915050565b6000815461334981614387565b808552602060018381168015613366576001811461337a576133a8565b60ff198516838901526040880195506133a8565b866000528260002060005b858110156133a05781548a8201860152908301908401613385565b890184019650505b505050505092915050565b60006101408251845260208301516133ce6020860182613208565b5060408301516133e16040860182613208565b5060608301518160608601526133f982860182613310565b915050608083015184820360808601526134138282613310565b91505060a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152508091505092915050565b60006101e061346e846134698554614349565b613208565b61347b6001840154614349565b6134886020860182613208565b506134966002840154614349565b6134a36040860182613208565b506134b16003840154614349565b6134be6060860182613208565b50600483015460808501528060a08501526134de8185016005850161333c565b905083810360c08501526134f5816006850161333c565b905083810360e085015261350c816007850161333c565b90506008830154613524610100860160ff8316613742565b613538610120860160ff8360081c16613742565b506009830154610140850152600a830154610160850152600b830154610180850152600c8301546101a0850152613572600d840154614355565b6135806101c08601826132f6565b509392505050565b613593828251613208565b60208101516135a56020840182613208565b5060408101516135b86040840182613208565b50606081015160608301526080810151608083015260a08101516135df60a08401826132fc565b5060c0818101519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151613633828501826132f6565b50506101a080820151613648828501826132f6565b50506101c090810151910152565b613664826134698354614349565b6136716001820154614349565b61367e6020840182613208565b5061368c6002820154614349565b6136996040840182613208565b5060038101546060830152600481015460808301526136bb6005820154614355565b6136c860a08401826132fc565b50600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b810154610160830152600c81015461371f610180840160ff83166132f6565b6137336101a0840160ff8360081c166132f6565b50600d01546101c09190910152565b60ff169052565b600080845461375781614387565b6001828116801561376f5760018114613780576137ac565b60ff198416875282870194506137ac565b8886526020808720875b858110156137a35781548a82015290840190820161378a565b50505082870194505b5050505083516137c081836020880161435b565b01949350505050565b7f6c6f6f74626f7800000000000000000000000000000000000000000000000000815260070190565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152600061024061382c6040840186613588565b806102208401526138408184018551613208565b506020830151613854610260840182613208565b506040830151613868610280840182613208565b50606083015161387c6102a0840182613208565b5060808301516102c083015260a08301516101e06102e08401526138a4610420840182613310565b905060c08401517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc080858403016103008601526138e18383613310565b925060e086015191508085840301610320860152506139008282613310565b915050610100840151613917610340850182613742565b5061012084015161392c610360850182613742565b506101408401516103808401526101608401516103a08401526101808401516103c08401526101a08401516103e08401526101c08401516139716104008501826132f6565b509695505050505050565b6001600160a01b039290921682521515602082015260400190565b60006001600160a01b0384168252604060208301526128d06040830184613456565b6001600160a01b03831681526102008101611ea16020830184613588565b6001600160a01b03831681526102008101611ea16020830184613656565b60006102206001600160a01b0386168352613a136020840186613656565b80610200840152613a2681840185613456565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613adb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613ac98583516133b3565b94509285019290850190600101613a8f565b5092979650505050505050565b901515815260200190565b60208082526023908201527f54686520746f6b656e2073656c6c657220686173206e6f20666565206d616e6160408201527f6765720000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526038908201527f4c6f6f74626f78206d757374206265206f776e6564206279207468652063616c60408201527f6c657220746f20757070677261646520636f6e74726163740000000000000000606082015260800190565b6020808252601d908201527f4661696c656420746f2073656e6420746f20666565206d616e61676572000000604082015260600190565b60208082526010908201527f4c6f6f74626f7820697320656d70747900000000000000000000000000000000604082015260600190565b6020808252602d908201527f546865206d6178696d756d20616d6f756e74206f6620746f6b656e732068617360408201527f206265656e20626f756768742e00000000000000000000000000000000000000606082015260800190565b60208082526021908201527f416d6f756e742065786365656473206d6178696d756d2062757920616d6f756e60408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526012908201527f53796d626f6c206d757374206265207365740000000000000000000000000000604082015260600190565b60208082526029908201527f4f6e6c792074686520746f6b656e2073656c6c65722063616e2072656365697660408201527f65207061796f7574730000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f4c6f6f74626f78206973206e6f7420696e697469616c697a6564000000000000604082015260600190565b6020808252601a908201527f496e73756666696369656e7420626173652063757272656e6379000000000000604082015260600190565b60208082526039908201527f546f6b656e2073656c6c65722064617461206d75737420626520636f6e74726f60408201527f6c6c6564206279207468697320746f6b656e2073656c6c657200000000000000606082015260800190565b60208082526016908201527f746f6b656e2068617368206d7573742062652073657400000000000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5468652073616c6520686173206e6f7420737461727465642079657400000000604082015260600190565b6020808252601e908201527f4d756c7469746f6b656e2061646472657373206d757374206265207365740000604082015260600190565b6020808252601a908201527f54686520746f6b656e2073656c6c657220697320636c6f736564000000000000604082015260600190565b60208082526010908201527f6e616d65206d7573742062652073657400000000000000000000000000000000604082015260600190565b6020808252600e908201527f4661696c656420746f2073656e64000000000000000000000000000000000000604082015260600190565b60208082526012908201527f5468652073616c652068617320656e6465640000000000000000000000000000604082015260600190565b60208082526017908201527f70726f626162696c697479206d75737420626520736574000000000000000000604082015260600190565b6020808252818101527f416d6f756e742065786365656473206d6178696d756d2062757920746f74616c604082015260600190565b60208082526011908201527f5072696365206d75737420626520736574000000000000000000000000000000604082015260600190565b600060208252611ea160208301846133b3565b600060208252611ea16020830184613456565b60006040825261414b6040830185613456565b828103602084015261415d8185613215565b95945050505050565b6000608082526141796080830187613456565b828103602084015261418b8187613215565b60ff95909516604084015250506060015292915050565b6000604082526141b56040830185613456565b828103602084015261415d81856133b3565b6000604082526141da6040830185613456565b90508260208301529392505050565b6101e081016105a88284613588565b6101e081016105a88284613656565b90815260200190565b8381526060810160038410614227576142276143d8565b8360208301526001600160a01b0383166040830152949350505050565b6000838252604060208301526128d060408301846133b3565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561428d5761428d6143ee565b604052919050565b600067ffffffffffffffff8211156142af576142af6143ee565b50601f01601f191660200190565b600082198211156142d0576142d06143c2565b500190565b6000826142f057634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561432d5761432d6143c2565b500290565b600082821015614344576143446143c2565b500390565b6001600160a01b031690565b60ff1690565b60005b8381101561437657818101518382015260200161435e565b83811115610ead5750506000910152565b60028104600182168061439b57607f821691505b602082108114156143bc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108ef57600080fd5b80151581146108ef57600080fd5b600481106108ef57600080fd5b60ff811681146108ef57600080fdfea264697066735822122064cf4c23b7619cdcba4f5910adbd79611117e28505b423e9e8dc5e59964cb55d64736f6c63430008000033a2646970667358221220bc0750dcea523edaa4f1496ca139b8d3a556a81349c6a774768d342f4e89139964736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80635d61017711610081578063c4d66de81161005b578063c4d66de814610184578063ce5494bb14610197578063e1c28bef146101aa576100c9565b80635d61017714610147578063a7fc7a071461015c578063b429afeb14610171576100c9565b8063392e53cd116100b2578063392e53cd1461010a578063516d16b91461011f5780635213b7ff14610134576100c9565b806301768052146100ce5780632717473f146100f7575b600080fd5b6100e16100dc36600461123a565b6101b2565b6040516100ee91906117e9565b60405180910390f35b6100e1610105366004610fb8565b610299565b6101126105a7565b6040516100ee91906115b6565b6101276105be565b6040516100ee91906117fc565b6100e161014236600461123a565b61067a565b61014f6106fe565b6040516100ee9190611538565b61016f61016a366004610f95565b6107b9565b005b61011261017f366004610f95565b61081b565b61016f610192366004610f95565b610839565b61016f6101a5366004610f95565b61099c565b61016f610afc565b6101ba610bcd565b6001546201000090046001600160a01b03166101f15760405162461bcd60e51b81526004016101e8906116c1565b60405180910390fd5b6001546040517f01768052000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063017680529061023f9085906004016117fc565b60006040518083038186803b15801561025757600080fd5b505afa15801561026b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102939190810190611207565b92915050565b6102a1610bcd565b6001546201000090046001600160a01b03166102cf5760405162461bcd60e51b81526004016101e8906116c1565b60008360a001516040516020016102e691906113ff565b60408051601f198184030181529082905280516020909101206001547f0f09b13e000000000000000000000000000000000000000000000000000000008352909250600091620100009091046001600160a01b031690630f09b13e906103509085906004016117fc565b60006040518083038186803b15801561036857600080fd5b505afa15801561037c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103a49190810190611207565b602001516001600160a01b0316146103ce5760405162461bcd60e51b81526004016101e8906115f6565b6000604051806020016103e090610c6f565b601f1982820381018352601f90910116604052859350905061040460008383610b53565b6001600160a01b03166020840181905260405163a7fc7a0760e01b815263a7fc7a079061043590899060040161141b565b600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b5050600154602086015160405163a7fc7a0760e01b8152620100009092046001600160a01b0316935063a7fc7a07925061049f9160040161141b565b600060405180830381600087803b1580156104b957600080fd5b505af11580156104cd573d6000803e3d6000fd5b50505060208401516001546040517f38202eaa0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831693506338202eaa9261052992620100009004169088908a9060040161142f565b600060405180830381600087803b15801561054357600080fd5b505af1158015610557573d6000803e3d6000fd5b505050507f90b30800c29ef63b2bc508488beda55ca3b546c77026e3a9b9d381d1f3741d90856080015186602001518760405161059693929190611805565b60405180910390a150509392505050565b6001546201000090046001600160a01b0316151590565b6001546000906201000090046001600160a01b03166105ef5760405162461bcd60e51b81526004016101e8906116c1565b600160029054906101000a90046001600160a01b03166001600160a01b031663516d16b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190611252565b905090565b610682610bcd565b6001546201000090046001600160a01b03166106b05760405162461bcd60e51b81526004016101e8906116c1565b6001546040517f0f09b13e000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630f09b13e9061023f9085906004016117fc565b6001546060906201000090046001600160a01b031661072f5760405162461bcd60e51b81526004016101e8906116c1565b600160029054906101000a90046001600160a01b03166001600160a01b0316635d6101776040518163ffffffff1660e01b815260040160006040518083038186803b15801561077d57600080fd5b505afa158015610791573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610675919081019061114c565b3360009081526020819052604090205460ff161515600114806107db57503033145b6107f75760405162461bcd60e51b81526004016101e8906116f8565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b600154610100900460ff1680610852575060015460ff16155b61086e5760405162461bcd60e51b81526004016101e89061162d565b600154610100900460ff16158015610898576001805460ff1961ff00199091166101001716811790555b6040517fb429afeb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063b429afeb906108dd90309060040161141b565b60206040518083038186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d91906111eb565b151560011461094e5760405162461bcd60e51b81526004016101e890611755565b600180547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038516021790558015610998576001805461ff00191690555b5050565b6001546201000090046001600160a01b03166109ca5760405162461bcd60e51b81526004016101e8906116c1565b3360009081526020819052604090205460ff161515600114806109ec57503033145b610a085760405162461bcd60e51b81526004016101e8906116f8565b60015460405163a7fc7a0760e01b8152620100009091046001600160a01b03169063a7fc7a0790610a3d90849060040161141b565b600060405180830381600087803b158015610a5757600080fd5b505af1158015610a6b573d6000803e3d6000fd5b50506001546040517fc4d66de80000000000000000000000000000000000000000000000000000000081526001600160a01b03808616945063c4d66de89350610abe92620100009004169060040161141b565b600060405180830381600087803b158015610ad857600080fd5b505af1158015610aec573d6000803e3d6000fd5b50505050806001600160a01b0316ff5b3360009081526020819052604090205460ff16151560011480610b1e57503033145b610b3a5760405162461bcd60e51b81526004016101e8906116f8565b336000908152602081905260409020805460ff19169055565b60008084471015610b765760405162461bcd60e51b81526004016101e8906117b2565b8251610b945760405162461bcd60e51b81526004016101e8906115c1565b8383516020850187f590506001600160a01b038116610bc55760405162461bcd60e51b81526004016101e89061168a565b949350505050565b604051806101e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081526020016060815260200160608152602001600060ff168152602001600060ff168152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6144db8061191d83390190565b8035610c87816118e7565b919050565b8051610c87816118e7565b8035610c87816118ff565b8051610c87816118ff565b803560048110610c8757600080fd5b600082601f830112610ccc578081fd5b8135610cdf610cda82611860565b611836565b818152846020838601011115610cf3578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112610d1d578081fd5b8151610d2b610cda82611860565b818152846020838601011115610d3f578283fd5b610bc5826020830160208701611888565b60006101e0808385031215610d63578182fd5b610d6c81611836565b915050610d7882610c8c565b8152610d8660208301610c8c565b6020820152610d9760408301610c8c565b6040820152610da860608301610c8c565b60608201526080820151608082015260a082015167ffffffffffffffff80821115610dd257600080fd5b610dde85838601610d0d565b60a084015260c0840151915080821115610df757600080fd5b610e0385838601610d0d565b60c084015260e0840151915080821115610e1c57600080fd5b50610e2984828501610d0d565b60e083015250610100610e3d818401610f8a565b90820152610120610e4f838201610f8a565b908201526101408281015190820152610160808301519082015261018080830151908201526101a080830151908201526101c0610e8d818401610ca2565b9082015292915050565b60006101e0808385031215610eaa578182fd5b610eb381611836565b915050610ebf82610c7c565b8152610ecd60208301610c7c565b6020820152610ede60408301610c7c565b60408201526060820135606082015260808201356080820152610f0360a08301610cad565b60a082015260c0828101359082015260e080830135908201526101008083013590820152610120808301359082015261014080830135908201526101608083013590820152610180610f56818401610c97565b908201526101a0610f68838201610c97565b81830152506101c080830135818301525092915050565b8035610c878161190d565b8051610c878161190d565b600060208284031215610fa6578081fd5b8135610fb1816118e7565b9392505050565b60008060006102208486031215610fcd578182fd5b8335610fd8816118e7565b9250602084013567ffffffffffffffff80821115610ff4578384fd5b81860191506101e080838903121561100a578485fd5b61101381611836565b905061101e83610c7c565b815261102c60208401610c7c565b602082015261103d60408401610c7c565b604082015261104e60608401610c7c565b60608201526080830135608082015260a08301358281111561106e578586fd5b61107a89828601610cbc565b60a08301525060c083013582811115611091578586fd5b61109d89828601610cbc565b60c08301525060e0830135828111156110b4578586fd5b6110c089828601610cbc565b60e08301525061010091506110d6828401610f7f565b8282015261012091506110ea828401610f7f565b918101919091526101408281013590820152610160808301359082015261018080830135908201526101a080830135908201526101c09061112c828401610c97565b828201528094505050506111438560408601610e97565b90509250925092565b6000602080838503121561115e578182fd5b825167ffffffffffffffff80821115611175578384fd5b818501915085601f830112611188578384fd5b81518181111561119a5761119a6118b8565b6111a78485830201611836565b8181528481019250838501865b838110156111dd576111cb8a888451890101610d50565b855293860193908601906001016111b4565b509098975050505050505050565b6000602082840312156111fc578081fd5b8151610fb1816118ff565b600060208284031215611218578081fd5b815167ffffffffffffffff81111561122e578182fd5b610bc584828501610d50565b60006020828403121561124b578081fd5b5035919050565b600060208284031215611263578081fd5b5051919050565b6001600160a01b03169052565b15159052565b600481106112b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600081518084526112d0816020860160208601611888565b601f01601f19169290920160200192915050565b60006101e06112f484845161126a565b6020830151611306602086018261126a565b506040830151611319604086018261126a565b50606083015161132c606086018261126a565b506080830151608085015260a08301518160a086015261134e828601826112b8565b91505060c083015184820360c086015261136882826112b8565b91505060e083015184820360e086015261138282826112b8565b91505061010080840151611398828701826113f8565b5050610120808401516113ad828701826113f8565b50506101408381015190850152610160808401519085015261018080840151908501526101a080840151908501526101c0808401516113ee82870182611277565b5090949350505050565b60ff169052565b60008251611411818460208701611888565b9190910192915050565b6001600160a01b0391909116815260200190565b60006102206001600160a01b038616835261144e60208401865161126a565b6020850151611460604085018261126a565b506040850151611473606085018261126a565b5060608501516080840152608085015160a084015260a085015161149a60c085018261127d565b5060c085015160e08481019190915285015161010080850191909152850151610120808501919091528501516101408085019190915285015161016080850191909152850151610180808501919091528501516101a06114fc81860183611277565b86015190506101c061151085820183611277565b8601516101e085015250610200830181905261152e818401856112e4565b9695505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156115a9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526115978583516112e4565b9450928501929085019060010161155d565b5092979650505050505050565b901515815260200190565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b6020808252600e908201527f4c6f6f74626f7820455849535453000000000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601a908201527f4c6f6f74626f78206973206e6f7420696e697469616c697a6564000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b60208082526037908201527f4c6f6f74626f782064617461206d75737420626520636f6e74726f6c6c65642060408201527f62792074686973206c6f6f74626f7820666163746f7279000000000000000000606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b600060208252610fb160208301846112e4565b90815260200190565b60008482526001600160a01b03841660208301526060604083015261182d60608301846112e4565b95945050505050565b60405181810167ffffffffffffffff81118282101715611858576118586118b8565b604052919050565b600067ffffffffffffffff82111561187a5761187a6118b8565b50601f01601f191660200190565b60005b838110156118a357818101518382015260200161188b565b838111156118b2576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b03811681146118fc57600080fd5b50565b80151581146118fc57600080fd5b60ff811681146118fc57600080fdfe60806040523480156200001157600080fd5b506200001d336200002e565b62000028336200002e565b62000052565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b61447980620000626000396000f3fe60806040526004361061015f5760003560e01c80636db11070116100c0578063c8c01a5511610074578063e1c28bef11610059578063e1c28bef14610397578063e6f53d91146103ac578063e9606f2a146103cc5761015f565b8063c8c01a5514610364578063d96a094a146103845761015f565b8063a7fc7a07116100a5578063a7fc7a071461030f578063b2cd3b9a1461032f578063b429afeb146103445761015f565b80636db11070146102c257806380d91574146102e25761015f565b8063392e53cd11610117578063425ce651116100fc578063425ce651146102605780635a9b0b89146102805780636a520d3c146102a25761015f565b8063392e53cd1461021c5780633cda54e51461023e5761015f565b8063164e68de11610148578063164e68de146101bc5780631da5582a146101dc57806338202eaa146101fc5761015f565b80630ab6d2e31461016457806315bcde2e1461019a575b600080fd5b34801561017057600080fd5b5061018461017f3660046131eb565b6103ec565b6040516101919190614112565b60405180910390f35b3480156101a657600080fd5b506101ba6101b5366004612b92565b6105ae565b005b3480156101c857600080fd5b506101ba6101d7366004612b92565b6108f2565b3480156101e857600080fd5b506101ba6101f7366004613183565b6109bd565b34801561020857600080fd5b506101ba610217366004612c38565b610af1565b34801561022857600080fd5b50610231610eb3565b6040516101919190613ae8565b34801561024a57600080fd5b50610253610ebc565b6040516101919190613a6a565b34801561026c57600080fd5b5061018461027b3660046131bb565b61102a565b34801561028c57600080fd5b5061029561110e565b60405161019191906141e9565b3480156102ae57600080fd5b506101ba6102bd366004612c02565b611217565b3480156102ce57600080fd5b506101ba6102dd3660046131bb565b6118f0565b3480156102ee57600080fd5b506103026102fd36600461305c565b611a30565b6040516101919190614207565b34801561031b57600080fd5b506101ba61032a366004612b92565b611cef565b34801561033b57600080fd5b50610253611d51565b34801561035057600080fd5b5061023161035f366004612b92565b611e12565b34801561037057600080fd5b5061030261037f366004612dcd565b611e30565b6103026103923660046131bb565b611ea8565b3480156103a357600080fd5b506101ba6121e9565b3480156103b857600080fd5b506101ba6103c7366004612bca565b612240565b3480156103d857600080fd5b506101ba6103e7366004612b92565b6123cd565b6103f4612682565b6015541580159061040c5750601e5460ff1615156001145b6104315760405162461bcd60e51b815260040161042890613dc6565b60405180910390fd5b3360009081526020819052604090205460ff1615156001148061045357503033145b61046f5760405162461bcd60e51b815260040161042890613ec8565b601054601554604051639b73a6fb60e01b81526000926001600160a01b031691639b73a6fb916104a29190600401614207565b60006040518083038186803b1580156104ba57600080fd5b505afa1580156104ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f69190810190612df8565b6040517fa1ed5e8f00000000000000000000000000000000000000000000000000000000815290915073__$61622969d8fecb7591f8a0c0afa9566337$__9063a1ed5e8f9061055090601190859089908990600401614166565b60006040518083038186803b15801561056857600080fd5b505af415801561057c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a49190810190613150565b9150505b92915050565b6040517fb429afeb000000000000000000000000000000000000000000000000000000008152309063b429afeb906105ea9033906004016137f2565b60206040518083038186803b15801561060257600080fd5b505afa158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190612e97565b8061064f57506004546001600160a01b031633145b61066b5760405162461bcd60e51b815260040161042890613d69565b30318061067857506108ef565b6000600160029054906101000a90046001600160a01b03166001600160a01b031663f2d638266040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c857600080fd5b505afa1580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190612bae565b90506001600160a01b03811630141561072b5760405162461bcd60e51b815260040161042890613af3565b6000816001600160a01b03166339b37ab060405160200161074b906137c9565b60408051601f198184030181529082905280516020909101207fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16825261079991600401614207565b60206040518083038186803b1580156107b157600080fd5b505afa1580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e991906131d3565b90506001600160a01b0384166107ff5733610801565b835b9350806108105761014d610812565b805b9050600061082082856142d5565b9050600061082e8286614332565b6040519091506001600160a01b0387169082156108fc029083906000818181858888f193505050506108725760405162461bcd60e51b815260040161042890614001565b6040516001600160a01b0385169083156108fc029084906000818181858888f193505050506108b35760405162461bcd60e51b815260040161042890613bad565b60405181906001600160a01b038816907f067e335270006737485da9eba56ed0753a5339fffc5dc1b53ea849447c98db5490600090a350505050505b50565b6015541580159061090a5750601e5460ff1615156001145b6109265760405162461bcd60e51b815260040161042890613dc6565b3360009081526020819052604090205460ff1615156001148061094857503033145b6109645760405162461bcd60e51b815260040161042890613ec8565b600047116109845760405162461bcd60e51b815260040161042890613be4565b6040516001600160a01b038216904780156108fc02916000818181858888f193505050501580156109b9573d6000803e3d6000fd5b5050565b3360009081526020819052604090205460ff161515600114806109df57503033145b6109fb5760405162461bcd60e51b815260040161042890613ec8565b608081015160065560a08101516007805460ff19166001836003811115610a3257634e487b7160e01b600052602160045260246000fd5b021790555060c081015160085560e081015160095561010080820151600a55610120820151600b55610140820151600c55610160820151600d556101a0820151600e805461ff00191691151590920217905560015460405163d8ba590360e01b8152620100009091046001600160a01b03169063d8ba590390610abc9030906002906004016139d7565b600060405180830381600087803b158015610ad657600080fd5b505af1158015610aea573d6000803e3d6000fd5b5050505050565b600154610100900460ff1680610b0a575060015460ff16155b610b265760405162461bcd60e51b815260040161042890613cd5565b600154610100900460ff16158015610b50576001805460ff1961ff00199091166101001716811790555b6010805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790556040517f8bf455a200000000000000000000000000000000000000000000000000000000815260009073__$61622969d8fecb7591f8a0c0afa9566337$__90638bf455a290610bd1903090899089908990600401613806565b60006040518083038186803b158015610be957600080fd5b505af4158015610bfd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c259190810190612eb3565b81516011805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0393841617825560208086015160128054841691861691909117905560408601516013805484169186169190911790556060860151601480549093169416939093179055608084015160155560a08401518051939a508a9360109360009387939092610cbb9260169201906126e7565b5060c08201518051610cd79160068401916020909101906126e7565b5060e08201518051610cf39160078401916020909101906126e7565b506101008281015160088301805461012086015160ff1991821660ff9485161761ff001916931684029290921790556101408401516009840155610160840151600a840155610180840151600b8401556101a0840151600c8401556101c090930151600d909201805490931691151591909117909155825491900a6001600160a01b0381810219909216969091160294909417909355506040517f6a520d3c000000000000000000000000000000000000000000000000000000008152909250309150636a520d3c90610dcc90889088906004016139b9565b600060405180830381600087803b158015610de657600080fd5b505af1158015610dfa573d6000803e3d6000fd5b505050508015610e4a5760155460405130919033907f4f7d855e72a3885928bf8036944d5c654e82db54f489ecfcf483ce13472691bf90610e3d90601190614125565b60405180910390a4610e9a565b6012546015546040516001600160a01b039092169133907ff83d242ea8444e4b6c1668a68eb2f5c32fa83f01faf00dc22ab0db6309f8cc0790610e91903090601190613997565b60405180910390a45b508015610ead576001805461ff00191690555b50505050565b600e5460ff1690565b60155460609015801590610ed75750601e5460ff1615156001145b610ef35760405162461bcd60e51b815260040161042890613dc6565b601054601554604051639b73a6fb60e01b81526000926001600160a01b031691639b73a6fb91610f269190600401614207565b60006040518083038186803b158015610f3e57600080fd5b505afa158015610f52573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f7a9190810190612df8565b6040517f69dac38100000000000000000000000000000000000000000000000000000000815290915073__$61622969d8fecb7591f8a0c0afa9566337$__906369dac38190610fd0906011908590600401614138565b60006040518083038186803b158015610fe857600080fd5b505af4158015610ffc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110249190810190612df8565b91505090565b611032612682565b6015541580159061104a5750601e5460ff1615156001145b6110665760405162461bcd60e51b815260040161042890613dc6565b6010546015546040517f53b8a8640000000000000000000000000000000000000000000000000000000081526001600160a01b03909216916353b8a864916110b291869060040161425d565b60006040518083038186803b1580156110ca57600080fd5b505afa1580156110de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111069190810190613150565b90505b919050565b61111661276b565b604080516101e081018252600280546001600160a01b039081168352600380548216602085015260045490911693830193909352600554606083015260065460808301526007549192909160a084019160ff9091169081111561118957634e487b7160e01b600052602160045260246000fd5b60038111156111a857634e487b7160e01b600052602160045260246000fd5b815260068201546020820152600782015460408201526008820154606082015260098201546080820152600a82015460a0820152600b82015460c0820152600c82015460ff808216151560e08401526101009182900416151590820152600d9091015461012090910152905090565b600154610100900460ff1680611230575060015460ff16155b61124c5760405162461bcd60e51b815260040161042890613cd5565b600154610100900460ff16158015611276576001805460ff1961ff00199091166101001716811790555b6040517fb429afeb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063b429afeb906112bb9030906004016137f2565b60206040518083038186803b1580156112d357600080fd5b505afa1580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130b9190612e97565b151560011461132c5760405162461bcd60e51b815260040161042890613e34565b600180546001600160a01b0380861662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179091556020830151166116135781516001600160a01b031661139c5760405162461bcd60e51b815260040161042890613f5c565b60608201516113bd5760405162461bcd60e51b815260040161042890613e91565b60808201516113de5760405162461bcd60e51b8152600401610428906140db565b81516002805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03938416178255602085015160038054831691851691909117815560408601516004805490931694169390931790556060840151600555608084015160065560a084015160078054869460ff1990911690600190849081111561147757634e487b7160e01b600052602160045260246000fd5b021790555060c0820151600682015560e082015160078201556101008083015160088301556101208301516009830155610140830151600a830155610160830151600b830155610180830151600c830180546101a0860151151590930261ff001992151560ff1994851617929092169190911790556101c090920151600d909101556003805473ffffffffffffffffffffffffffffffffffffffff191630908117909155600e8054909216600190811790925590546040517febb4465f000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169163ebb4465f9161157991906002906004016139d7565b602060405180830381600087803b15801561159357600080fd5b505af11580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb91906131d3565b50336001600160a01b03167fb34b6918488a3dc8597953574e109dd1f7843322440d2d43307ee9b7b49e9c75600260405161160691906141f8565b60405180910390a26118d9565b6001546040517f22f7a450000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b0316906322f7a450906116619030906004016137f2565b6101e06040518083038186803b15801561167a57600080fd5b505afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b2919061319f565b80516002805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03938416178255602084015160038054831691851691909117815560408501516004805490931694169390931790556060830151600555608083015160065560a08301516007805492939192909160ff1990911690600190849081111561174f57634e487b7160e01b600052602160045260246000fd5b021790555060c0820151600682015560e082015160078201556101008083015160088301556101208301516009830155610140830151600a830155610160830151600b830155610180830151600c830180546101a086015160ff199091169215159290921761ff0019169115159092021790556101c090910151600d90910155600380543073ffffffffffffffffffffffffffffffffffffffff19909116811790915560015460405163d8ba590360e01b81526001600160a01b0362010000909204919091169163d8ba59039161182c91906002906004016139d7565b600060405180830381600087803b15801561184657600080fd5b505af115801561185a573d6000803e3d6000fd5b50506004546001600160a01b03163314915061188a90505760405162461bcd60e51b815260040161042890613b50565b6003546040516001600160a01b0390911690309033907f5307b520f0b9cda8bf7f047d40f86c633f5678059d27db85e08b8cab8354a24a906118d09084906002906139d7565b60405180910390a45b80156118eb576001805461ff00191690555b505050565b601554158015906119085750601e5460ff1615156001145b6119245760405162461bcd60e51b815260040161042890613dc6565b3360009081526020819052604090205460ff1615156001148061194657503033145b6119625760405162461bcd60e51b815260040161042890613ec8565b6014546015546040517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163156e29f6916119b1913391908690600401613a49565b600060405180830381600087803b1580156119cb57600080fd5b505af11580156119df573d6000803e3d6000fd5b50505050601160040154336001600160a01b03167f7996e12debea99bc6745e26335facf416518f1345f2f66208e32846961bc8c05601184604051611a259291906141c7565b60405180910390a350565b60155460009015801590611a4b5750601e5460ff1615156001145b611a675760405162461bcd60e51b815260040161042890613dc6565b3360009081526020819052604090205460ff16151560011480611a8957503033145b611aa55760405162461bcd60e51b815260040161042890613ec8565b600082606001515111611aca5760405162461bcd60e51b815260040161042890613d32565b600082608001515111611aef5760405162461bcd60e51b815260040161042890613fca565b60008260a0015111611b135760405162461bcd60e51b81526004016104289061406f565b6011546001600160a01b03908116602084015260145416604083015260a0820151601d54611b4191906142bd565b60c083015260a0820151601d8054600090611b5d9084906142bd565b90915550506010546040517f29962c5e0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906329962c5e90611bac90601190600401614125565b600060405180830381600087803b158015611bc657600080fd5b505af1158015611bda573d6000803e3d6000fd5b505050506060820151604051611bf591601691602001613749565b60408051601f1981840301815291815281516020909201919091208352601554905133907f456cf278453e114332479d8a39b8ba72dbeca513c9da114554eda244ea7c07d690611c499060119087906141a2565b60405180910390a36010546015546040517f9a929e320000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691639a929e3291611c9d918690600401614244565b602060405180830381600087803b158015611cb757600080fd5b505af1158015611ccb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110691906131d3565b3360009081526020819052604090205460ff16151560011480611d1157503033145b611d2d5760405162461bcd60e51b815260040161042890613ec8565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b60155460609015801590611d6c5750601e5460ff1615156001145b611d885760405162461bcd60e51b815260040161042890613dc6565b601054601554604051639b73a6fb60e01b81526001600160a01b0390921691639b73a6fb91611db991600401614207565b60006040518083038186803b158015611dd157600080fd5b505afa158015611de5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e0d9190810190612df8565b905090565b6001600160a01b031660009081526020819052604090205460ff1690565b3360009081526020819052604081205460ff16151560011480611e5257503033145b611e6e5760405162461bcd60e51b815260040161042890613ec8565b600954600f5410611e915760405162461bcd60e51b815260040161042890613c1b565b611ea1836002600301548461257a565b9392505050565b600e5460009060ff610100909104161515600114611ed85760405162461bcd60e51b815260040161042890613f93565b600954600f5410611efb5760405162461bcd60e51b815260040161042890613c1b565b600654611f099083906142f5565b341015611f285760405162461bcd60e51b815260040161042890613dfd565b600a54821115611f4a5760405162461bcd60e51b815260040161042890613c78565b6002546005546040517efdd58e0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169162fdd58e91611f9591339190600401613a30565b60206040518083038186803b158015611fad57600080fd5b505afa158015611fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe591906131d3565b600b54611ff29190614332565b8211156120115760405162461bcd60e51b8152600401610428906140a6565b600c54421015806120225750600c54155b61203e5760405162461bcd60e51b815260040161042890613f25565b600d544211158061204f5750600d54155b61206b5760405162461bcd60e51b815260040161042890614038565b61207b336002600301548461257a565b50816002600d01600082825461209191906142bd565b9091555050600554600654604051339130917f9be8a5ca22b7e6e81f04b5879f0248227bb770114291bd47dfaee4c3a82ad60e916120d091889061425d565b60405180910390a46001546040517f05308ff0000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b0316906305308ff0906121269030906004016137f2565b60206040518083038186803b15801561213e57600080fd5b505afa158015612152573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217691906131d3565b60065560015460405163d8ba590360e01b8152620100009091046001600160a01b03169063d8ba5903906121b19030906002906004016139d7565b600060405180830381600087803b1580156121cb57600080fd5b505af11580156121df573d6000803e3d6000fd5b5093949350505050565b3360009081526020819052604090205460ff1615156001148061220b57503033145b6122275760405162461bcd60e51b815260040161042890613ec8565b336000908152602081905260409020805460ff19169055565b601554158015906122585750601e5460ff1615156001145b6122745760405162461bcd60e51b815260040161042890613dc6565b3360009081526020819052604090205460ff1615156001148061229657503033145b6122b25760405162461bcd60e51b815260040161042890613ec8565b6001546040517fa7fc7a07000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063a7fc7a07906123009085906004016137f2565b600060405180830381600087803b15801561231a57600080fd5b505af115801561232e573d6000803e3d6000fd5b50506001546040517f6a520d3c0000000000000000000000000000000000000000000000000000000081526001600160a01b038087169450636a520d3c93506123849262010000900416906002906004016139d7565b600060405180830381600087803b15801561239e57600080fd5b505af11580156123b2573d6000803e3d6000fd5b50505050801515600114156109b957816001600160a01b0316ff5b601554158015906123e55750601e5460ff1615156001145b6124015760405162461bcd60e51b815260040161042890613dc6565b3360009081526020819052604090205460ff1615156001148061242357503033145b61243f5760405162461bcd60e51b815260040161042890613ec8565b6040517fe6f53d91000000000000000000000000000000000000000000000000000000008152309063e6f53d919061247e90849060009060040161397c565b600060405180830381600087803b15801561249857600080fd5b505af11580156124ac573d6000803e3d6000fd5b50506010546040517fa7fc7a070000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063a7fc7a0791506124f99084906004016137f2565b600060405180830381600087803b15801561251357600080fd5b505af1158015612527573d6000803e3d6000fd5b50506010546040517f38202eaa0000000000000000000000000000000000000000000000000000000081526001600160a01b0380861694506338202eaa9350610abc9216906002906011906004016139f5565b6002546040517f156e29f60000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063156e29f6906125c890879087908790600401613a49565b600060405180830381600087803b1580156125e257600080fd5b505af11580156125f6573d6000803e3d6000fd5b50506002546040517f7c8810760000000000000000000000000000000000000000000000000000000081526001600160a01b039091169250637c88107691506126489086906000903090600401614210565b600060405180830381600087803b15801561266257600080fd5b505af1158015612676573d6000803e3d6000fd5b50939695505050505050565b6040518061014001604052806000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b8280546126f390614387565b90600052602060002090601f016020900481019282612715576000855561275b565b82601f1061272e57805160ff191683800117855561275b565b8280016001018555821561275b579182015b8281111561275b578251825591602001919060010190612740565b506127679291506127e5565b5090565b604080516101e08101825260008082526020820181905291810182905260608101829052608081018290529060a08201908152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600081525090565b5b8082111561276757600081556001016127e6565b803561110981614404565b805161110981614404565b803561110981614419565b805161110981614419565b803561110981614427565b805161110981614427565b600082601f83011261284c578081fd5b813561285f61285a82614295565b61426b565b818152846020838601011115612873578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261289d578081fd5b81516128ab61285a82614295565b8181528460208386010111156128bf578283fd5b6128d082602083016020870161435b565b949350505050565b60006101408083850312156128eb578182fd5b6128f48161426b565b9150508151815261290760208301612805565b602082015261291860408301612805565b6040820152606082015167ffffffffffffffff8082111561293857600080fd5b6129448583860161288d565b6060840152608084015191508082111561295d57600080fd5b5061296a8482850161288d565b60808301525060a082015160a082015260c082015160c082015260e082015160e082015261010080830151818301525061012080830151818301525092915050565b60006101e08083850312156129bf578182fd5b6129c88161426b565b9150506129d4826127fa565b81526129e2602083016127fa565b60208201526129f3604083016127fa565b60408201526060820135606082015260808201356080820152612a1860a08301612826565b60a082015260c0828101359082015260e080830135908201526101008083013590820152610120808301359082015261014080830135908201526101608083013590820152610180612a6b818401612810565b908201526101a0612a7d838201612810565b81830152506101c080830135818301525092915050565b60006101e0808385031215612aa7578182fd5b612ab08161426b565b915050612abc82612805565b8152612aca60208301612805565b6020820152612adb60408301612805565b60408201526060820151606082015260808201516080820152612b0060a08301612831565b60a082015260c0828101519082015260e080830151908201526101008083015190820152610120808301519082015261014080830151908201526101608083015190820152610180612b5381840161281b565b908201526101a0612b6583820161281b565b81830152506101c080830151818301525092915050565b803561110981614434565b805161110981614434565b600060208284031215612ba3578081fd5b8135611ea181614404565b600060208284031215612bbf578081fd5b8151611ea181614404565b60008060408385031215612bdc578081fd5b8235612be781614404565b91506020830135612bf781614419565b809150509250929050565b6000806102008385031215612c15578182fd5b8235612c2081614404565b9150612c2f84602085016129ac565b90509250929050565b60008060006102208486031215612c4d578081fd5b8335612c5881614404565b9250612c6785602086016129ac565b915061020084013567ffffffffffffffff80821115612c84578283fd5b81860191506101e0808389031215612c9a578384fd5b612ca38161426b565b9050612cae836127fa565b8152612cbc602084016127fa565b6020820152612ccd604084016127fa565b6040820152612cde606084016127fa565b60608201526080830135608082015260a083013582811115612cfe578485fd5b612d0a8982860161283c565b60a08301525060c083013582811115612d21578485fd5b612d2d8982860161283c565b60c08301525060e083013582811115612d44578485fd5b612d508982860161283c565b60e0830152506101009150612d66828401612b7c565b828201526101209150612d7a828401612b7c565b918101919091526101408281013590820152610160808301359082015261018080830135908201526101a080830135908201526101c090612dbc828401612810565b828201528093505050509250925092565b60008060408385031215612ddf578182fd5b8235612dea81614404565b946020939093013593505050565b60006020808385031215612e0a578182fd5b825167ffffffffffffffff80821115612e21578384fd5b818501915085601f830112612e34578384fd5b815181811115612e4657612e466143ee565b612e53848583020161426b565b8181528481019250838501865b83811015612e8957612e778a8884518901016128d8565b85529386019390860190600101612e60565b509098975050505050505050565b600060208284031215612ea8578081fd5b8151611ea181614419565b6000806000806102408587031215612ec9578182fd5b8451612ed481614404565b6020860151909450612ee581614419565b604086015190935067ffffffffffffffff80821115612f02578384fd5b81870191506101e080838a031215612f18578485fd5b612f218161426b565b9050612f2c83612805565b8152612f3a60208401612805565b6020820152612f4b60408401612805565b6040820152612f5c60608401612805565b60608201526080830151608082015260a083015182811115612f7c578586fd5b612f888a82860161288d565b60a08301525060c083015182811115612f9f578586fd5b612fab8a82860161288d565b60c08301525060e083015182811115612fc2578586fd5b612fce8a82860161288d565b60e0830152506101009150612fe4828401612b87565b828201526101209150612ff8828401612b87565b918101919091526101408281015190820152610160808301519082015261018080830151908201526101a080830151908201526101c09061303a82840161281b565b828201528094505050506130518660608701612a94565b905092959194509250565b60006020828403121561306d578081fd5b813567ffffffffffffffff80821115613084578283fd5b818401915061014080838703121561309a578384fd5b6130a38161426b565b9050823581526130b5602084016127fa565b60208201526130c6604084016127fa565b60408201526060830135828111156130dc578485fd5b6130e88782860161283c565b6060830152506080830135828111156130ff578485fd5b61310b8782860161283c565b60808301525060a0838101359082015260c0808401359082015260e0808401359082015261010080840135908201526101209283013592810192909252509392505050565b600060208284031215613161578081fd5b815167ffffffffffffffff811115613177578182fd5b6105a4848285016128d8565b60006101e08284031215613195578081fd5b611ea183836129ac565b60006101e082840312156131b1578081fd5b611ea18383612a94565b6000602082840312156131cc578081fd5b5035919050565b6000602082840312156131e4578081fd5b5051919050565b600080604083850312156131fd578182fd5b8235612dea81614434565b6001600160a01b03169052565b6000815180845260208085018081965082840281019150828601855b858110156132e95782840389528151610140815186528682015161325788880182613208565b5060408083015161326a82890182613208565b5050606080830151828289015261328383890182613310565b925050506080808301518783038289015261329e8382613310565b60a085810151908a015260c080860151908a015260e080860151908a015261010080860151908a01526101209485015194909801939093525050509784019790840190600101613231565b5091979650505050505050565b15159052565b6004811061330c5761330c6143d8565b9052565b6000815180845261332881602086016020860161435b565b601f01601f19169290920160200192915050565b6000815461334981614387565b808552602060018381168015613366576001811461337a576133a8565b60ff198516838901526040880195506133a8565b866000528260002060005b858110156133a05781548a8201860152908301908401613385565b890184019650505b505050505092915050565b60006101408251845260208301516133ce6020860182613208565b5060408301516133e16040860182613208565b5060608301518160608601526133f982860182613310565b915050608083015184820360808601526134138282613310565b91505060a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152508091505092915050565b60006101e061346e846134698554614349565b613208565b61347b6001840154614349565b6134886020860182613208565b506134966002840154614349565b6134a36040860182613208565b506134b16003840154614349565b6134be6060860182613208565b50600483015460808501528060a08501526134de8185016005850161333c565b905083810360c08501526134f5816006850161333c565b905083810360e085015261350c816007850161333c565b90506008830154613524610100860160ff8316613742565b613538610120860160ff8360081c16613742565b506009830154610140850152600a830154610160850152600b830154610180850152600c8301546101a0850152613572600d840154614355565b6135806101c08601826132f6565b509392505050565b613593828251613208565b60208101516135a56020840182613208565b5060408101516135b86040840182613208565b50606081015160608301526080810151608083015260a08101516135df60a08401826132fc565b5060c0818101519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151613633828501826132f6565b50506101a080820151613648828501826132f6565b50506101c090810151910152565b613664826134698354614349565b6136716001820154614349565b61367e6020840182613208565b5061368c6002820154614349565b6136996040840182613208565b5060038101546060830152600481015460808301526136bb6005820154614355565b6136c860a08401826132fc565b50600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b810154610160830152600c81015461371f610180840160ff83166132f6565b6137336101a0840160ff8360081c166132f6565b50600d01546101c09190910152565b60ff169052565b600080845461375781614387565b6001828116801561376f5760018114613780576137ac565b60ff198416875282870194506137ac565b8886526020808720875b858110156137a35781548a82015290840190820161378a565b50505082870194505b5050505083516137c081836020880161435b565b01949350505050565b7f6c6f6f74626f7800000000000000000000000000000000000000000000000000815260070190565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152600061024061382c6040840186613588565b806102208401526138408184018551613208565b506020830151613854610260840182613208565b506040830151613868610280840182613208565b50606083015161387c6102a0840182613208565b5060808301516102c083015260a08301516101e06102e08401526138a4610420840182613310565b905060c08401517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc080858403016103008601526138e18383613310565b925060e086015191508085840301610320860152506139008282613310565b915050610100840151613917610340850182613742565b5061012084015161392c610360850182613742565b506101408401516103808401526101608401516103a08401526101808401516103c08401526101a08401516103e08401526101c08401516139716104008501826132f6565b509695505050505050565b6001600160a01b039290921682521515602082015260400190565b60006001600160a01b0384168252604060208301526128d06040830184613456565b6001600160a01b03831681526102008101611ea16020830184613588565b6001600160a01b03831681526102008101611ea16020830184613656565b60006102206001600160a01b0386168352613a136020840186613656565b80610200840152613a2681840185613456565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613adb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613ac98583516133b3565b94509285019290850190600101613a8f565b5092979650505050505050565b901515815260200190565b60208082526023908201527f54686520746f6b656e2073656c6c657220686173206e6f20666565206d616e6160408201527f6765720000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526038908201527f4c6f6f74626f78206d757374206265206f776e6564206279207468652063616c60408201527f6c657220746f20757070677261646520636f6e74726163740000000000000000606082015260800190565b6020808252601d908201527f4661696c656420746f2073656e6420746f20666565206d616e61676572000000604082015260600190565b60208082526010908201527f4c6f6f74626f7820697320656d70747900000000000000000000000000000000604082015260600190565b6020808252602d908201527f546865206d6178696d756d20616d6f756e74206f6620746f6b656e732068617360408201527f206265656e20626f756768742e00000000000000000000000000000000000000606082015260800190565b60208082526021908201527f416d6f756e742065786365656473206d6178696d756d2062757920616d6f756e60408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526012908201527f53796d626f6c206d757374206265207365740000000000000000000000000000604082015260600190565b60208082526029908201527f4f6e6c792074686520746f6b656e2073656c6c65722063616e2072656365697660408201527f65207061796f7574730000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f4c6f6f74626f78206973206e6f7420696e697469616c697a6564000000000000604082015260600190565b6020808252601a908201527f496e73756666696369656e7420626173652063757272656e6379000000000000604082015260600190565b60208082526039908201527f546f6b656e2073656c6c65722064617461206d75737420626520636f6e74726f60408201527f6c6c6564206279207468697320746f6b656e2073656c6c657200000000000000606082015260800190565b60208082526016908201527f746f6b656e2068617368206d7573742062652073657400000000000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5468652073616c6520686173206e6f7420737461727465642079657400000000604082015260600190565b6020808252601e908201527f4d756c7469746f6b656e2061646472657373206d757374206265207365740000604082015260600190565b6020808252601a908201527f54686520746f6b656e2073656c6c657220697320636c6f736564000000000000604082015260600190565b60208082526010908201527f6e616d65206d7573742062652073657400000000000000000000000000000000604082015260600190565b6020808252600e908201527f4661696c656420746f2073656e64000000000000000000000000000000000000604082015260600190565b60208082526012908201527f5468652073616c652068617320656e6465640000000000000000000000000000604082015260600190565b60208082526017908201527f70726f626162696c697479206d75737420626520736574000000000000000000604082015260600190565b6020808252818101527f416d6f756e742065786365656473206d6178696d756d2062757920746f74616c604082015260600190565b60208082526011908201527f5072696365206d75737420626520736574000000000000000000000000000000604082015260600190565b600060208252611ea160208301846133b3565b600060208252611ea16020830184613456565b60006040825261414b6040830185613456565b828103602084015261415d8185613215565b95945050505050565b6000608082526141796080830187613456565b828103602084015261418b8187613215565b60ff95909516604084015250506060015292915050565b6000604082526141b56040830185613456565b828103602084015261415d81856133b3565b6000604082526141da6040830185613456565b90508260208301529392505050565b6101e081016105a88284613588565b6101e081016105a88284613656565b90815260200190565b8381526060810160038410614227576142276143d8565b8360208301526001600160a01b0383166040830152949350505050565b6000838252604060208301526128d060408301846133b3565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561428d5761428d6143ee565b604052919050565b600067ffffffffffffffff8211156142af576142af6143ee565b50601f01601f191660200190565b600082198211156142d0576142d06143c2565b500190565b6000826142f057634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561432d5761432d6143c2565b500290565b600082821015614344576143446143c2565b500390565b6001600160a01b031690565b60ff1690565b60005b8381101561437657818101518382015260200161435e565b83811115610ead5750506000910152565b60028104600182168061439b57607f821691505b602082108114156143bc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108ef57600080fd5b80151581146108ef57600080fd5b600481106108ef57600080fd5b60ff811681146108ef57600080fdfea264697066735822122064cf4c23b7619cdcba4f5910adbd79611117e28505b423e9e8dc5e59964cb55d64736f6c63430008000033a2646970667358221220bc0750dcea523edaa4f1496ca139b8d3a556a81349c6a774768d342f4e89139964736f6c63430008000033",
  "libraries": {
    "Strings": "0xeB3E79099663eC952e02E608E00d463F36b4Fb75",
    "AddressSet": "0x8974D57fCfF9C10E9d41709da86d006604D8c75d",
    "UInt256Set": "0x8B6893DB13b55d4952a51d5188215e2a470515a9",
    "Create2": "0xBa85d3e8E0F9e48F5c21649d33f6d0f9Af12E3f5",
    "WrappedTokenLib": "0xA6E25B1B9f4E9DB9E9397853B26436Dcb0563565",
    "ComplexPoolLib": "0x6B761F9d8d3E921fA50cB08b244D82D9D153D1e4",
    "LootboxLib": "0x211f558db66012ac014d5b252823Fc862588EA7F"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "allLootboxes(uint256)": {
        "details": "get the quantized token for this"
      },
      "allLootboxesLength()": {
        "details": "number of lootboxes"
      },
      "createLootbox(address,(address,address,address,address,uint256,string,string,string,uint8,uint8,uint256,uint256,uint256,uint256,bool),(address,address,address,uint256,uint256,uint8,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,uint256))": {
        "details": "deploy a new lootbox using create2"
      },
      "getLootbox(uint256)": {
        "details": "get a lootbox"
      },
      "initialize(address)": {
        "details": "contract initialiser - set the data object"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "lootboxes()": {
        "details": "get the quantized token for this"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12920,
        "contract": "src/factories/LootboxFactory.sol:LootboxFactory",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 109,
        "contract": "src/factories/LootboxFactory.sol:LootboxFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 112,
        "contract": "src/factories/LootboxFactory.sol:LootboxFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 14232,
        "contract": "src/factories/LootboxFactory.sol:LootboxFactory",
        "label": "_lootboxData",
        "offset": 2,
        "slot": "1",
        "type": "t_contract(ILootboxData)18424"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILootboxData)18424": {
        "encoding": "inplace",
        "label": "contract ILootboxData",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}