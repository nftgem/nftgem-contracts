{
  "address": "0x7e6C37F72FBEA830E2c88d6756aF47fA956A9CCc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_multitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_offerPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_offerItem",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_acceptor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_gems",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_acceptFee",
          "type": "uint256"
        }
      ],
      "name": "OfferAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gem",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_gems",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_quantities",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_references",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_listingFee",
          "type": "uint256"
        }
      ],
      "name": "OfferRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_offerId",
          "type": "uint256"
        }
      ],
      "name": "OfferUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feesAmount",
          "type": "uint256"
        }
      ],
      "name": "SwapMeetFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "openState",
          "type": "bool"
        }
      ],
      "name": "SwapMeetIsOpen",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptFeeHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_gems",
          "type": "uint256[]"
        }
      ],
      "name": "acceptOffer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOffer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gem",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "pools",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gems",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "quantities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "listingFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "acceptFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "references",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "missingTokenPenalty",
              "type": "bool"
            }
          ],
          "internalType": "struct ISwapMeet.Offer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isOffer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listOfferIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_offerIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listOffers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gem",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "pools",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gems",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "quantities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "listingFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "acceptFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "references",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "missingTokenPenalty",
              "type": "bool"
            }
          ],
          "internalType": "struct ISwapMeet.Offer[]",
          "name": "offersOut",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "listOffersByOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gem",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "pools",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gems",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "quantities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "listingFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "acceptFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "references",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "missingTokenPenalty",
              "type": "bool"
            }
          ],
          "internalType": "struct ISwapMeet.Offer[]",
          "name": "_ids",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingFeeHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "input",
          "type": "address"
        }
      ],
      "name": "proxies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gem",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gems",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_quantities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "references",
          "type": "uint256"
        }
      ],
      "name": "registerOffer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gem",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "pools",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gems",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "quantities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "listingFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "acceptFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "references",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "missingTokenPenalty",
              "type": "bool"
            }
          ],
          "internalType": "struct ISwapMeet.Offer",
          "name": "_offer",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "openState",
          "type": "bool"
        }
      ],
      "name": "setOpenState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "unregisterOffer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd34cf5747663fb308f8e10ab4560b97fe2b48cdcdd5d73c616e7e68a9270b0e4",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x7e6C37F72FBEA830E2c88d6756aF47fA956A9CCc",
    "transactionIndex": 0,
    "gasUsed": "3156564",
    "logsBloom": "0x
    "blockHash": "0x00006577000007f6ec0682649fb72135eaf2e85ffa1822d1080462b79c225039",
    "transactionHash": "0xd34cf5747663fb308f8e10ab4560b97fe2b48cdcdd5d73c616e7e68a9270b0e4",
    "logs": [],
    "blockNumber": 14312667,
    "cumulativeGasUsed": "3156564",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x527C4Abab130D0E4fc35d41403D451cbf22cC299",
    "0xf6efadEF8F3939A81c420C8086A4774Ce891CaDd"
  ],
  "solcInputHash": "c4b01c9e154020dcc3ad39681f984144",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_offerPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_acceptor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_gems\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_acceptFee\",\"type\":\"uint256\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_gems\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_references\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_listingFee\",\"type\":\"uint256\"}],\"name\":\"OfferRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"OfferUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feesAmount\",\"type\":\"uint256\"}],\"name\":\"SwapMeetFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"openState\",\"type\":\"bool\"}],\"name\":\"SwapMeetIsOpen\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptFeeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_gems\",\"type\":\"uint256[]\"}],\"name\":\"acceptOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gem\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gems\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"listingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"references\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"missingTokenPenalty\",\"type\":\"bool\"}],\"internalType\":\"struct ISwapMeet.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listOfferIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_offerIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gem\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gems\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"listingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"references\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"missingTokenPenalty\",\"type\":\"bool\"}],\"internalType\":\"struct ISwapMeet.Offer[]\",\"name\":\"offersOut\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"listOffersByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gem\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gems\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"listingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"references\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"missingTokenPenalty\",\"type\":\"bool\"}],\"internalType\":\"struct ISwapMeet.Offer[]\",\"name\":\"_ids\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFeeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"proxies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gem\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gems\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"references\",\"type\":\"uint256\"}],\"name\":\"registerOffer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gem\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gems\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"listingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"references\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"missingTokenPenalty\",\"type\":\"bool\"}],\"internalType\":\"struct ISwapMeet.Offer\",\"name\":\"_offer\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"openState\",\"type\":\"bool\"}],\"name\":\"setOpenState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unregisterOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/market/SwapMeet.sol\":\"SwapMeet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa31f752b3b092c788ea06a6dced266db79c4407d69733d78bc15e519f39e1d3f\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool {\\n    enum RequirementType {\\n        ERC20,\\n        ERC1155,\\n        POOL\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 gemHash,\\n        uint256 quantity\\n    );\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash, bool requireMature) external;\\n\\n    function purchaseGems(uint256 count) external payable;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x82c44e3e50944c227762a26043a1307be6c51ce8621153fe0a69b0633abe0a73\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./INFTGemMultiToken.sol\\\";\\nimport \\\"./INFTComplexGemPool.sol\\\";\\n\\ninterface INFTComplexGemPoolData {\\n    enum PriceIncrementType {\\n        COMPOUND,\\n        INVERSELOG,\\n        NONE\\n    }\\n\\n    /**\\n     * @dev a requirement of erc20, erc1155, or nft gem\\n     */\\n    struct InputRequirement {\\n        address token;\\n        address pool;\\n        INFTComplexGemPool.RequirementType inputType; // 1 = erc20, 2 = erc1155, 3 = pool\\n        uint256 tokenId; // if erc20 slot 0 contains required amount\\n        uint256 minVal;\\n        bool takeCustody;\\n        bool burn;\\n        bool exactAmount;\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is imported from a legacy contract\\n     */\\n    event NFTGemImported(\\n        address indexed converter,\\n        address indexed pool,\\n        address oldPool,\\n        address oldToken,\\n        uint256 indexed gemHash,\\n        uint256 quantity\\n    );\\n\\n    function addInputRequirement(\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 theTokenId,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn,\\n        bool exactAmount\\n    ) external;\\n\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn,\\n        bool exactAmount\\n    ) external;\\n\\n    function allInputRequirementsLength() external returns (uint256);\\n\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            INFTComplexGemPool.RequirementType,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function settings()\\n        external\\n        view\\n        returns (\\n            string memory settingsSymbol,\\n            string memory settingsName,\\n            string memory settingsDescription,\\n            uint256 settingsCategory,\\n            uint256 settingsEthPrice,\\n            uint256 settingsMinTime,\\n            uint256 settingsMaxTime,\\n            uint256 settingsDiffStep,\\n            uint256 settingsMacClaims,\\n            uint256 settingsMaxQuantityPerClaim,\\n            uint256 settingsMaxClaimsPerAccount\\n        );\\n\\n    function stats()\\n        external\\n        view\\n        returns (\\n            bool statsVisible,\\n            uint256 statsClaimedCount,\\n            uint256 statsMintedCount,\\n            uint256 statsTotalStakedEth,\\n            uint256 statsNextClaimHash,\\n            uint256 statsNextGemHash,\\n            uint256 statsNextClaimId,\\n            uint256 statsNextGemId\\n        );\\n\\n    function claim(uint256 claimHash)\\n        external\\n        view\\n        returns (\\n            uint256 claimClaimAmount,\\n            uint256 claimClaimQuantity,\\n            uint256 claimClaimUnlockTime,\\n            uint256 claimClaimTokenAmount,\\n            address claimStakedToken,\\n            uint256 claimNextClaimId\\n        );\\n\\n    function token(uint256 tokenHash)\\n        external\\n        view\\n        returns (\\n            INFTGemMultiToken.TokenType tokenTokenType,\\n            uint256 tokenTokenId,\\n            address tokenTokenSource\\n        );\\n\\n    function addAllowedTokenSource(address allowedToken) external;\\n\\n    function removeAllowedTokenSource(address allowedToken) external;\\n\\n    function allowedTokenSources() external view returns (address[] memory);\\n\\n    function importLegacyGem(\\n        address pool,\\n        address legacyToken,\\n        uint256 tokenHash,\\n        address recipient,\\n        bool burnOld\\n    ) external;\\n\\n    function isLegacyGemImported(address account, uint256 tokenhash)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setNextIds(uint256 _nextClaimId, uint256 _nextGemId) external;\\n\\n    function tokenHashes() external view returns (uint256[] memory);\\n\\n    function setTokenHashes(uint256[] memory inTokenHashes) external;\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function setVisible(bool isVisible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 theCategory) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setDescription(string memory desc) external;\\n\\n    function description() external view returns (string memory);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function maxQuantityPerClaim() external view returns (uint256);\\n\\n    function maxClaimsPerAccount() external view returns (uint256);\\n\\n    function setMaxQuantityPerClaim(uint256 claimId) external;\\n\\n    function setMaxClaimsPerAccount(uint256 claimId) external;\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash)\\n        external\\n        view\\n        returns (INFTGemMultiToken.TokenType);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function gemClaimHash(uint256 gemHash) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address tkn) external view returns (bool);\\n\\n    function addAllowedToken(address tkn) external;\\n\\n    function removeAllowedToken(address tkn) external;\\n\\n    function allowPurchase() external view returns (bool);\\n\\n    function setAllowPurchase(bool allow) external;\\n\\n    function enabled() external view returns (bool);\\n\\n    function setEnabled(bool enable) external;\\n\\n    function priceIncrementType() external view returns (PriceIncrementType);\\n\\n    function setPriceIncrementType(PriceIncrementType incrementType) external;\\n}\\n\",\"keccak256\":\"0x4fbcba34bc2e6aa89a82ba61ce5452204c601b8795b2d5c57cc65cc05c184437\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INFTGemFeeManager {\\n    event FeeChanged(\\n        address indexed operator,\\n        uint256 indexed feeHash,\\n        uint256 value\\n    );\\n\\n    function fee(uint256 feeTypeHash) external view returns (uint256);\\n\\n    function setFee(uint256 feeTypeHash, uint256 _fee) external;\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x073089b45be4de1e2feecfa65d36ea9cb3ec18cec7e3c1e9de18ea8923c016c2\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0xb871feba8e614aab0f81f26db323a68649f8d1cf6641848984e821a7bc02e7a1\",\"license\":\"MIT\"},\"src/interfaces/ISwapMeet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISwapMeet {\\n    // an offer to swap a gem for some number of other gems\\n    struct Offer {\\n        address owner;\\n        address pool;\\n        uint256 gem;\\n        address[] pools;\\n        uint256[] gems;\\n        uint256[] quantities;\\n        uint256 listingFee;\\n        uint256 acceptFee;\\n        uint256 references;\\n        bool missingTokenPenalty;\\n    }\\n\\n    // an offer is registered with the swap\\n    event OfferRegistered(\\n        address _from,\\n        uint256 _offerId,\\n        address _pool,\\n        uint256 _gem,\\n        address[] _pools,\\n        uint256[] _gems,\\n        uint256[] _quantities,\\n        uint256 _references,\\n        uint256 _listingFee\\n    );\\n\\n    // an offer is cancelled\\n    event OfferUnregistered(uint256 _offerId);\\n\\n    // an offer is aacepted\\n    event OfferAccepted(\\n        uint256 _offerId,\\n        address _offerPool,\\n        uint256 _offerItem,\\n        address _acceptor,\\n        uint256[] _gems,\\n        uint256 _acceptFee\\n    );\\n\\n    // an offer is cancelled\\n    event SwapMeetFeesWithdrawn(address _recipient, uint256 _feesAmount);\\n\\n    // when the meet is opened and closed. closed means\\n    // the meet is no longer accepting offers\\n    event SwapMeetIsOpen(bool openState);\\n\\n    // registe a new offer\\n    function registerOffer(\\n        // what to have to swap\\n        address _pool,\\n        uint256 _gem,\\n        // what you are willing to swap it for\\n        address[] calldata _pools,\\n        uint256[] calldata _gems,\\n        uint256[] calldata _quantities,\\n        uint256 _references\\n    ) external payable returns (Offer memory);\\n\\n    // unregister an offer\\n    function unregisterOffer(uint256 _id) external returns (bool);\\n\\n    // is an active offer\\n    function isOffer(uint256 _id) external view returns (bool);\\n\\n    // list all offers\\n    function listOffers() external view returns (Offer[] memory);\\n\\n    // list all offer ids\\n    function listOfferIds() external view returns (uint256[] memory);\\n\\n    // list all offers\\n    function listOffersByOwner(address ownerAddress)\\n        external\\n        view\\n        returns (Offer[] memory);\\n\\n    // get details of an offer\\n    function getOffer(uint256 _id) external view returns (Offer memory);\\n\\n    // accept an offer\\n    function acceptOffer(uint256 _id, uint256[] memory)\\n        external\\n        payable\\n        returns (bool);\\n\\n    // withdraw the swap meet fees\\n    function withdrawFees(address _receiver) external;\\n\\n    // set the open state of the swap\\n    function setOpenState(bool openState) external;\\n\\n    // is the swap open\\n    function isOpen() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ed59ab90f7182e72e624ae3785ebcdcc7552edab93da65526f3e82d1ce8868f\",\"license\":\"MIT\"},\"src/libs/UInt256Set.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary UInt256Set {\\n    struct Set {\\n        mapping(uint256 => uint256) keyPointers;\\n        uint256[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, uint256 key) internal {\\n        require(\\n            !exists(self, key),\\n            \\\"UInt256Set: key already exists in the set.\\\"\\n        );\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, uint256 key) internal {\\n        // TODO: I commented this out do get a test to pass - need to figure out what is up here\\n        // require(\\n        //     exists(self, key),\\n        //     \\\"UInt256Set: key does not exist in the set.\\\"\\n        // );\\n        if (!exists(self, key)) return;\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            uint256 keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        delete self.keyList[self.keyList.length - 1];\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, uint256 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return self.keyList[index];\\n    }\\n}\\n\",\"keccak256\":\"0x0940c4009858e982bacf13c01ac1a1320aa3adf15583a9d0ebb4e10cb642cb18\",\"license\":\"MIT\"},\"src/market/SwapMeet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../interfaces/ISwapMeet.sol\\\";\\n\\nimport \\\"../access/Controllable.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\n\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\n\\nimport \\\"../libs/UInt256Set.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract SwapMeet is ISwapMeet, Controllable {\\n    uint256 private feesBalance;\\n    bool private open;\\n\\n    INFTGemFeeManager private feeManager;\\n    INFTGemMultiToken private multitoken;\\n\\n    uint256 public constant listingFeeHash =\\n        uint256(keccak256(\\\"swapMeetListingFee\\\"));\\n    uint256 public constant acceptFeeHash =\\n        uint256(keccak256(\\\"swapMeetAcceptFee\\\"));\\n\\n    using UInt256Set for UInt256Set.Set;\\n\\n    // all the offers in this contract\\n    mapping(uint256 => Offer) private offers;\\n\\n    // all the offer but by owner\\n    mapping(address => Offer[]) private offersByOwner;\\n\\n    UInt256Set.Set private offerIds;\\n\\n    // proxy mapping manages alloewances w/o owner\\n    mapping(address => address) private proxyList;\\n\\n    constructor(address _multitoken, address _feeManager) {\\n        _addController(msg.sender);\\n        multitoken = INFTGemMultiToken(_multitoken);\\n        feeManager = INFTGemFeeManager(_feeManager);\\n        open = true;\\n    }\\n\\n    // register a new offer\\n    function registerOffer(\\n        // what to have to swap\\n        address _pool,\\n        uint256 _gem,\\n        // what you are willing to swap it for\\n        address[] calldata _pools,\\n        uint256[] calldata _gems,\\n        uint256[] calldata _quantities,\\n        uint256 references\\n    ) external payable override returns (Offer memory _offer) {\\n        require(open, \\\"swap meet closed\\\");\\n\\n        // get the listing fee - the service is a flat fee\\n        uint256 listingFee = INFTGemFeeManager(feeManager).fee(listingFeeHash);\\n        listingFee = listingFee == 0 ? 0.01 ether : listingFee;\\n\\n        // basic sanity checks\\n        require(!offerIds.exists(_gem), \\\"gem already registered\\\");\\n        require(_gems.length == _pools.length, \\\"mismatched gem quantities\\\");\\n        require(msg.value >= listingFee, \\\"insufficient listing fee\\\");\\n\\n        // make sure they own the gem they wanna trade\\n        require(\\n            IERC1155(address(multitoken)).balanceOf(msg.sender, _gem) > 0,\\n            \\\"insufficient gem balance\\\"\\n        );\\n\\n        // make sure the gem is of the specified pool\\n        INFTGemMultiToken.TokenType tt = INFTComplexGemPoolData(_pool)\\n            .tokenType(_gem);\\n\\n        // require that the gem be from this pool\\n        require(tt == INFTGemMultiToken.TokenType.GEM, \\\"invalid token type\\\");\\n\\n        // make sure the pool addresses are valid and that\\n        // the token quantities are all valid\\n        for (uint256 i = 0; i < _quantities.length; i++) {\\n            if (_gems[i] == 0) {\\n                // if any gem, then check to see that this pool is valid\\n                try INFTComplexGemPoolData(_pools[i]).symbol() returns (\\n                    string memory _symbol\\n                ) {\\n                    require(bytes(_symbol).length > 0, \\\"invalid pool\\\");\\n                } catch {\\n                    require(false, \\\"invalid pool\\\");\\n                }\\n            } else {\\n                // if a specific gem, then check to make sure the gem is from this pool\\n                try\\n                    INFTComplexGemPoolData(_pools[i]).tokenType(_gems[i])\\n                returns (INFTGemMultiToken.TokenType _tokenType) {\\n                    require(\\n                        _tokenType == INFTGemMultiToken.TokenType.GEM,\\n                        \\\"not a gem from this pool\\\"\\n                    );\\n                } catch {\\n                    require(false, \\\"invalid pool\\\");\\n                }\\n            }\\n\\n            require(_quantities[i] > 0, \\\"invalid token quantity\\\");\\n        }\\n\\n        // create the offer\\n        offers[_gem] = Offer(\\n            msg.sender,\\n            _pool,\\n            _gem,\\n            _pools,\\n            _gems,\\n            _quantities,\\n            listingFee,\\n            0,\\n            references,\\n            false\\n        );\\n\\n        // add the offer to the offers mapping\\n        offerIds.insert(_gem);\\n        offersByOwner[msg.sender].push(offers[_gem]);\\n\\n        // return offer\\n        _offer = offers[_gem];\\n\\n        // emit the event\\n        emit OfferRegistered(\\n            msg.sender,\\n            _gem,\\n            _pool,\\n            _gem,\\n            _pools,\\n            _gems,\\n            _quantities,\\n            references,\\n            listingFee\\n        );\\n    }\\n\\n    // unregister an offer\\n    function unregisterOffer(uint256 _id)\\n        external\\n        override\\n        returns (bool success)\\n    {\\n        // // ensure the offer is registered\\n        require(offerIds.exists(_id) == true, \\\"offer not registered\\\");\\n\\n        // ensure the offer is the message sender\\n        require(offers[_id].owner == msg.sender, \\\"caller not owner\\\");\\n\\n        // get the listing fee of the offer\\n        uint256 _listingFee = offers[_id].listingFee;\\n\\n        // find out if they are penalized for missing tokens\\n        bool penalty = offers[_id].missingTokenPenalty;\\n\\n        // get the offer owner\\n        address offerOwner = offers[_id].owner;\\n\\n        // remove offer from offers mapping\\n        offerIds.remove(_id);\\n        delete offers[_id];\\n\\n        // remove offer from owner's offers mapping\\n        for (\\n            uint256 offerIndex = 0;\\n            offerIndex < offersByOwner[offerOwner].length;\\n            ++offerIndex\\n        ) {\\n            if (offersByOwner[offerOwner][offerIndex].gem == _id) {\\n                offersByOwner[offerOwner][offerIndex] = offersByOwner[\\n                    offerOwner\\n                ][offersByOwner[offerOwner].length - 1];\\n                offersByOwner[offerOwner].pop();\\n            }\\n        }\\n\\n        // give them their fees back if they arent penalized\\n        if (!penalty) {\\n            // refund listing fee to the owner\\n            payable(offerOwner).transfer(_listingFee);\\n        }\\n\\n        // emit the unregistered event\\n        emit OfferUnregistered(_id);\\n\\n        return true;\\n    }\\n\\n    // is an active offer\\n    function isOffer(uint256 _id)\\n        external\\n        view\\n        override\\n        returns (bool success)\\n    {\\n        return offerIds.exists(_id);\\n    }\\n\\n    // list all offers\\n    function listOffers()\\n        external\\n        view\\n        override\\n        returns (Offer[] memory offersOut)\\n    {\\n        offersOut = new Offer[](offerIds.keyList.length);\\n        for (\\n            uint256 offerIndex = 0;\\n            offerIndex < offerIds.keyList.length;\\n            ++offerIndex\\n        ) {\\n            offersOut[offerIndex] = offers[offerIds.keyList[offerIndex]];\\n        }\\n    }\\n\\n    // list all offer ids\\n    function listOfferIds()\\n        external\\n        view\\n        override\\n        returns (uint256[] memory _offerIds)\\n    {\\n        _offerIds = offerIds.keyList;\\n    }\\n\\n    // list all offers by owner\\n    function listOffersByOwner(address ownerAddress)\\n        external\\n        view\\n        override\\n        returns (Offer[] memory _ids)\\n    {\\n        _ids = offersByOwner[ownerAddress];\\n    }\\n\\n    // get details of an offer\\n    function getOffer(uint256 _id)\\n        external\\n        view\\n        override\\n        returns (Offer memory)\\n    {\\n        require(offerIds.exists(_id), \\\"offer not registered\\\");\\n        return offers[_id];\\n    }\\n\\n    // accept an offer\\n    function acceptOffer(uint256 _id, uint256[] memory _gems)\\n        external\\n        payable\\n        override\\n        returns (bool success)\\n    {\\n        // this is capitalism - so figure out our fee first\\n        uint256 acceptFee = INFTGemFeeManager(feeManager).fee(acceptFeeHash);\\n        acceptFee = acceptFee == 0 ? 0.01 ether : acceptFee;\\n        console.log(\\\"acceptOffer: acceptFee = \\\", acceptFee);\\n\\n        // check that the offer is valid\\n        require(offerIds.exists(_id), \\\"offer not registered\\\");\\n        require(msg.value >= acceptFee, \\\"insufficient accept fee\\\");\\n        console.log(\\\"acceptOffer: basic checks passed\\\");\\n\\n        // how many input pools' rquirements are met. Length of this must equal length of input pools\\n        uint256 foundInputPools = 0;\\n\\n        // iterate through all incoming gems to account for them\\n        for (uint256 gemIndex = 0; gemIndex < _gems.length; gemIndex++) {\\n            //\\n            // we'll need to track the required quantity of each gem\\n            uint256 requiredQuantity = 0;\\n            uint256 theIncomingGem = _gems[gemIndex]; // the incoming gem we are validating\\n            uint256 foundBalance = 0;\\n            address thePool;\\n\\n            // iterate through all input pool requirements for this offer\\n            for (\\n                uint256 poolIndex = 0;\\n                poolIndex < offers[_id].pools.length;\\n                poolIndex++\\n            ) {\\n                uint256 theGemRequirement = offers[_id].gems[poolIndex]; // the gem requirement for the above pool (or 0 if any gem)\\n\\n                console.log(\\\"requirement: \\\", theGemRequirement);\\n                console.log(\\\"pool: \\\", thePool);\\n\\n                // determine if the gem we are validating is a member of this pool\\n                INFTGemMultiToken.TokenType tokenType = INFTComplexGemPoolData(\\n                    offers[_id].pools[poolIndex]\\n                ).tokenType(_gems[gemIndex]);\\n\\n                // if it is then get the message senders balance of the gem\\n                // and add it to the balance we are tracking\\n                if (tokenType == INFTGemMultiToken.TokenType.GEM) {\\n                    //\\n                    // the gem pool from the offer\\n                    thePool = offers[_id].pools[poolIndex];\\n\\n                    // if we have no balance yet its the first time we have seen the pool\\n                    // so increment the total count of input pools we have seen\\n                    if (foundBalance == 0) {\\n                        foundInputPools++;\\n                    }\\n\\n                    // incement the pool gem balance\\n                    foundBalance += IERC1155(address(multitoken)).balanceOf(\\n                        msg.sender,\\n                        _gems[gemIndex]\\n                    );\\n\\n                    console.log(\\\"balance: \\\", foundBalance);\\n\\n                    // if the requirement is specific (not 'any') then this is the\\n                    // place to check if the gem the pool requires is the gem we are checking\\n                    if (theGemRequirement != 0) {\\n                        require(\\n                            theGemRequirement == theIncomingGem,\\n                            \\\"gem mismatch\\\"\\n                        );\\n                    }\\n\\n                    // grab required quantity so we can see if we have enough\\n                    requiredQuantity = offers[_id].quantities[poolIndex];\\n                }\\n            }\\n\\n            // if the balance is less than the required quantity then reject\\n            require(\\n                thePool != address(0) && foundBalance >= requiredQuantity,\\n                \\\"Insufficient gem balance\\\"\\n            );\\n            thePool = address(0);\\n        }\\n\\n        // require that the number of pools we have seen is equal to the number of input pools\\n        require(\\n            offers[_id].pools.length == foundInputPools,\\n            \\\"conditions unsatisfied\\\"\\n        );\\n\\n        // check that the offer owner has the token to swap\\n        // and penalize them if they do mot have it.\\n        if (\\n            IERC1155(address(multitoken)).balanceOf(\\n                offers[_id].owner,\\n                offers[_id].gem\\n            ) == 0\\n        ) {\\n            // penalize the owner for not having the token\\n            offers[_id].missingTokenPenalty = true;\\n            success = false;\\n\\n            // refund the accepter\\n            payable(msg.sender).transfer(acceptFee);\\n            return success;\\n        }\\n\\n        console.log(\\\"acceptOffer: sender balance good\\\");\\n\\n        // add the fees to our withdrawable balance\\n        feesBalance += acceptFee + offers[_id].listingFee;\\n\\n        address offerPool = offers[_id].pool;\\n        uint256 offerHash = offers[_id].gem;\\n\\n        proxyList[msg.sender] = address(this);\\n\\n        // swap the gems\\n        IERC1155(address(multitoken)).safeBatchTransferFrom(\\n            msg.sender,\\n            offers[_id].owner,\\n            _gems,\\n            offers[_id].quantities,\\n            \\\"\\\"\\n        );\\n        delete proxyList[msg.sender];\\n\\n        console.log(\\\"acceptOffer: transfer batch\\\");\\n\\n        // swap the gem\\n        proxyList[offers[_id].owner] = address(this);\\n        IERC1155(address(multitoken)).safeTransferFrom(\\n            offers[_id].owner,\\n            msg.sender,\\n            offers[_id].gem,\\n            1,\\n            \\\"\\\"\\n        );\\n        delete proxyList[offers[_id].owner];\\n\\n        console.log(\\\"acceptOffer: transfer gem\\\");\\n\\n        // remove the offer\\n        offerIds.remove(_id);\\n        delete offers[_id];\\n\\n        emit OfferAccepted(\\n            _id,\\n            offerPool,\\n            offerHash,\\n            msg.sender,\\n            _gems,\\n            acceptFee\\n        );\\n\\n        return true;\\n    }\\n\\n    // withdraw accrued fees\\n    function withdrawFees(address _receiver) external override onlyController {\\n        require(feesBalance > 0, \\\"no fees to withdraw\\\");\\n        uint256 balanceToWithdraw = feesBalance;\\n        feesBalance = 0;\\n        payable(_receiver).transfer(balanceToWithdraw);\\n        emit SwapMeetFeesWithdrawn(_receiver, balanceToWithdraw);\\n    }\\n\\n    // set open state\\n    function setOpenState(bool openState) external override onlyController {\\n        open = openState;\\n        emit SwapMeetIsOpen(open);\\n    }\\n\\n    // is the swap open\\n    function isOpen() external view override returns (bool) {\\n        return open;\\n    }\\n\\n    // called by the multitoken when a swap is performed by the\\n    // swap meet - we temporarily set the operator of the token\\n    // via this proxy function, which is called from isApproved()\\n    function proxies(address input) external view returns (address) {\\n        return proxyList[input];\\n    }\\n}\\n\",\"keccak256\":\"0x41971e0d23bb971eb95df23847a7ac208518e97028dfd0745896552efa9d44d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200381c3803806200381c8339810160408190526200003491620000c9565b6200003f3362000088565b600380546001600160a01b0319166001600160a01b0393841617905560028054610100600160a81b03191661010092909316919091029190911760ff1916600117905562000100565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b80516001600160a01b0381168114620000c457600080fd5b919050565b60008060408385031215620000dc578182fd5b620000e783620000ac565b9150620000f760208401620000ac565b90509250929050565b61370c80620001106000396000f3fe60806040526004361061010e5760003560e01c8063b429afeb116100a5578063e0c8f57311610074578063ebd133da11610059578063ebd133da146102e6578063f1514f12146102fb578063f36c616f146103105761010e565b8063e0c8f573146102af578063e1c28bef146102d15761010e565b8063b429afeb14610220578063b8f27b9114610240578063c455279114610260578063d56a97821461028d5761010e565b8063667bfbac116100e1578063667bfbac146101a05780638f05be52146101cd578063a0c59979146101e0578063a7fc7a07146102005761010e565b8063164e68de1461011357806331983366146101355780634579268a1461015e57806347535d7b1461018b575b600080fd5b34801561011f57600080fd5b5061013361012e366004612a97565b610330565b005b610148610143366004612c6f565b610418565b604051610155919061310a565b60405180910390f35b34801561016a57600080fd5b5061017e610179366004612c3f565b610eca565b604051610155919061359f565b34801561019757600080fd5b5061014861107e565b3480156101ac57600080fd5b506101c06101bb366004612a97565b611087565b6040516101559190613079565b61017e6101db366004612ab8565b611264565b3480156101ec57600080fd5b506101486101fb366004612c3f565b611ca3565b34801561020c57600080fd5b5061013361021b366004612a97565b6120d6565b34801561022c57600080fd5b5061014861023b366004612a97565b612138565b34801561024c57600080fd5b5061014861025b366004612c3f565b612156565b34801561026c57600080fd5b5061028061027b366004612a97565b612163565b6040516101559190612ee9565b34801561029957600080fd5b506102a2612181565b60405161015591906135b2565b3480156102bb57600080fd5b506102c46121a5565b60405161015591906130f7565b3480156102dd57600080fd5b50610133612200565b3480156102f257600080fd5b506101c0612257565b34801561030757600080fd5b506102a26124c0565b34801561031c57600080fd5b5061013361032b366004612b70565b6124e4565b3360009081526020819052604090205460ff1615156001148061035257503033145b6103775760405162461bcd60e51b815260040161036e906133c1565b60405180910390fd5b6000600154116103995760405162461bcd60e51b815260040161036e90613175565b6001805460009182905560405190916001600160a01b0384169183156108fc0291849190818181858888f193505050501580156103da573d6000803e3d6000fd5b507f02733937f9e82db2299a456e9848434a9a1534244dc1796264c719237b307f83828260405161040c929190612fb3565b60405180910390a15050565b6002546040517f39b37ab000000000000000000000000000000000000000000000000000000000815260009182916101009091046001600160a01b0316906339b37ab09061048a907f27c08a1671399b6816045d86602ffa6404f756deddc6a5a58270d7c7668d5eb8906004016135b2565b60206040518083038186803b1580156104a257600080fd5b505afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da9190612c57565b905080156104e857806104f1565b662386f26fc100005b90506105326040518060400160405280601981526020017f6163636570744f666665723a20616363657074466565203d200000000000000081525082612571565b61053d6006856125e8565b6105595760405162461bcd60e51b815260040161036e906132bf565b803410156105795760405162461bcd60e51b815260040161036e90613353565b6105b76040518060400160405280602081526020017f6163636570744f666665723a20626173696320636865636b7320706173736564815250612644565b6000805b84518110156109f8576000808683815181106105e757634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008080600090505b60008b8152600460205260409020600301548110156109aa5760008b815260046020819052604082200180548390811061064457634e487b7160e01b600052603260045260246000fd5b906000526020600020015490506106906040518060400160405280600d81526020017f726571756972656d656e743a200000000000000000000000000000000000000081525082612571565b6106cf6040518060400160405280600681526020017f706f6f6c3a200000000000000000000000000000000000000000000000000000815250846126b8565b60008c815260046020526040812060030180548490811061070057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001548c516001600160a01b039091169063e6c3b1f6908e908b90811061074057634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161076491906135b2565b60206040518083038186803b15801561077c57600080fd5b505afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190612b90565b905060028160028111156107d857634e487b7160e01b600052602160045260246000fd5b14156109955760008d815260046020526040902060030180548490811061080f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031693508461083957886108358161368f565b9950505b6003548c516001600160a01b039091169062fdd58e9033908f908c90811061087157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610896929190612fb3565b60206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190612c57565b6108f09086613630565b94506109316040518060400160405280600981526020017f62616c616e63653a20000000000000000000000000000000000000000000000081525086612571565b8115610956578582146109565760405162461bcd60e51b815260040161036e90613455565b60008d815260046020526040902060050180548490811061098757634e487b7160e01b600052603260045260246000fd5b906000526020600020015496505b505080806109a29061368f565b9150506105fa565b506001600160a01b038116158015906109c35750838210155b6109df5760405162461bcd60e51b815260040161036e906131ac565b508392506109f0915082905061368f565b9150506105bb565b506000858152600460205260409020600301548114610a295760405162461bcd60e51b815260040161036e9061341e565b600354600086815260046020819052604091829020805460029091015492517efdd58e0000000000000000000000000000000000000000000000000000000081526001600160a01b039485169462fdd58e94610a8b9491909316929101612fb3565b60206040518083038186803b158015610aa357600080fd5b505afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190612c57565b610b3157600085815260046020526040808220600901805460ff1916600117905551909350339083156108fc0290849086818181858888f19350505050158015610b29573d6000803e3d6000fd5b505050610ec4565b610b6f6040518060400160405280602081526020017f6163636570744f666665723a2073656e6465722062616c616e636520676f6f64815250612644565b600085815260046020526040902060060154610b8b9083613630565b60016000828254610b9c9190613630565b9091555050600085815260046020818152604080842060018101546002820154338088526008865284882080546001600160a01b03191630179055600354978d905294869052825493517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b0392831697919691831695632eb2c2d695610c3795919416928d9260059092019101612efd565b600060405180830381600087803b158015610c5157600080fd5b505af1158015610c65573d6000803e3d6000fd5b50503360009081526008602090815260409182902080546001600160a01b03191690558151808301909252601b82527f6163636570744f666665723a207472616e73666572206261746368000000000090820152610cc592509050612644565b600087815260046020818152604080842080546001600160a01b0390811686526008845282862080546001600160a01b03191630179055600354958d905292849052805460029091015491517ff242432a0000000000000000000000000000000000000000000000000000000081529483169463f242432a94610d549492909216923392909160019101612f7b565b600060405180830381600087803b158015610d6e57600080fd5b505af1158015610d82573d6000803e3d6000fd5b5050506000888152600460209081526040808320546001600160a01b03168352600882529182902080546001600160a01b03191690558151808301909252601982527f6163636570744f666665723a207472616e736665722067656d0000000000000090820152610df39150612644565b610dfe60068861272b565b600087815260046020526040812080546001600160a01b0319908116825560018201805490911690556002810182905590610e3c60038301826128c1565b610e4a6004830160006128c1565b610e586005830160006128c1565b50600060068201819055600782018190556008820155600901805460ff191690556040517fce05c4ed78377b656038b2e130a49e0d1dfe8479b0610fcb433e2267961e066690610eb39089908590859033908c908b906135bb565b60405180910390a160019450505050505b92915050565b610ed26128df565b610edd6006836125e8565b610ef95760405162461bcd60e51b815260040161036e906132bf565b60008281526004602090815260409182902082516101408101845281546001600160a01b039081168252600183015416818401526002820154818501526003820180548551818602810186019096528086529194929360608601939290830182828015610f8f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f71575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610fe757602002820191906000526020600020905b815481526020019060010190808311610fd3575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561103f57602002820191906000526020600020905b81548152602001906001019080831161102b575b505050918352505060068201546020820152600782015460408201526008820154606082015260099091015460ff16151560809091015290505b919050565b60025460ff1690565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609492939192909184015b828210156112595760008481526020908190206040805161014081018252600a860290920180546001600160a01b039081168452600182015416838501526002810154838301526003810180548351818702810187019094528084529394919360608601939283018282801561115e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611140575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156111b657602002820191906000526020600020905b8154815260200190600101908083116111a2575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561120e57602002820191906000526020600020905b8154815260200190600101908083116111fa575b50505091835250506006820154602080830191909152600783015460408301526008830154606083015260099092015460ff16151560809091015290825260019290920191016110bf565b505050509050919050565b61126c6128df565b60025460ff1661128e5760405162461bcd60e51b815260040161036e9061348c565b6002546040517f39b37ab000000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b0316906339b37ab0906112fd907f726cc96215520a07a8f8e0fe476c027c6c44853185ef22ddac273ab1c037ca43906004016135b2565b60206040518083038186803b15801561131557600080fd5b505afa158015611329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134d9190612c57565b9050801561135b5780611364565b662386f26fc100005b905061137160068b6125e8565b1561138e5760405162461bcd60e51b815260040161036e906134fa565b8588146113ad5760405162461bcd60e51b815260040161036e9061338a565b803410156113cd5760405162461bcd60e51b815260040161036e90613531565b6003546040517efdd58e0000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169062fdd58e906114179033908f90600401612fb3565b60206040518083038186803b15801561142f57600080fd5b505afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190612c57565b116114845760405162461bcd60e51b815260040161036e90613288565b6040517fe6c3b1f60000000000000000000000000000000000000000000000000000000081526000906001600160a01b038d169063e6c3b1f6906114cc908e906004016135b2565b60206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c9190612b90565b9050600281600281111561154057634e487b7160e01b600052602160045260246000fd5b1461155d5760405162461bcd60e51b815260040161036e906131e3565b60005b858110156117ff5788888281811061158857634e487b7160e01b600052603260045260246000fd5b905060200201356000141561167c578a8a828181106115b757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906115cc9190612a97565b6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561160457600080fd5b505afa92505050801561163957506040513d6000823e601f3d908101601f191682016040526116369190810190612baf565b60015b6116555760405162461bcd60e51b815260040161036e90613568565b60008151116116765760405162461bcd60e51b815260040161036e90613568565b506117a7565b8a8a8281811061169c57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906116b19190612a97565b6001600160a01b031663e6c3b1f68a8a848181106116df57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b815260040161170291906135b2565b60206040518083038186803b15801561171a57600080fd5b505afa92505050801561174a575060408051601f3d908101601f1916820190925261174791810190612b90565b60015b6117665760405162461bcd60e51b815260040161036e90613568565b600281600281111561178857634e487b7160e01b600052602160045260246000fd5b146117a55760405162461bcd60e51b815260040161036e90613251565b505b60008787838181106117c957634e487b7160e01b600052603260045260246000fd5b90506020020135116117ed5760405162461bcd60e51b815260040161036e906134c3565b806117f78161368f565b915050611560565b50604051806101400160405280336001600160a01b031681526020018d6001600160a01b031681526020018c81526020018b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050908252506040805160208b810282810182019093528b82529283019290918c918c91829185019084908082843760009201919091525050509082525060408051602089810282810182019093528982529283019290918a918a91829185019084908082843760009201829052509385525050506020808301869052604080840183905260608085018a905260809094018390528f83526004825291829020845181546001600160a01b039182166001600160a01b031991821617835586840151600184018054919093169116179055918401516002830155918301518051919261195492600385019290910190612946565b50608082015180516119709160048401916020909101906129a7565b5060a0820151805161198c9160058401916020909101906129a7565b5060c082015160068281019190915560e083015160078301556101008301516008830155610120909201516009909101805460ff19169115159190911790556119d5908c61283c565b3360009081526005602090815260408083208e845260048352908320815460018082018455928552929093208354600a9093020180546001600160a01b039384166001600160a01b0319918216178255828501549282018054939094169216919091179091556002808301549082015560038083018054611a5992840191906129e2565b5060048281018054611a6e92840191906129e2565b5060058281018054611a8392840191906129e2565b506006828101549082015560078083015490820155600880830154908201556009918201549101805460ff191660ff909216151591909117905560008b81526004602090815260409182902082516101408101845281546001600160a01b039081168252600183015416818401526002820154818501526003820180548551818602810186019096528086529194929360608601939290830182828015611b5357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b35575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611bab57602002820191906000526020600020905b815481526020019060010190808311611b97575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611c0357602002820191906000526020600020905b815481526020019060010190808311611bef575b505050505081526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152505092507fff5491dfeca32e5172cf0a5b4b00845fc6fc56971fa6a6aa43638177be53c663338c8e8e8e8e8e8e8e8e8e8d604051611c8c9c9b9a99989796959493929190612fcc565b60405180910390a150509998505050505050505050565b6000611cb06006836125e8565b1515600114611cd15760405162461bcd60e51b815260040161036e906132bf565b6000828152600460205260409020546001600160a01b03163314611d075760405162461bcd60e51b815260040161036e9061321a565b600082815260046020526040902060068082015460098301549254909260ff16916001600160a01b0390911690611d3e908661272b565b600085815260046020526040812080546001600160a01b0319908116825560018201805490911690556002810182905590611d7c60038301826128c1565b611d8a6004830160006128c1565b611d986005830160006128c1565b5060006006820181905560078201819055600882018190556009909101805460ff191690555b6001600160a01b038216600090815260056020526040902054811015612056576001600160a01b0382166000908152600560205260409020805487919083908110611e1957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a0201600201541415612046576001600160a01b03821660009081526005602052604090208054611e5790600190613648565b81548110611e7557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a020160056000846001600160a01b03166001600160a01b031681526020019081526020016000208281548110611ec757634e487b7160e01b600052603260045260246000fd5b600091825260209091208254600a9092020180546001600160a01b039283166001600160a01b03199182161782556001808501549083018054919094169116179091556002808301549082015560038083018054611f2892840191906129e2565b5060048281018054611f3d92840191906129e2565b5060058281018054611f5292840191906129e2565b506006828101549082015560078083015490820155600880830154908201556009918201549101805460ff191660ff90921615159190911790556001600160a01b0382166000908152600560205260409020805480611fc157634e487b7160e01b600052603160045260246000fd5b600082815260208120600a6000199093019283020180546001600160a01b031990811682556001820180549091169055600281018290559061200660038301826128c1565b6120146004830160006128c1565b6120226005830160006128c1565b50600060068201819055600782018190556008820155600901805460ff1916905590555b61204f8161368f565b9050611dbe565b5081612094576040516001600160a01b0382169084156108fc029085906000818181858888f19350505050158015612092573d6000803e3d6000fd5b505b7f6fe9d3036555a48d846210fc929918eea7466f43b5a3b3561c9e650328b7a9c1856040516120c391906135b2565b60405180910390a1506001949350505050565b3360009081526020819052604090205460ff161515600114806120f857503033145b6121145760405162461bcd60e51b815260040161036e906133c1565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b6000610ec46006836125e8565b6001600160a01b039081166000908152600860205260409020541690565b7f726cc96215520a07a8f8e0fe476c027c6c44853185ef22ddac273ab1c037ca4381565b606060066001018054806020026020016040519081016040528092919081815260200182805480156121f657602002820191906000526020600020905b8154815260200190600101908083116121e2575b5050505050905090565b3360009081526020819052604090205460ff1615156001148061222257503033145b61223e5760405162461bcd60e51b815260040161036e906133c1565b336000908152602081905260409020805460ff19169055565b60075460609067ffffffffffffffff81111561228357634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156122bc57816020015b6122a96128df565b8152602001906001900390816122a15790505b50905060005b6007548110156124bc5760046000600660010183815481106122f457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101548352828101939093526040918201902081516101408101835281546001600160a01b0390811682526001830154168185015260028201548184015260038201805484518187028101870190955280855291949293606086019390929083018282801561239757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612379575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156123ef57602002820191906000526020600020905b8154815260200190600101908083116123db575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561244757602002820191906000526020600020905b815481526020019060010190808311612433575b505050918352505060068201546020820152600782015460408201526008820154606082015260099091015460ff16151560809091015282518390839081106124a057634e487b7160e01b600052603260045260246000fd5b6020026020010181905250806124b59061368f565b90506122c2565b5090565b7f27c08a1671399b6816045d86602ffa6404f756deddc6a5a58270d7c7668d5eb881565b3360009081526020819052604090205460ff1615156001148061250657503033145b6125225760405162461bcd60e51b815260040161036e906133c1565b6002805460ff191682151517908190556040517fc1d88cff745a1941632e2942e18e1c3456bf9296d0efc79df68e11c56a47424e916125669160ff9091169061310a565b60405180910390a150565b6125e48282604051602401612587929190613153565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9710a9d000000000000000000000000000000000000000000000000000000000179052612899565b5050565b60018201546000906125fc57506000610ec4565b600082815260208490526040902054600184018054849290811061263057634e487b7160e01b600052603260045260246000fd5b906000526020600020015414905092915050565b6126b5816040516024016126589190613115565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052612899565b50565b6125e482826040516024016126ce929190613128565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f319af33300000000000000000000000000000000000000000000000000000000179052612899565b61273582826125e8565b61273e576125e4565b6000600161274b846128ba565b6127559190613648565b6000838152602085905260409020549091508082146127ec57600084600101838154811061279357634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508185600001600083815260200190815260200160002081905550808560010183815481106127de57634e487b7160e01b600052603260045260246000fd5b600091825260209091200155505b60008381526020859052604081205560018085018054909161280d91613648565b8154811061282b57634e487b7160e01b600052603260045260246000fd5b600091825260208220015550505050565b61284682826125e8565b156128635760405162461bcd60e51b815260040161036e906132f6565b60018083018054808301825560008281526020902001839055546128879190613648565b60009182526020929092526040902055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001015490565b50805460008255906000526020600020908101906126b59190612a22565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016060815260200160608152602001606081526020016000815260200160008152602001600081526020016000151581525090565b82805482825590600052602060002090810192821561299b579160200282015b8281111561299b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612966565b506124bc929150612a22565b82805482825590600052602060002090810192821561299b579160200282015b8281111561299b5782518255916020019190600101906129c7565b82805482825590600052602060002090810192821561299b5760005260206000209182015b8281111561299b578254825591600101919060010190612a07565b5b808211156124bc5760008155600101612a23565b80356001600160a01b038116811461107957600080fd5b60008083601f840112612a5f578182fd5b50813567ffffffffffffffff811115612a76578182fd5b6020830191508360208083028501011115612a9057600080fd5b9250929050565b600060208284031215612aa8578081fd5b612ab182612a37565b9392505050565b600080600080600080600080600060c08a8c031215612ad5578485fd5b612ade8a612a37565b985060208a0135975060408a013567ffffffffffffffff80821115612b01578687fd5b612b0d8d838e01612a4e565b909950975060608c0135915080821115612b25578687fd5b612b318d838e01612a4e565b909750955060808c0135915080821115612b49578485fd5b50612b568c828d01612a4e565b9a9d999c50979a9699959894979660a00135949350505050565b600060208284031215612b81578081fd5b81358015158114612ab1578182fd5b600060208284031215612ba1578081fd5b815160038110612ab1578182fd5b600060208284031215612bc0578081fd5b815167ffffffffffffffff80821115612bd7578283fd5b818401915084601f830112612bea578283fd5b815181811115612bfc57612bfc6136c0565b612c0f6020601f19601f84011601613606565b9150808252856020828501011115612c25578384fd5b612c3681602084016020860161365f565b50949350505050565b600060208284031215612c50578081fd5b5035919050565b600060208284031215612c68578081fd5b5051919050565b60008060408385031215612c81578182fd5b8235915060208084013567ffffffffffffffff80821115612ca0578384fd5b818601915086601f830112612cb3578384fd5b813581811115612cc557612cc56136c0565b8381029150612cd5848301613606565b8181528481019084860184860187018b1015612cef578788fd5b8795505b83861015612d11578035835260019590950194918601918601612cf3565b508096505050505050509250929050565b6001600160a01b0316815260200190565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015612d785781516001600160a01b031687529582019590820190600101612d53565b509495945050505050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612db4578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015612d7857815187529582019590820190600101612de3565b15159052565b60008151808452612e1d81602086016020860161365f565b601f01601f19169290920160200192915050565b6000610140612e41848451612d33565b6020830151612e536020860182612d33565b50604083015160408501526060830151816060860152612e7582860182612d40565b91505060808301518482036080860152612e8f8282612dd0565b91505060a083015184820360a0860152612ea98282612dd0565b91505060c083015160c085015260e083015160e085015261010080840151818601525061012080840151612edf82870182612dff565b5090949350505050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808716835260208187168185015260a06040850152612f2960a0850187612dd0565b84810360608601528554808252868552828520935090820190845b81811015612f6057845483526001948501949284019201612f44565b50508481036080909501949094529183525001949350505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038d81168252602082018d90528b166040820152606081018a9052610120608082018190528101889052600061014082018a825b8b811015613032576130218361301c84612a37565b612d22565b925060209190910190600101613007565b505082810360a084015261304781898b612d83565b905082810360c084015261305c818789612d83565b60e0840195909552505061010001529a9950505050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156130ea577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526130d8858351612e31565b9450928501929085019060010161309e565b5092979650505050505050565b600060208252612ab16020830184612dd0565b901515815260200190565b600060208252612ab16020830184612e05565b60006040825261313b6040830185612e05565b90506001600160a01b03831660208301529392505050565b6000604082526131666040830185612e05565b90508260208301529392505050565b60208082526013908201527f6e6f206665657320746f20776974686472617700000000000000000000000000604082015260600190565b60208082526018908201527f496e73756666696369656e742067656d2062616c616e63650000000000000000604082015260600190565b60208082526012908201527f696e76616c696420746f6b656e20747970650000000000000000000000000000604082015260600190565b60208082526010908201527f63616c6c6572206e6f74206f776e657200000000000000000000000000000000604082015260600190565b60208082526018908201527f6e6f7420612067656d2066726f6d207468697320706f6f6c0000000000000000604082015260600190565b60208082526018908201527f696e73756666696369656e742067656d2062616c616e63650000000000000000604082015260600190565b60208082526014908201527f6f66666572206e6f742072656769737465726564000000000000000000000000604082015260600190565b6020808252602a908201527f55496e743235365365743a206b657920616c726561647920657869737473206960408201527f6e20746865207365742e00000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f696e73756666696369656e742061636365707420666565000000000000000000604082015260600190565b60208082526019908201527f6d69736d6174636865642067656d207175616e74697469657300000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b60208082526016908201527f636f6e646974696f6e7320756e73617469736669656400000000000000000000604082015260600190565b6020808252600c908201527f67656d206d69736d617463680000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f73776170206d65657420636c6f73656400000000000000000000000000000000604082015260600190565b60208082526016908201527f696e76616c696420746f6b656e207175616e7469747900000000000000000000604082015260600190565b60208082526016908201527f67656d20616c7265616479207265676973746572656400000000000000000000604082015260600190565b60208082526018908201527f696e73756666696369656e74206c697374696e67206665650000000000000000604082015260600190565b6020808252600c908201527f696e76616c696420706f6f6c0000000000000000000000000000000000000000604082015260600190565b600060208252612ab16020830184612e31565b90815260200190565b60008782526001600160a01b03808816602084015286604084015280861660608401525060c060808301526135f360c0830185612dd0565b90508260a0830152979650505050505050565b60405181810167ffffffffffffffff81118282101715613628576136286136c0565b604052919050565b60008219821115613643576136436136aa565b500190565b60008282101561365a5761365a6136aa565b500390565b60005b8381101561367a578181015183820152602001613662565b83811115613689576000848401525b50505050565b60006000198214156136a3576136a36136aa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122022f6d15be9203910157faa5ce754fbd427b0cabb5c22b9d8bf5ba3440a4dfc1b64736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061010e5760003560e01c8063b429afeb116100a5578063e0c8f57311610074578063ebd133da11610059578063ebd133da146102e6578063f1514f12146102fb578063f36c616f146103105761010e565b8063e0c8f573146102af578063e1c28bef146102d15761010e565b8063b429afeb14610220578063b8f27b9114610240578063c455279114610260578063d56a97821461028d5761010e565b8063667bfbac116100e1578063667bfbac146101a05780638f05be52146101cd578063a0c59979146101e0578063a7fc7a07146102005761010e565b8063164e68de1461011357806331983366146101355780634579268a1461015e57806347535d7b1461018b575b600080fd5b34801561011f57600080fd5b5061013361012e366004612a97565b610330565b005b610148610143366004612c6f565b610418565b604051610155919061310a565b60405180910390f35b34801561016a57600080fd5b5061017e610179366004612c3f565b610eca565b604051610155919061359f565b34801561019757600080fd5b5061014861107e565b3480156101ac57600080fd5b506101c06101bb366004612a97565b611087565b6040516101559190613079565b61017e6101db366004612ab8565b611264565b3480156101ec57600080fd5b506101486101fb366004612c3f565b611ca3565b34801561020c57600080fd5b5061013361021b366004612a97565b6120d6565b34801561022c57600080fd5b5061014861023b366004612a97565b612138565b34801561024c57600080fd5b5061014861025b366004612c3f565b612156565b34801561026c57600080fd5b5061028061027b366004612a97565b612163565b6040516101559190612ee9565b34801561029957600080fd5b506102a2612181565b60405161015591906135b2565b3480156102bb57600080fd5b506102c46121a5565b60405161015591906130f7565b3480156102dd57600080fd5b50610133612200565b3480156102f257600080fd5b506101c0612257565b34801561030757600080fd5b506102a26124c0565b34801561031c57600080fd5b5061013361032b366004612b70565b6124e4565b3360009081526020819052604090205460ff1615156001148061035257503033145b6103775760405162461bcd60e51b815260040161036e906133c1565b60405180910390fd5b6000600154116103995760405162461bcd60e51b815260040161036e90613175565b6001805460009182905560405190916001600160a01b0384169183156108fc0291849190818181858888f193505050501580156103da573d6000803e3d6000fd5b507f02733937f9e82db2299a456e9848434a9a1534244dc1796264c719237b307f83828260405161040c929190612fb3565b60405180910390a15050565b6002546040517f39b37ab000000000000000000000000000000000000000000000000000000000815260009182916101009091046001600160a01b0316906339b37ab09061048a907f27c08a1671399b6816045d86602ffa6404f756deddc6a5a58270d7c7668d5eb8906004016135b2565b60206040518083038186803b1580156104a257600080fd5b505afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da9190612c57565b905080156104e857806104f1565b662386f26fc100005b90506105326040518060400160405280601981526020017f6163636570744f666665723a20616363657074466565203d200000000000000081525082612571565b61053d6006856125e8565b6105595760405162461bcd60e51b815260040161036e906132bf565b803410156105795760405162461bcd60e51b815260040161036e90613353565b6105b76040518060400160405280602081526020017f6163636570744f666665723a20626173696320636865636b7320706173736564815250612644565b6000805b84518110156109f8576000808683815181106105e757634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008080600090505b60008b8152600460205260409020600301548110156109aa5760008b815260046020819052604082200180548390811061064457634e487b7160e01b600052603260045260246000fd5b906000526020600020015490506106906040518060400160405280600d81526020017f726571756972656d656e743a200000000000000000000000000000000000000081525082612571565b6106cf6040518060400160405280600681526020017f706f6f6c3a200000000000000000000000000000000000000000000000000000815250846126b8565b60008c815260046020526040812060030180548490811061070057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001548c516001600160a01b039091169063e6c3b1f6908e908b90811061074057634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161076491906135b2565b60206040518083038186803b15801561077c57600080fd5b505afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190612b90565b905060028160028111156107d857634e487b7160e01b600052602160045260246000fd5b14156109955760008d815260046020526040902060030180548490811061080f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031693508461083957886108358161368f565b9950505b6003548c516001600160a01b039091169062fdd58e9033908f908c90811061087157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610896929190612fb3565b60206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190612c57565b6108f09086613630565b94506109316040518060400160405280600981526020017f62616c616e63653a20000000000000000000000000000000000000000000000081525086612571565b8115610956578582146109565760405162461bcd60e51b815260040161036e90613455565b60008d815260046020526040902060050180548490811061098757634e487b7160e01b600052603260045260246000fd5b906000526020600020015496505b505080806109a29061368f565b9150506105fa565b506001600160a01b038116158015906109c35750838210155b6109df5760405162461bcd60e51b815260040161036e906131ac565b508392506109f0915082905061368f565b9150506105bb565b506000858152600460205260409020600301548114610a295760405162461bcd60e51b815260040161036e9061341e565b600354600086815260046020819052604091829020805460029091015492517efdd58e0000000000000000000000000000000000000000000000000000000081526001600160a01b039485169462fdd58e94610a8b9491909316929101612fb3565b60206040518083038186803b158015610aa357600080fd5b505afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190612c57565b610b3157600085815260046020526040808220600901805460ff1916600117905551909350339083156108fc0290849086818181858888f19350505050158015610b29573d6000803e3d6000fd5b505050610ec4565b610b6f6040518060400160405280602081526020017f6163636570744f666665723a2073656e6465722062616c616e636520676f6f64815250612644565b600085815260046020526040902060060154610b8b9083613630565b60016000828254610b9c9190613630565b9091555050600085815260046020818152604080842060018101546002820154338088526008865284882080546001600160a01b03191630179055600354978d905294869052825493517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b0392831697919691831695632eb2c2d695610c3795919416928d9260059092019101612efd565b600060405180830381600087803b158015610c5157600080fd5b505af1158015610c65573d6000803e3d6000fd5b50503360009081526008602090815260409182902080546001600160a01b03191690558151808301909252601b82527f6163636570744f666665723a207472616e73666572206261746368000000000090820152610cc592509050612644565b600087815260046020818152604080842080546001600160a01b0390811686526008845282862080546001600160a01b03191630179055600354958d905292849052805460029091015491517ff242432a0000000000000000000000000000000000000000000000000000000081529483169463f242432a94610d549492909216923392909160019101612f7b565b600060405180830381600087803b158015610d6e57600080fd5b505af1158015610d82573d6000803e3d6000fd5b5050506000888152600460209081526040808320546001600160a01b03168352600882529182902080546001600160a01b03191690558151808301909252601982527f6163636570744f666665723a207472616e736665722067656d0000000000000090820152610df39150612644565b610dfe60068861272b565b600087815260046020526040812080546001600160a01b0319908116825560018201805490911690556002810182905590610e3c60038301826128c1565b610e4a6004830160006128c1565b610e586005830160006128c1565b50600060068201819055600782018190556008820155600901805460ff191690556040517fce05c4ed78377b656038b2e130a49e0d1dfe8479b0610fcb433e2267961e066690610eb39089908590859033908c908b906135bb565b60405180910390a160019450505050505b92915050565b610ed26128df565b610edd6006836125e8565b610ef95760405162461bcd60e51b815260040161036e906132bf565b60008281526004602090815260409182902082516101408101845281546001600160a01b039081168252600183015416818401526002820154818501526003820180548551818602810186019096528086529194929360608601939290830182828015610f8f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f71575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610fe757602002820191906000526020600020905b815481526020019060010190808311610fd3575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561103f57602002820191906000526020600020905b81548152602001906001019080831161102b575b505050918352505060068201546020820152600782015460408201526008820154606082015260099091015460ff16151560809091015290505b919050565b60025460ff1690565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609492939192909184015b828210156112595760008481526020908190206040805161014081018252600a860290920180546001600160a01b039081168452600182015416838501526002810154838301526003810180548351818702810187019094528084529394919360608601939283018282801561115e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611140575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156111b657602002820191906000526020600020905b8154815260200190600101908083116111a2575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561120e57602002820191906000526020600020905b8154815260200190600101908083116111fa575b50505091835250506006820154602080830191909152600783015460408301526008830154606083015260099092015460ff16151560809091015290825260019290920191016110bf565b505050509050919050565b61126c6128df565b60025460ff1661128e5760405162461bcd60e51b815260040161036e9061348c565b6002546040517f39b37ab000000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b0316906339b37ab0906112fd907f726cc96215520a07a8f8e0fe476c027c6c44853185ef22ddac273ab1c037ca43906004016135b2565b60206040518083038186803b15801561131557600080fd5b505afa158015611329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134d9190612c57565b9050801561135b5780611364565b662386f26fc100005b905061137160068b6125e8565b1561138e5760405162461bcd60e51b815260040161036e906134fa565b8588146113ad5760405162461bcd60e51b815260040161036e9061338a565b803410156113cd5760405162461bcd60e51b815260040161036e90613531565b6003546040517efdd58e0000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169062fdd58e906114179033908f90600401612fb3565b60206040518083038186803b15801561142f57600080fd5b505afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190612c57565b116114845760405162461bcd60e51b815260040161036e90613288565b6040517fe6c3b1f60000000000000000000000000000000000000000000000000000000081526000906001600160a01b038d169063e6c3b1f6906114cc908e906004016135b2565b60206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c9190612b90565b9050600281600281111561154057634e487b7160e01b600052602160045260246000fd5b1461155d5760405162461bcd60e51b815260040161036e906131e3565b60005b858110156117ff5788888281811061158857634e487b7160e01b600052603260045260246000fd5b905060200201356000141561167c578a8a828181106115b757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906115cc9190612a97565b6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561160457600080fd5b505afa92505050801561163957506040513d6000823e601f3d908101601f191682016040526116369190810190612baf565b60015b6116555760405162461bcd60e51b815260040161036e90613568565b60008151116116765760405162461bcd60e51b815260040161036e90613568565b506117a7565b8a8a8281811061169c57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906116b19190612a97565b6001600160a01b031663e6c3b1f68a8a848181106116df57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b815260040161170291906135b2565b60206040518083038186803b15801561171a57600080fd5b505afa92505050801561174a575060408051601f3d908101601f1916820190925261174791810190612b90565b60015b6117665760405162461bcd60e51b815260040161036e90613568565b600281600281111561178857634e487b7160e01b600052602160045260246000fd5b146117a55760405162461bcd60e51b815260040161036e90613251565b505b60008787838181106117c957634e487b7160e01b600052603260045260246000fd5b90506020020135116117ed5760405162461bcd60e51b815260040161036e906134c3565b806117f78161368f565b915050611560565b50604051806101400160405280336001600160a01b031681526020018d6001600160a01b031681526020018c81526020018b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050908252506040805160208b810282810182019093528b82529283019290918c918c91829185019084908082843760009201919091525050509082525060408051602089810282810182019093528982529283019290918a918a91829185019084908082843760009201829052509385525050506020808301869052604080840183905260608085018a905260809094018390528f83526004825291829020845181546001600160a01b039182166001600160a01b031991821617835586840151600184018054919093169116179055918401516002830155918301518051919261195492600385019290910190612946565b50608082015180516119709160048401916020909101906129a7565b5060a0820151805161198c9160058401916020909101906129a7565b5060c082015160068281019190915560e083015160078301556101008301516008830155610120909201516009909101805460ff19169115159190911790556119d5908c61283c565b3360009081526005602090815260408083208e845260048352908320815460018082018455928552929093208354600a9093020180546001600160a01b039384166001600160a01b0319918216178255828501549282018054939094169216919091179091556002808301549082015560038083018054611a5992840191906129e2565b5060048281018054611a6e92840191906129e2565b5060058281018054611a8392840191906129e2565b506006828101549082015560078083015490820155600880830154908201556009918201549101805460ff191660ff909216151591909117905560008b81526004602090815260409182902082516101408101845281546001600160a01b039081168252600183015416818401526002820154818501526003820180548551818602810186019096528086529194929360608601939290830182828015611b5357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b35575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611bab57602002820191906000526020600020905b815481526020019060010190808311611b97575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611c0357602002820191906000526020600020905b815481526020019060010190808311611bef575b505050505081526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152505092507fff5491dfeca32e5172cf0a5b4b00845fc6fc56971fa6a6aa43638177be53c663338c8e8e8e8e8e8e8e8e8e8d604051611c8c9c9b9a99989796959493929190612fcc565b60405180910390a150509998505050505050505050565b6000611cb06006836125e8565b1515600114611cd15760405162461bcd60e51b815260040161036e906132bf565b6000828152600460205260409020546001600160a01b03163314611d075760405162461bcd60e51b815260040161036e9061321a565b600082815260046020526040902060068082015460098301549254909260ff16916001600160a01b0390911690611d3e908661272b565b600085815260046020526040812080546001600160a01b0319908116825560018201805490911690556002810182905590611d7c60038301826128c1565b611d8a6004830160006128c1565b611d986005830160006128c1565b5060006006820181905560078201819055600882018190556009909101805460ff191690555b6001600160a01b038216600090815260056020526040902054811015612056576001600160a01b0382166000908152600560205260409020805487919083908110611e1957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a0201600201541415612046576001600160a01b03821660009081526005602052604090208054611e5790600190613648565b81548110611e7557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a020160056000846001600160a01b03166001600160a01b031681526020019081526020016000208281548110611ec757634e487b7160e01b600052603260045260246000fd5b600091825260209091208254600a9092020180546001600160a01b039283166001600160a01b03199182161782556001808501549083018054919094169116179091556002808301549082015560038083018054611f2892840191906129e2565b5060048281018054611f3d92840191906129e2565b5060058281018054611f5292840191906129e2565b506006828101549082015560078083015490820155600880830154908201556009918201549101805460ff191660ff90921615159190911790556001600160a01b0382166000908152600560205260409020805480611fc157634e487b7160e01b600052603160045260246000fd5b600082815260208120600a6000199093019283020180546001600160a01b031990811682556001820180549091169055600281018290559061200660038301826128c1565b6120146004830160006128c1565b6120226005830160006128c1565b50600060068201819055600782018190556008820155600901805460ff1916905590555b61204f8161368f565b9050611dbe565b5081612094576040516001600160a01b0382169084156108fc029085906000818181858888f19350505050158015612092573d6000803e3d6000fd5b505b7f6fe9d3036555a48d846210fc929918eea7466f43b5a3b3561c9e650328b7a9c1856040516120c391906135b2565b60405180910390a1506001949350505050565b3360009081526020819052604090205460ff161515600114806120f857503033145b6121145760405162461bcd60e51b815260040161036e906133c1565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b6000610ec46006836125e8565b6001600160a01b039081166000908152600860205260409020541690565b7f726cc96215520a07a8f8e0fe476c027c6c44853185ef22ddac273ab1c037ca4381565b606060066001018054806020026020016040519081016040528092919081815260200182805480156121f657602002820191906000526020600020905b8154815260200190600101908083116121e2575b5050505050905090565b3360009081526020819052604090205460ff1615156001148061222257503033145b61223e5760405162461bcd60e51b815260040161036e906133c1565b336000908152602081905260409020805460ff19169055565b60075460609067ffffffffffffffff81111561228357634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156122bc57816020015b6122a96128df565b8152602001906001900390816122a15790505b50905060005b6007548110156124bc5760046000600660010183815481106122f457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101548352828101939093526040918201902081516101408101835281546001600160a01b0390811682526001830154168185015260028201548184015260038201805484518187028101870190955280855291949293606086019390929083018282801561239757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612379575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156123ef57602002820191906000526020600020905b8154815260200190600101908083116123db575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561244757602002820191906000526020600020905b815481526020019060010190808311612433575b505050918352505060068201546020820152600782015460408201526008820154606082015260099091015460ff16151560809091015282518390839081106124a057634e487b7160e01b600052603260045260246000fd5b6020026020010181905250806124b59061368f565b90506122c2565b5090565b7f27c08a1671399b6816045d86602ffa6404f756deddc6a5a58270d7c7668d5eb881565b3360009081526020819052604090205460ff1615156001148061250657503033145b6125225760405162461bcd60e51b815260040161036e906133c1565b6002805460ff191682151517908190556040517fc1d88cff745a1941632e2942e18e1c3456bf9296d0efc79df68e11c56a47424e916125669160ff9091169061310a565b60405180910390a150565b6125e48282604051602401612587929190613153565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9710a9d000000000000000000000000000000000000000000000000000000000179052612899565b5050565b60018201546000906125fc57506000610ec4565b600082815260208490526040902054600184018054849290811061263057634e487b7160e01b600052603260045260246000fd5b906000526020600020015414905092915050565b6126b5816040516024016126589190613115565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052612899565b50565b6125e482826040516024016126ce929190613128565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f319af33300000000000000000000000000000000000000000000000000000000179052612899565b61273582826125e8565b61273e576125e4565b6000600161274b846128ba565b6127559190613648565b6000838152602085905260409020549091508082146127ec57600084600101838154811061279357634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508185600001600083815260200190815260200160002081905550808560010183815481106127de57634e487b7160e01b600052603260045260246000fd5b600091825260209091200155505b60008381526020859052604081205560018085018054909161280d91613648565b8154811061282b57634e487b7160e01b600052603260045260246000fd5b600091825260208220015550505050565b61284682826125e8565b156128635760405162461bcd60e51b815260040161036e906132f6565b60018083018054808301825560008281526020902001839055546128879190613648565b60009182526020929092526040902055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001015490565b50805460008255906000526020600020908101906126b59190612a22565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016060815260200160608152602001606081526020016000815260200160008152602001600081526020016000151581525090565b82805482825590600052602060002090810192821561299b579160200282015b8281111561299b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612966565b506124bc929150612a22565b82805482825590600052602060002090810192821561299b579160200282015b8281111561299b5782518255916020019190600101906129c7565b82805482825590600052602060002090810192821561299b5760005260206000209182015b8281111561299b578254825591600101919060010190612a07565b5b808211156124bc5760008155600101612a23565b80356001600160a01b038116811461107957600080fd5b60008083601f840112612a5f578182fd5b50813567ffffffffffffffff811115612a76578182fd5b6020830191508360208083028501011115612a9057600080fd5b9250929050565b600060208284031215612aa8578081fd5b612ab182612a37565b9392505050565b600080600080600080600080600060c08a8c031215612ad5578485fd5b612ade8a612a37565b985060208a0135975060408a013567ffffffffffffffff80821115612b01578687fd5b612b0d8d838e01612a4e565b909950975060608c0135915080821115612b25578687fd5b612b318d838e01612a4e565b909750955060808c0135915080821115612b49578485fd5b50612b568c828d01612a4e565b9a9d999c50979a9699959894979660a00135949350505050565b600060208284031215612b81578081fd5b81358015158114612ab1578182fd5b600060208284031215612ba1578081fd5b815160038110612ab1578182fd5b600060208284031215612bc0578081fd5b815167ffffffffffffffff80821115612bd7578283fd5b818401915084601f830112612bea578283fd5b815181811115612bfc57612bfc6136c0565b612c0f6020601f19601f84011601613606565b9150808252856020828501011115612c25578384fd5b612c3681602084016020860161365f565b50949350505050565b600060208284031215612c50578081fd5b5035919050565b600060208284031215612c68578081fd5b5051919050565b60008060408385031215612c81578182fd5b8235915060208084013567ffffffffffffffff80821115612ca0578384fd5b818601915086601f830112612cb3578384fd5b813581811115612cc557612cc56136c0565b8381029150612cd5848301613606565b8181528481019084860184860187018b1015612cef578788fd5b8795505b83861015612d11578035835260019590950194918601918601612cf3565b508096505050505050509250929050565b6001600160a01b0316815260200190565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015612d785781516001600160a01b031687529582019590820190600101612d53565b509495945050505050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612db4578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015612d7857815187529582019590820190600101612de3565b15159052565b60008151808452612e1d81602086016020860161365f565b601f01601f19169290920160200192915050565b6000610140612e41848451612d33565b6020830151612e536020860182612d33565b50604083015160408501526060830151816060860152612e7582860182612d40565b91505060808301518482036080860152612e8f8282612dd0565b91505060a083015184820360a0860152612ea98282612dd0565b91505060c083015160c085015260e083015160e085015261010080840151818601525061012080840151612edf82870182612dff565b5090949350505050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808716835260208187168185015260a06040850152612f2960a0850187612dd0565b84810360608601528554808252868552828520935090820190845b81811015612f6057845483526001948501949284019201612f44565b50508481036080909501949094529183525001949350505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038d81168252602082018d90528b166040820152606081018a9052610120608082018190528101889052600061014082018a825b8b811015613032576130218361301c84612a37565b612d22565b925060209190910190600101613007565b505082810360a084015261304781898b612d83565b905082810360c084015261305c818789612d83565b60e0840195909552505061010001529a9950505050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156130ea577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526130d8858351612e31565b9450928501929085019060010161309e565b5092979650505050505050565b600060208252612ab16020830184612dd0565b901515815260200190565b600060208252612ab16020830184612e05565b60006040825261313b6040830185612e05565b90506001600160a01b03831660208301529392505050565b6000604082526131666040830185612e05565b90508260208301529392505050565b60208082526013908201527f6e6f206665657320746f20776974686472617700000000000000000000000000604082015260600190565b60208082526018908201527f496e73756666696369656e742067656d2062616c616e63650000000000000000604082015260600190565b60208082526012908201527f696e76616c696420746f6b656e20747970650000000000000000000000000000604082015260600190565b60208082526010908201527f63616c6c6572206e6f74206f776e657200000000000000000000000000000000604082015260600190565b60208082526018908201527f6e6f7420612067656d2066726f6d207468697320706f6f6c0000000000000000604082015260600190565b60208082526018908201527f696e73756666696369656e742067656d2062616c616e63650000000000000000604082015260600190565b60208082526014908201527f6f66666572206e6f742072656769737465726564000000000000000000000000604082015260600190565b6020808252602a908201527f55496e743235365365743a206b657920616c726561647920657869737473206960408201527f6e20746865207365742e00000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f696e73756666696369656e742061636365707420666565000000000000000000604082015260600190565b60208082526019908201527f6d69736d6174636865642067656d207175616e74697469657300000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b60208082526016908201527f636f6e646974696f6e7320756e73617469736669656400000000000000000000604082015260600190565b6020808252600c908201527f67656d206d69736d617463680000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f73776170206d65657420636c6f73656400000000000000000000000000000000604082015260600190565b60208082526016908201527f696e76616c696420746f6b656e207175616e7469747900000000000000000000604082015260600190565b60208082526016908201527f67656d20616c7265616479207265676973746572656400000000000000000000604082015260600190565b60208082526018908201527f696e73756666696369656e74206c697374696e67206665650000000000000000604082015260600190565b6020808252600c908201527f696e76616c696420706f6f6c0000000000000000000000000000000000000000604082015260600190565b600060208252612ab16020830184612e31565b90815260200190565b60008782526001600160a01b03808816602084015286604084015280861660608401525060c060808301526135f360c0830185612dd0565b90508260a0830152979650505050505050565b60405181810167ffffffffffffffff81118282101715613628576136286136c0565b604052919050565b60008219821115613643576136436136aa565b500190565b60008282101561365a5761365a6136aa565b500390565b60005b8381101561367a578181015183820152602001613662565b83811115613689576000848401525b50505050565b60006000198214156136a3576136a36136aa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122022f6d15be9203910157faa5ce754fbd427b0cabb5c22b9d8bf5ba3440a4dfc1b64736f6c63430008000033",
  "libraries": {
    "Strings": "0xeB3E79099663eC952e02E608E00d463F36b4Fb75",
    "AddressSet": "0xe46E1A13694B72eC89126303d65247856bb0833e",
    "UInt256Set": "0x8B6893DB13b55d4952a51d5188215e2a470515a9",
    "Create2": "0xBa85d3e8E0F9e48F5c21649d33f6d0f9Af12E3f5",
    "WrappedTokenLib": "0x62903bE1Bb58395E0caB3fFd4f9965fe572D85FD",
    "ComplexPoolLib": "0xB584c63B7600c8694631749172bF454cCab247b4"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12816,
        "contract": "src/market/SwapMeet.sol:SwapMeet",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17506,
        "contract": "src/market/SwapMeet.sol:SwapMeet",
        "label": "feesBalance",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17508,
        "contract": "src/market/SwapMeet.sol:SwapMeet",
        "label": "open",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 17511,
        "contract": "src/market/SwapMeet.sol:SwapMeet",
        "label": "feeManager",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(INFTGemFeeManager)16035"
      },
      {
        "astId": 17514,
        "contract": "src/market/SwapMeet.sol:SwapMeet",
        "label": "multitoken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(INFTGemMultiToken)16261"
      },
      {
        "astId": 17539,
        "contract": "src/market/SwapMeet.sol:SwapMeet",
        "label": "offers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Offer)16534_storage)"
      },
      {
        "astId": 17545,
        "contract": "src/market/SwapMeet.sol:SwapMeet",
        "label": "offersByOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(Offer)16534_storage)dyn_storage)"
      },
      {
        "astId": 17548,
        "contract": "src/market/SwapMeet.sol:SwapMeet",
        "label": "offerIds",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Set)17312_storage"
      },
      {
        "astId": 17552,
        "contract": "src/market/SwapMeet.sol:SwapMeet",
        "label": "proxyList",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Offer)16534_storage)dyn_storage": {
        "base": "t_struct(Offer)16534_storage",
        "encoding": "dynamic_array",
        "label": "struct ISwapMeet.Offer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INFTGemFeeManager)16035": {
        "encoding": "inplace",
        "label": "contract INFTGemFeeManager",
        "numberOfBytes": "20"
      },
      "t_contract(INFTGemMultiToken)16261": {
        "encoding": "inplace",
        "label": "contract INFTGemMultiToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(Offer)16534_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISwapMeet.Offer[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Offer)16534_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Offer)16534_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISwapMeet.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)16534_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Offer)16534_storage": {
        "encoding": "inplace",
        "label": "struct ISwapMeet.Offer",
        "members": [
          {
            "astId": 16512,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16514,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "pool",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16516,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "gem",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16519,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "pools",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 16522,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "gems",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 16525,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "quantities",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 16527,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "listingFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16529,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "acceptFee",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 16531,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "references",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 16533,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "missingTokenPenalty",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Set)17312_storage": {
        "encoding": "inplace",
        "label": "struct UInt256Set.Set",
        "members": [
          {
            "astId": 17308,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "keyPointers",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 17311,
            "contract": "src/market/SwapMeet.sol:SwapMeet",
            "label": "keyList",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}