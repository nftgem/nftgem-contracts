{
  "address": "0x8dA6299C1369177b720F165Bb73279D71d538EB4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "ProposalClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalHash",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expDate",
          "type": "uint256"
        }
      ],
      "name": "ProposalFunded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "allProposals",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allProposalsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proposalData",
          "type": "address"
        },
        {
          "internalType": "enum IProposal.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_symbolHash",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7de213584bdaf4985f173a38d22a9eb146826a1b23f18ce641e6650f216012d9",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x8dA6299C1369177b720F165Bb73279D71d538EB4",
    "transactionIndex": 4,
    "gasUsed": "2145989",
    "logsBloom": "0x
    "blockHash": "0x0000204e0000062979ba066905c4977b179e7662fb37bf64c735c3a111d8d643",
    "transactionHash": "0x7de213584bdaf4985f173a38d22a9eb146826a1b23f18ce641e6650f216012d9",
    "logs": [],
    "blockNumber": 5771694,
    "cumulativeGasUsed": "2626829",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8cdaae598cbece381c3f70bdf245f22b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ProposalClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalHash\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expDate\",\"type\":\"uint256\"}],\"name\":\"ProposalFunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"allProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allProposalsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proposalData\",\"type\":\"address\"},{\"internalType\":\"enum IProposal.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_symbolHash\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"allProposals(uint256)\":{\"details\":\"get the proposal for this\"},\"allProposalsLength()\":{\"details\":\"number of quantized addresses\"},\"createProposal(address,string,address,uint8)\":{\"details\":\"deploy a new proposal using create2\"},\"getProposal(uint256)\":{\"details\":\"get the proposal for this\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Check if this address is a controller\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/factories/ProposalFactory.sol\":\"ProposalFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller) external override onlyController {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address) external view override returns (bool allowed) {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function relinquishControl() external view override onlyController {\\n        _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xd775053cec953f14832c8145de2f04f2259110a29accbc924f5dfe71ea85b095\",\"license\":\"MIT\"},\"src/factories/ProposalFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalFactory.sol\\\";\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"../libs/Create2.sol\\\";\\nimport \\\"../governance/GovernanceLib.sol\\\";\\nimport \\\"../governance/Proposal.sol\\\";\\n\\ncontract ProposalFactory is Controllable, IProposalFactory {\\n    address private operator;\\n\\n    mapping(uint256 => address) private _getProposal;\\n    address[] private _allProposals;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /**\\n     * @dev get the proposal for this\\n     */\\n    function getProposal(uint256 _symbolHash) external view override returns (address proposal) {\\n        proposal = _getProposal[_symbolHash];\\n    }\\n\\n    /**\\n     * @dev get the proposal for this\\n     */\\n    function allProposals(uint256 idx) external view override returns (address proposal) {\\n        proposal = _allProposals[idx];\\n    }\\n\\n    /**\\n     * @dev number of quantized addresses\\n     */\\n    function allProposalsLength() external view override returns (uint256 proposal) {\\n        proposal = _allProposals.length;\\n    }\\n\\n    /**\\n     * @dev deploy a new proposal using create2\\n     */\\n    function createProposal(\\n        address submitter,\\n        string memory title,\\n        address proposalData,\\n        IProposal.ProposalType proposalType\\n    ) external override onlyController returns (address payable proposal) {\\n\\n        // make sure this proposal doesnt already exist\\n        bytes32 salt = keccak256(abi.encodePacked(submitter, title));\\n        require(_getProposal[uint256(salt)] == address(0), \\\"PROPOSAL_EXISTS\\\"); // single check is sufficient\\n\\n        // create the quantized erc20 token using create2, which lets us determine the\\n        // quantized erc20 address of a token without interacting with the contract itself\\n        bytes memory bytecode = type(Proposal).creationCode;\\n\\n        // use create2 to deploy the quantized erc20 contract\\n        proposal = payable(Create2.deploy(0, salt, bytecode));\\n\\n        // initialize  the proposal with submitter, proposal type, and proposal data\\n        Proposal(proposal).initialize(submitter, title, proposalData, IProposal.ProposalType(proposalType));\\n\\n        // add teh new proposal to our lists for management\\n        _getProposal[uint256(salt)] = proposal;\\n        _allProposals.push(proposal);\\n\\n        // emit an event about the new proposal being created\\n        emit ProposalCreated(submitter, uint256(proposalType), proposal);\\n    }\\n}\\n\",\"keccak256\":\"0x5b3b1b6b9182a9f60bae815c24e79f9fe42075737445cbb06518072e6393025f\",\"license\":\"MIT\"},\"src/governance/GovernanceLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\nlibrary GovernanceLib {\\n    // calculates the CREATE2 address for the quantized erc20 without making any external calls\\n    function addressOfPropoal(\\n        address factory,\\n        address submitter,\\n        string memory title\\n    ) public pure returns (address govAddress) {\\n        govAddress = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(submitter, title)),\\n                        hex\\\"74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev create vote tokens to vote on given proposal\\n     */\\n    function createProposalVoteTokens(address multitoken, uint256 proposalHash) external {\\n        for (uint256 i = 0; i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0); i++) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(0, i);\\n            INFTGemMultiToken(multitoken).mint(holder, proposalHash, IERC1155(multitoken).balanceOf(holder, 0));\\n        }\\n    }\\n\\n    /**\\n     * @dev destroy the vote tokens for the given proposal\\n     */\\n    function destroyProposalVoteTokens(address multitoken, uint256 proposalHash) external {\\n        for (uint256 i = 0; i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0); i++) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(0, i);\\n            INFTGemMultiToken(multitoken).burn(\\n                holder,\\n                proposalHash,\\n                IERC1155(multitoken).balanceOf(holder, proposalHash)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev execute craete pool proposal\\n     */\\n    function execute(address factory, address proposalAddress) public returns (address newPool) {\\n        // get the data for the new pool from the proposal\\n        address proposalData = IProposal(proposalAddress).proposalData();\\n\\n        (\\n            string memory symbol,\\n            string memory name,\\n            uint256 ethPrice,\\n            uint256 minTime,\\n            uint256 maxTime,\\n            uint256 diffStep,\\n            uint256 maxClaims,\\n            address allowedToken\\n        ) = ICreatePoolProposalData(proposalData).data();\\n\\n        // create the new pool\\n        newPool = createPool(factory, symbol, name, ethPrice, minTime, maxTime, diffStep, maxClaims, allowedToken);\\n    }\\n\\n    /**\\n     * @dev create a new pool\\n     */\\n    function createPool(\\n        address factory,\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) public returns (address pool) {\\n        pool = INFTGemPoolFactory(factory).createNFTGemPool(\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            allowedToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xef5a1d8a1bf88bc6ee2da2fe34d1425eaeb3a4ec5ebc0598b124708d8c233f24\",\"license\":\"MIT\"},\"src/governance/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalFactory.sol\\\";\\nimport \\\"../tokens/ERC1155Holder.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\ncontract Proposal is Initializable, ERC1155Holder, IProposal {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant MONTH = 2592000;\\n    uint256 private constant PROPOSAL_COST = 1 ether;\\n\\n    string private _title;\\n    address private _creator;\\n    address private _funder;\\n    address private _multitoken;\\n    address private _governor;\\n    uint256 private _expiration;\\n\\n    address private _proposalData;\\n    ProposalType private _proposalType;\\n\\n    bool private _funded;\\n    bool private _executed;\\n    bool private _closed;\\n\\n    constructor() {}\\n\\n    function initialize(\\n        address __creator,\\n        string memory __title,\\n        address __proposalData,\\n        ProposalType __proposalType\\n    ) external override initializer {\\n        _title = __title;\\n        _creator = __creator;\\n        _proposalData = __proposalData;\\n        _proposalType = __proposalType;\\n    }\\n\\n    function setMultiToken(address token) external override {\\n        require(_multitoken == address(0), \\\"IMMUTABLE\\\");\\n        _multitoken = token;\\n    }\\n\\n    function setGovernor(address gov) external override {\\n        require(_governor == address(0), \\\"IMMUTABLE\\\");\\n        _governor = gov;\\n    }\\n\\n    function title() external view override returns (string memory) {\\n        return _title;\\n    }\\n\\n    function creator() external view override returns (address) {\\n        return _creator;\\n    }\\n\\n    function funder() external view override returns (address) {\\n        return _creator;\\n    }\\n\\n    function expiration() external view override returns (uint256) {\\n        return _expiration;\\n    }\\n\\n    function _status() internal view returns (ProposalStatus curCtatus) {\\n        curCtatus = ProposalStatus.ACTIVE;\\n        if (!_funded) {\\n            curCtatus = ProposalStatus.NOT_FUNDED;\\n        } else if (_executed) {\\n            curCtatus = ProposalStatus.EXECUTED;\\n        } else if (_closed) {\\n            curCtatus = ProposalStatus.CLOSED;\\n        } else {\\n            uint256 totalVotesSupply = INFTGemMultiToken(_multitoken).totalBalances(uint256(address(this)));\\n            uint256 totalVotesInFavor = IERC1155(_multitoken).balanceOf(address(this), uint256(address(this)));\\n            uint256 votesToPass = totalVotesSupply.div(2).add(1);\\n            curCtatus = totalVotesInFavor >= votesToPass ? ProposalStatus.PASSED : ProposalStatus.ACTIVE;\\n            if (block.timestamp > _expiration) {\\n                curCtatus = totalVotesInFavor >= votesToPass ? ProposalStatus.PASSED : ProposalStatus.FAILED;\\n            }\\n        }\\n    }\\n\\n    function status() external view override returns (ProposalStatus curCtatus) {\\n        curCtatus = _status();\\n    }\\n\\n    function proposalData() external view override returns (address) {\\n        return _proposalData;\\n    }\\n\\n    function proposalType() external view override returns (ProposalType) {\\n        return _proposalType;\\n    }\\n\\n    function fund() external payable override {\\n        // ensure we cannot fund while in an invalida state\\n        require(!_funded, \\\"ALREADY_FUNDED\\\");\\n        require(!_closed, \\\"ALREADY_CLOSED\\\");\\n        require(!_executed, \\\"ALREADY_EXECUTED\\\");\\n        require(msg.value >= PROPOSAL_COST, \\\"MISSING_FEE\\\");\\n\\n        // proposal is now funded and clock starts ticking\\n        _funded = true;\\n        _expiration = block.timestamp + MONTH;\\n        _funder = msg.sender;\\n\\n        // create the vote tokens that will be used to vote on the proposal.\\n        INFTGemGovernor(_governor).createProposalVoteTokens(uint256(address(this)));\\n\\n        // check for overpayment and if found then return remainder to user\\n        uint256 overpayAmount = msg.value.sub(PROPOSAL_COST);\\n        if (overpayAmount > 0) {\\n            (bool success, ) = payable(msg.sender).call{value: overpayAmount}(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    function execute() external override {\\n        // ensure we are funded and open and not executed\\n        require(_funded, \\\"NOT_FUNDED\\\");\\n        require(!_closed, \\\"IS_CLOSED\\\");\\n        require(!_executed, \\\"IS_EXECUTED\\\");\\n        require(_status() == ProposalStatus.PASSED, \\\"IS_FAILED\\\");\\n\\n        // create the vote tokens that will be used to vote on the proposal.\\n        INFTGemGovernor(_governor).executeProposal(address(this));\\n\\n        // this proposal is now executed\\n        _executed = true;\\n\\n        // dewstroy the now-useless vote tokens used to vote for this proposal\\n        INFTGemGovernor(_governor).destroyProposalVoteTokens(uint256(address(this)));\\n\\n        // refurn the filing fee to the funder of the proposal\\n        (bool success, ) = _funder.call{value: PROPOSAL_COST}(\\\"\\\");\\n        require(success, \\\"EXECUTE_FAILED\\\");\\n    }\\n\\n    function close() external override {\\n        // ensure we are funded and open and not executed\\n        require(_funded, \\\"NOT_FUNDED\\\");\\n        require(!_closed, \\\"IS_CLOSED\\\");\\n        require(!_executed, \\\"IS_EXECUTED\\\");\\n        require(block.timestamp > _expiration, \\\"IS_ACTIVE\\\");\\n        require(_status() == ProposalStatus.FAILED, \\\"IS_PASSED\\\");\\n\\n        // this proposal is now closed - no action was taken\\n        _closed = true;\\n\\n        // destroy the now-useless vote tokens used to vote for this proposal\\n        INFTGemGovernor(_governor).destroyProposalVoteTokens(uint256(address(this)));\\n\\n        // send the proposal funder their filing fee back\\n        (bool success, ) = _funder.call{value: PROPOSAL_COST}(\\\"\\\");\\n        require(success, \\\"EXECUTE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5b27e412df657447e8a9f9b9f94bc78ab34881b124a9963a60f6e1c8fcb0a7ec\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2f2d8600b126c9f7e41c2d3f94d9cf833ccd0312b74a9563c769743a192f81ca\",\"license\":\"MIT\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4dbd32ff92fed4943c7c6524a29c96430f5b8caf64691ea3089184377b92dff8\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory,\\n        address _swapHelper\\n    ) external;\\n\\n    function initialized() external returns (bool);\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external;\\n\\n    function issueInitialGovernanceTokens(address receiver) external returns (uint256);\\n\\n    function maybeIssueGovernanceToken(address receiver) external returns (uint256);\\n\\n    function issueFuelToken(address receiver, uint256 amount) external returns (uint256);\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createNewPoolProposal(\\n        address,\\n        string memory,\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x716d026badece2ce40b73568fa24b1cb836a4d828cb38697e48d9bed57e77beb\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder) external view returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function tokenHolders(uint256 _token) external view returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        uint8 tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash) external view returns (uint8, address);\\n}\\n\",\"keccak256\":\"0x3de65fa62e37e967b603553941f8894783de7922378875770429055642310f27\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 mintTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event CustomNFTGemPoolCreated(string gemSymbol, string gemName);\\n\\n    function nftGemPools() external view returns (address[] memory);\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createCustomNFTGemPool(\\n        bytes memory bytecode,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n\\n    function addCustomNFTGemPool(\\n        address poolAddress,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n\\n    function removeGemPool(uint256 poolHash) external;\\n\\n    function removeGemPoolAt(uint256 ndx) external;\\n}\\n\",\"keccak256\":\"0x0735030971f90401f1819c49451c6af66ef9cd9cf7ac5f2fca35e3b0ad19d477\",\"license\":\"MIT\"},\"src/interfaces/IProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposal {\\n    enum ProposalType {CREATE_POOL, FUND_PROJECT, CHANGE_FEE, UPDATE_ALLOWLIST}\\n\\n    enum ProposalStatus {NOT_FUNDED, ACTIVE, PASSED, FAILED, EXECUTED, CLOSED}\\n\\n    event ProposalCreated(address creator, address pool, uint256 proposalHash);\\n\\n    event ProposalExecuted(uint256 proposalHash);\\n\\n    event ProposalClosed(uint256 proposalHash);\\n\\n    function creator() external view returns (address);\\n\\n    function title() external view returns (string memory);\\n\\n    function funder() external view returns (address);\\n\\n    function expiration() external view returns (uint256);\\n\\n    function status() external view returns (ProposalStatus);\\n\\n    function proposalData() external view returns (address);\\n\\n    function proposalType() external view returns (ProposalType);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address gov) external;\\n\\n    function fund() external payable;\\n\\n    function execute() external;\\n\\n    function close() external;\\n\\n    function initialize(\\n        address,\\n        string memory,\\n        address,\\n        ProposalType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5913ecf90344d4b65cf8a2d9e321b95ff6a7a65efb775c5a947ff63c28933146\",\"license\":\"MIT\"},\"src/interfaces/IProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ICreatePoolProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n\\n            address\\n        );\\n}\\n\\ninterface IChangeFeeProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\\ninterface IFundProjectProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        );\\n}\\n\\ninterface IUpdateAllowlistProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x421398d5113f97d0bbdb364ace977f1c51599c10972feb11e1ff994ea1eca86e\",\"license\":\"MIT\"},\"src/interfaces/IProposalFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n\\nimport \\\"./IProposal.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposalFactory {\\n    /**\\n     * @dev emitted when a new gem pool proposal has been added to the system\\n     */\\n    event ProposalCreated(address creator, uint256 proposalType, address proposal);\\n\\n    event ProposalFunded(uint256 indexed proposalHash, address indexed funder, uint256 expDate);\\n\\n    event ProposalExecuted(uint256 indexed proposalHash, address pool);\\n\\n    event ProposalClosed(uint256 indexed proposalHash, address pool);\\n\\n    function getProposal(uint256 _symbolHash) external view returns (address);\\n\\n    function allProposals(uint256 idx) external view returns (address);\\n\\n    function allProposalsLength() external view returns (uint256);\\n\\n    function createProposal(\\n        address submitter,\\n        string memory title,\\n        address proposalData,\\n        IProposal.ProposalType proposalType\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0x410b8cec0a372d436c4e4139d009e067cfee5391ba99ff77fc10f56470bc588d\",\"license\":\"MIT\"},\"src/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor() {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x15bfd50d966a81b175c274590675b1fce1235d233502004005916c9ce564798e\",\"license\":\"MIT\"},\"src/libs/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x5ba9948f2d0fa1e5c4ecd4fbd3cdc836e6c26e07375c4d0482593291e649a072\",\"license\":\"MIT\"},\"src/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x688b57d8a4d5b6221b74de43b603ac03191e89f278c361ea7ceb257268882c4b\",\"license\":\"MIT\"},\"src/tokens/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x49e15074f8a57b5d5667525d0969959e4c046d1be9a2c7fd9728b9f544cd6572\",\"license\":\"MIT\"},\"src/tokens/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC1155Receiver.sol\\\";\\nimport \\\"../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n                ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3bd66ee80963e46b0c88bb3fb9c48c8382106a12f9d182d7f6c9c682b2190850\",\"license\":\"MIT\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x449514510d4ad1b6d147c8e25e9c9e2f7652ead618c4ed1b8021ce128778fad1\",\"license\":\"MIT\"},\"src/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xdda65747b0bb97e8f0cf0e3bb767d4de43420edf302dd11008536ba2aecf46a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610043565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6125c3806100526000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b429afeb1161005b578063b429afeb146101de578063c7f758a814610225578063de8431e614610242578063e1c28bef1461025c5761007d565b80634c30007614610082578063938351b81461018c578063a7fc7a07146101a9575b600080fd5b6101636004803603608081101561009857600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156100d057600080fd5b8201836020820111156100e257600080fd5b8035906020019184600183028401116401000000008311171561010457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050813573ffffffffffffffffffffffffffffffffffffffff169250506020013560ff16610264565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610163600480360360208110156101a257600080fd5b50356106c5565b6101dc600480360360208110156101bf57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106fc565b005b610211600480360360208110156101f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166107c2565b604080519115158252519081900360200190f35b6101636004803603602081101561023b57600080fd5b50356107ed565b61024a610815565b60408051918252519081900360200190f35b6101dc61081b565b3360009081526020819052604081205460ff1615156001148061028657503033145b6102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806125666028913960400191505060405180910390fd5b60008585604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b815260140182805190602001908083835b6020831061034e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610311565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905260408051929094018281037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018352845281519181019190912060008181526002909252929020549195505073ffffffffffffffffffffffffffffffffffffffff1615925061045991505057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f50524f504f53414c5f4558495354530000000000000000000000000000000000604482015290519081900360640190fd5b60606040518060200161046b90610a11565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660405290506104aa6000838361089d565b92508273ffffffffffffffffffffffffffffffffffffffff1663113805ed888888886040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001806020018473ffffffffffffffffffffffffffffffffffffffff16815260200183600381111561052757fe5b8152602001828103825285818151815260200191508051906020019080838360005b83811015610561578181015183820152602001610549565b50505050905090810190601f16801561058e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156105b057600080fd5b505af11580156105c4573d6000803e3d6000fd5b5050506000838152600260205260408120805473ffffffffffffffffffffffffffffffffffffffff87167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925560038054600181018255938190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b909301805490911690911790557fe669ca381c47a2c25df06ebbe580c111183f1e92460fd3ab51050d2306b3402791508890869081111561068357fe5b6040805173ffffffffffffffffffffffffffffffffffffffff938416815260208101929092529186168183015290519081900360600190a15050949350505050565b6000600382815481106106d457fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b3360009081526020819052604090205460ff1615156001148061071e57503033145b610773576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806125666028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60035490565b3360009081526020819052604090205460ff1615156001148061083d57503033145b610892576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806125666028913960400191505060405180910390fd5b336000908152602052565b6000808447101561090f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b825161097c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff8116610a0957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b949350505050565b611b4780610a1f8339019056fe608060405234801561001057600080fd5b506100216301ffc9a760e01b610036565b610031630271189760e51b610036565b6100bd565b6001600160e01b03198082161415610095576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b611a7b806100cc6000396000f3fe6080604052600436106100f35760003560e01c80634665096d1161008a578063bc197c8111610059578063bc197c81146103d9578063c42cf535146105ef578063d104f8f51461062f578063f23a6e611461066f576100f3565b80634665096d1461030b5780634a79d50c1461033257806361461954146103bc578063b60d4288146103d1576100f3565b8063200d2ed2116100c6578063200d2ed214610286578063351d9f96146102bc5780634258292f146102e157806343d726d6146102f6576100f3565b806301ffc9a7146100f857806302d05d3f14610158578063041ae88014610158578063113805ed14610196575b600080fd5b34801561010457600080fd5b506101446004803603602081101561011b57600080fd5b50357fffffffff0000000000000000000000000000000000000000000000000000000016610754565b604080519115158252519081900360200190f35b34801561016457600080fd5b5061016d61078b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101a257600080fd5b50610284600480360360808110156101b957600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156101f157600080fd5b82018360208201111561020357600080fd5b8035906020019184600183028401116401000000008311171561022557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050813573ffffffffffffffffffffffffffffffffffffffff169250506020013560ff166107a8565b005b34801561029257600080fd5b5061029b61095a565b604051808260058111156102ab57fe5b815260200191505060405180910390f35b3480156102c857600080fd5b506102d1610969565b604051808260038111156102ab57fe5b3480156102ed57600080fd5b5061016d61098a565b34801561030257600080fd5b506102846109a6565b34801561031757600080fd5b50610320610d46565b60408051918252519081900360200190f35b34801561033e57600080fd5b50610347610d4c565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610381578181015183820152602001610369565b50505050905090810190601f1680156103ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103c857600080fd5b50610284610dfd565b6102846110f6565b3480156103e557600080fd5b506105ba600480360360a08110156103fc57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169181019060608101604082013564010000000081111561043d57600080fd5b82018360208201111561044f57600080fd5b8035906020019184602083028401116401000000008311171561047157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156104c157600080fd5b8201836020820111156104d357600080fd5b803590602001918460208302840111640100000000831117156104f557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561054557600080fd5b82018360208201111561055757600080fd5b8035906020019184600183028401116401000000008311171561057957600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061146d945050505050565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b3480156105fb57600080fd5b506102846004803603602081101561061257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611497565b34801561063b57600080fd5b506102846004803603602081101561065257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611549565b34801561067b57600080fd5b506105ba600480360360a081101561069257600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169160408201359160608101359181019060a0810160808201356401000000008111156106df57600080fd5b8201836020820111156106f157600080fd5b8035906020019184600183028401116401000000008311171561071357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506115fb945050505050565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526001602052604090205460ff1690565b60035473ffffffffffffffffffffffffffffffffffffffff165b90565b600054610100900460ff16806107c157506107c1611625565b806107cf575060005460ff16155b61080a5760405162461bcd60e51b815260040180806020018281038252602e815260200180611a18602e913960400191505060405180910390fd5b600054610100900460ff1615801561087057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b8351610883906002906020870190611984565b506003805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617835560088054918716919092161780825584927fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909116907401000000000000000000000000000000000000000090849081111561091f57fe5b0217905550801561095357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050565b6000610964611636565b905090565b60085474010000000000000000000000000000000000000000900460ff1690565b60085473ffffffffffffffffffffffffffffffffffffffff1690565b6008547501000000000000000000000000000000000000000000900460ff16610a16576040805162461bcd60e51b815260206004820152600a60248201527f4e4f545f46554e44454400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60085477010000000000000000000000000000000000000000000000900460ff1615610a89576040805162461bcd60e51b815260206004820152600960248201527f49535f434c4f5345440000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600854760100000000000000000000000000000000000000000000900460ff1615610afb576040805162461bcd60e51b815260206004820152600b60248201527f49535f4558454355544544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6007544211610b51576040805162461bcd60e51b815260206004820152600960248201527f49535f4143544956450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6003610b5b611636565b6005811115610b6657fe5b14610bb8576040805162461bcd60e51b815260206004820152600960248201527f49535f5041535345440000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600880547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff1677010000000000000000000000000000000000000000000000179055600654604080517fdac7f24d000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163dac7f24d9160248082019260009290919082900301818387803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b50506004546040516000935073ffffffffffffffffffffffffffffffffffffffff9091169150670de0b6b3a7640000908381818185875af1925050503d8060008114610ce8576040519150601f19603f3d011682016040523d82523d6000602084013e610ced565b606091505b5050905080610d43576040805162461bcd60e51b815260206004820152600e60248201527f455845435554455f4641494c4544000000000000000000000000000000000000604482015290519081900360640190fd5b50565b60075490565b60028054604080516020601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941685900493840181900481028201810190925282815260609390929091830182828015610df35780601f10610dc857610100808354040283529160200191610df3565b820191906000526020600020905b815481529060010190602001808311610dd657829003601f168201915b5050505050905090565b6008547501000000000000000000000000000000000000000000900460ff16610e6d576040805162461bcd60e51b815260206004820152600a60248201527f4e4f545f46554e44454400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60085477010000000000000000000000000000000000000000000000900460ff1615610ee0576040805162461bcd60e51b815260206004820152600960248201527f49535f434c4f5345440000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600854760100000000000000000000000000000000000000000000900460ff1615610f52576040805162461bcd60e51b815260206004820152600b60248201527f49535f4558454355544544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6002610f5c611636565b6005811115610f6757fe5b14610fb9576040805162461bcd60e51b815260206004820152600960248201527f49535f4641494c45440000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600654604080517fa67a03ab000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163a67a03ab9160248082019260009290919082900301818387803b15801561102b57600080fd5b505af115801561103f573d6000803e3d6000fd5b5050600880547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000001790555050600654604080517fdac7f24d000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163dac7f24d9160248082019260009290919082900301818387803b158015610c6c57600080fd5b6008547501000000000000000000000000000000000000000000900460ff1615611167576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f46554e444544000000000000000000000000000000000000604482015290519081900360640190fd5b60085477010000000000000000000000000000000000000000000000900460ff16156111da576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f434c4f534544000000000000000000000000000000000000604482015290519081900360640190fd5b600854760100000000000000000000000000000000000000000000900460ff161561124c576040805162461bcd60e51b815260206004820152601060248201527f414c52454144595f455845435554454400000000000000000000000000000000604482015290519081900360640190fd5b670de0b6b3a76400003410156112a9576040805162461bcd60e51b815260206004820152600b60248201527f4d495353494e475f464545000000000000000000000000000000000000000000604482015290519081900360640190fd5b600880547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790554262278d0001600755600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001633178155600654604080517f1e4ad6a200000000000000000000000000000000000000000000000000000000815230938101939093525173ffffffffffffffffffffffffffffffffffffffff9190911691631e4ad6a291602480830192600092919082900301818387803b15801561138f57600080fd5b505af11580156113a3573d6000803e3d6000fd5b5050505060006113c4670de0b6b3a76400003461185990919063ffffffff16565b90508015610d4357604051600090339083908381818185875af1925050503d806000811461140e576040519150601f19603f3d011682016040523d82523d6000602084013e611413565b606091505b5050905080611469576040805162461bcd60e51b815260206004820152600d60248201527f524546554e445f4641494c454400000000000000000000000000000000000000604482015290519081900360640190fd5b5050565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b60065473ffffffffffffffffffffffffffffffffffffffff1615611502576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60055473ffffffffffffffffffffffffffffffffffffffff16156115b4576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b6000611630306118b6565b15905090565b6008546001907501000000000000000000000000000000000000000000900460ff16611664575060006107a5565b600854760100000000000000000000000000000000000000000000900460ff1615611691575060046107a5565b60085477010000000000000000000000000000000000000000000000900460ff16156116bf575060056107a5565b600554604080517fed7aae2b000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff169163ed7aae2b916024808301926020929190829003018186803b15801561173057600080fd5b505afa158015611744573d6000803e3d6000fd5b505050506040513d602081101561175a57600080fd5b5051600554604080517efdd58e00000000000000000000000000000000000000000000000000000000815230600482018190526024820152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169162fdd58e91604480820192602092909190829003018186803b1580156117d857600080fd5b505afa1580156117ec573d6000803e3d6000fd5b505050506040513d602081101561180257600080fd5b50519050600061181e60016118188560026118bc565b90611923565b90508082101561182f576001611832565b60025b9350600754421115611853578082101561184d576003611850565b60025b93505b50505090565b6000828211156118b0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b3b151590565b6000808211611912576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161191b57fe5b049392505050565b60008282018381101561197d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119c557805160ff19168380011785556119f2565b828001600101855582156119f2579182015b828111156119f25782518255916020019190600101906119d7565b506119fe929150611a02565b5090565b5b808211156119fe5760008155600101611a0356fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a2646970667358221220398276424b54e26ca8167d5e3b2b46339e4cb6331499c1d1ccf37f2d67fbf48964736f6c63430007030033436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a26469706673582212206ee5072a821184cfdc49c49d89875b85130da1ed9c5911981c9e85291e8fa03564736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b429afeb1161005b578063b429afeb146101de578063c7f758a814610225578063de8431e614610242578063e1c28bef1461025c5761007d565b80634c30007614610082578063938351b81461018c578063a7fc7a07146101a9575b600080fd5b6101636004803603608081101561009857600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156100d057600080fd5b8201836020820111156100e257600080fd5b8035906020019184600183028401116401000000008311171561010457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050813573ffffffffffffffffffffffffffffffffffffffff169250506020013560ff16610264565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610163600480360360208110156101a257600080fd5b50356106c5565b6101dc600480360360208110156101bf57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106fc565b005b610211600480360360208110156101f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166107c2565b604080519115158252519081900360200190f35b6101636004803603602081101561023b57600080fd5b50356107ed565b61024a610815565b60408051918252519081900360200190f35b6101dc61081b565b3360009081526020819052604081205460ff1615156001148061028657503033145b6102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806125666028913960400191505060405180910390fd5b60008585604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b815260140182805190602001908083835b6020831061034e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610311565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905260408051929094018281037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018352845281519181019190912060008181526002909252929020549195505073ffffffffffffffffffffffffffffffffffffffff1615925061045991505057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f50524f504f53414c5f4558495354530000000000000000000000000000000000604482015290519081900360640190fd5b60606040518060200161046b90610a11565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660405290506104aa6000838361089d565b92508273ffffffffffffffffffffffffffffffffffffffff1663113805ed888888886040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001806020018473ffffffffffffffffffffffffffffffffffffffff16815260200183600381111561052757fe5b8152602001828103825285818151815260200191508051906020019080838360005b83811015610561578181015183820152602001610549565b50505050905090810190601f16801561058e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156105b057600080fd5b505af11580156105c4573d6000803e3d6000fd5b5050506000838152600260205260408120805473ffffffffffffffffffffffffffffffffffffffff87167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925560038054600181018255938190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b909301805490911690911790557fe669ca381c47a2c25df06ebbe580c111183f1e92460fd3ab51050d2306b3402791508890869081111561068357fe5b6040805173ffffffffffffffffffffffffffffffffffffffff938416815260208101929092529186168183015290519081900360600190a15050949350505050565b6000600382815481106106d457fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b3360009081526020819052604090205460ff1615156001148061071e57503033145b610773576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806125666028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60035490565b3360009081526020819052604090205460ff1615156001148061083d57503033145b610892576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806125666028913960400191505060405180910390fd5b336000908152602052565b6000808447101561090f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b825161097c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff8116610a0957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b949350505050565b611b4780610a1f8339019056fe608060405234801561001057600080fd5b506100216301ffc9a760e01b610036565b610031630271189760e51b610036565b6100bd565b6001600160e01b03198082161415610095576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b611a7b806100cc6000396000f3fe6080604052600436106100f35760003560e01c80634665096d1161008a578063bc197c8111610059578063bc197c81146103d9578063c42cf535146105ef578063d104f8f51461062f578063f23a6e611461066f576100f3565b80634665096d1461030b5780634a79d50c1461033257806361461954146103bc578063b60d4288146103d1576100f3565b8063200d2ed2116100c6578063200d2ed214610286578063351d9f96146102bc5780634258292f146102e157806343d726d6146102f6576100f3565b806301ffc9a7146100f857806302d05d3f14610158578063041ae88014610158578063113805ed14610196575b600080fd5b34801561010457600080fd5b506101446004803603602081101561011b57600080fd5b50357fffffffff0000000000000000000000000000000000000000000000000000000016610754565b604080519115158252519081900360200190f35b34801561016457600080fd5b5061016d61078b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101a257600080fd5b50610284600480360360808110156101b957600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156101f157600080fd5b82018360208201111561020357600080fd5b8035906020019184600183028401116401000000008311171561022557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050813573ffffffffffffffffffffffffffffffffffffffff169250506020013560ff166107a8565b005b34801561029257600080fd5b5061029b61095a565b604051808260058111156102ab57fe5b815260200191505060405180910390f35b3480156102c857600080fd5b506102d1610969565b604051808260038111156102ab57fe5b3480156102ed57600080fd5b5061016d61098a565b34801561030257600080fd5b506102846109a6565b34801561031757600080fd5b50610320610d46565b60408051918252519081900360200190f35b34801561033e57600080fd5b50610347610d4c565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610381578181015183820152602001610369565b50505050905090810190601f1680156103ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103c857600080fd5b50610284610dfd565b6102846110f6565b3480156103e557600080fd5b506105ba600480360360a08110156103fc57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169181019060608101604082013564010000000081111561043d57600080fd5b82018360208201111561044f57600080fd5b8035906020019184602083028401116401000000008311171561047157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156104c157600080fd5b8201836020820111156104d357600080fd5b803590602001918460208302840111640100000000831117156104f557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561054557600080fd5b82018360208201111561055757600080fd5b8035906020019184600183028401116401000000008311171561057957600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061146d945050505050565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b3480156105fb57600080fd5b506102846004803603602081101561061257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611497565b34801561063b57600080fd5b506102846004803603602081101561065257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611549565b34801561067b57600080fd5b506105ba600480360360a081101561069257600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169160408201359160608101359181019060a0810160808201356401000000008111156106df57600080fd5b8201836020820111156106f157600080fd5b8035906020019184600183028401116401000000008311171561071357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506115fb945050505050565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526001602052604090205460ff1690565b60035473ffffffffffffffffffffffffffffffffffffffff165b90565b600054610100900460ff16806107c157506107c1611625565b806107cf575060005460ff16155b61080a5760405162461bcd60e51b815260040180806020018281038252602e815260200180611a18602e913960400191505060405180910390fd5b600054610100900460ff1615801561087057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b8351610883906002906020870190611984565b506003805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617835560088054918716919092161780825584927fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909116907401000000000000000000000000000000000000000090849081111561091f57fe5b0217905550801561095357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050565b6000610964611636565b905090565b60085474010000000000000000000000000000000000000000900460ff1690565b60085473ffffffffffffffffffffffffffffffffffffffff1690565b6008547501000000000000000000000000000000000000000000900460ff16610a16576040805162461bcd60e51b815260206004820152600a60248201527f4e4f545f46554e44454400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60085477010000000000000000000000000000000000000000000000900460ff1615610a89576040805162461bcd60e51b815260206004820152600960248201527f49535f434c4f5345440000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600854760100000000000000000000000000000000000000000000900460ff1615610afb576040805162461bcd60e51b815260206004820152600b60248201527f49535f4558454355544544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6007544211610b51576040805162461bcd60e51b815260206004820152600960248201527f49535f4143544956450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6003610b5b611636565b6005811115610b6657fe5b14610bb8576040805162461bcd60e51b815260206004820152600960248201527f49535f5041535345440000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600880547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff1677010000000000000000000000000000000000000000000000179055600654604080517fdac7f24d000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163dac7f24d9160248082019260009290919082900301818387803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b50506004546040516000935073ffffffffffffffffffffffffffffffffffffffff9091169150670de0b6b3a7640000908381818185875af1925050503d8060008114610ce8576040519150601f19603f3d011682016040523d82523d6000602084013e610ced565b606091505b5050905080610d43576040805162461bcd60e51b815260206004820152600e60248201527f455845435554455f4641494c4544000000000000000000000000000000000000604482015290519081900360640190fd5b50565b60075490565b60028054604080516020601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941685900493840181900481028201810190925282815260609390929091830182828015610df35780601f10610dc857610100808354040283529160200191610df3565b820191906000526020600020905b815481529060010190602001808311610dd657829003601f168201915b5050505050905090565b6008547501000000000000000000000000000000000000000000900460ff16610e6d576040805162461bcd60e51b815260206004820152600a60248201527f4e4f545f46554e44454400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60085477010000000000000000000000000000000000000000000000900460ff1615610ee0576040805162461bcd60e51b815260206004820152600960248201527f49535f434c4f5345440000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600854760100000000000000000000000000000000000000000000900460ff1615610f52576040805162461bcd60e51b815260206004820152600b60248201527f49535f4558454355544544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6002610f5c611636565b6005811115610f6757fe5b14610fb9576040805162461bcd60e51b815260206004820152600960248201527f49535f4641494c45440000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600654604080517fa67a03ab000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163a67a03ab9160248082019260009290919082900301818387803b15801561102b57600080fd5b505af115801561103f573d6000803e3d6000fd5b5050600880547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000001790555050600654604080517fdac7f24d000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163dac7f24d9160248082019260009290919082900301818387803b158015610c6c57600080fd5b6008547501000000000000000000000000000000000000000000900460ff1615611167576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f46554e444544000000000000000000000000000000000000604482015290519081900360640190fd5b60085477010000000000000000000000000000000000000000000000900460ff16156111da576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f434c4f534544000000000000000000000000000000000000604482015290519081900360640190fd5b600854760100000000000000000000000000000000000000000000900460ff161561124c576040805162461bcd60e51b815260206004820152601060248201527f414c52454144595f455845435554454400000000000000000000000000000000604482015290519081900360640190fd5b670de0b6b3a76400003410156112a9576040805162461bcd60e51b815260206004820152600b60248201527f4d495353494e475f464545000000000000000000000000000000000000000000604482015290519081900360640190fd5b600880547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790554262278d0001600755600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001633178155600654604080517f1e4ad6a200000000000000000000000000000000000000000000000000000000815230938101939093525173ffffffffffffffffffffffffffffffffffffffff9190911691631e4ad6a291602480830192600092919082900301818387803b15801561138f57600080fd5b505af11580156113a3573d6000803e3d6000fd5b5050505060006113c4670de0b6b3a76400003461185990919063ffffffff16565b90508015610d4357604051600090339083908381818185875af1925050503d806000811461140e576040519150601f19603f3d011682016040523d82523d6000602084013e611413565b606091505b5050905080611469576040805162461bcd60e51b815260206004820152600d60248201527f524546554e445f4641494c454400000000000000000000000000000000000000604482015290519081900360640190fd5b5050565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b60065473ffffffffffffffffffffffffffffffffffffffff1615611502576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60055473ffffffffffffffffffffffffffffffffffffffff16156115b4576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b6000611630306118b6565b15905090565b6008546001907501000000000000000000000000000000000000000000900460ff16611664575060006107a5565b600854760100000000000000000000000000000000000000000000900460ff1615611691575060046107a5565b60085477010000000000000000000000000000000000000000000000900460ff16156116bf575060056107a5565b600554604080517fed7aae2b000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff169163ed7aae2b916024808301926020929190829003018186803b15801561173057600080fd5b505afa158015611744573d6000803e3d6000fd5b505050506040513d602081101561175a57600080fd5b5051600554604080517efdd58e00000000000000000000000000000000000000000000000000000000815230600482018190526024820152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169162fdd58e91604480820192602092909190829003018186803b1580156117d857600080fd5b505afa1580156117ec573d6000803e3d6000fd5b505050506040513d602081101561180257600080fd5b50519050600061181e60016118188560026118bc565b90611923565b90508082101561182f576001611832565b60025b9350600754421115611853578082101561184d576003611850565b60025b93505b50505090565b6000828211156118b0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b3b151590565b6000808211611912576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161191b57fe5b049392505050565b60008282018381101561197d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119c557805160ff19168380011785556119f2565b828001600101855582156119f2579182015b828111156119f25782518255916020019190600101906119d7565b506119fe929150611a02565b5090565b5b808211156119fe5760008155600101611a0356fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a2646970667358221220398276424b54e26ca8167d5e3b2b46339e4cb6331499c1d1ccf37f2d67fbf48964736f6c63430007030033436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a26469706673582212206ee5072a821184cfdc49c49d89875b85130da1ed9c5911981c9e85291e8fa03564736f6c63430007030033",
  "libraries": {
    "GovernanceLib": "0x9eAc2A20bFB02a065b5B721109Ce51D4730B9e92",
    "Strings": "0xe98D76f55e5Dae2DE566CC8Aa1a36282742eabf7",
    "SafeMath": "0x753f0df0a61c5F8A0eB31c6Bf6e7363943Eb225B",
    "AddressSet": "0x86fca4de79B7DA4138cB961e0ce32FF17Bb1e3B3",
    "UInt256Set": "0xA7A95c6BA39DA9747ae1fE7C64e4E7ad00dCFD73",
    "Create2": "0x117f8511d54E60dE2F1C63F0Ac1c7C05473cdAa4",
    "ProposalsLib": "0xab14bBF2998944255052bdBE1258cb863D330A4e",
    "ComplexPoolLib": "0x819e15b3A3f4F36965d1a3994060398A5CAa02B6",
    "WrappedTokenLib": "0x2a12942218Ddf38d951A5B107460F6295c758Fc8"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "allProposals(uint256)": {
        "details": "get the proposal for this"
      },
      "allProposalsLength()": {
        "details": "number of quantized addresses"
      },
      "createProposal(address,string,address,uint8)": {
        "details": "deploy a new proposal using create2"
      },
      "getProposal(uint256)": {
        "details": "get the proposal for this"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Check if this address is a controller"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10169,
        "contract": "src/factories/ProposalFactory.sol:ProposalFactory",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11041,
        "contract": "src/factories/ProposalFactory.sol:ProposalFactory",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11045,
        "contract": "src/factories/ProposalFactory.sol:ProposalFactory",
        "label": "_getProposal",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11048,
        "contract": "src/factories/ProposalFactory.sol:ProposalFactory",
        "label": "_allProposals",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}