{
  "address": "0x90420eB1655248E7E016921268e275B0c95aAcf0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "erc1155Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "Unwrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "Wrap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3510f2ee810e0ddf5825e89ffa33bf3cf7f33dbd2625aada78d482fe7f7ede6",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x90420eB1655248E7E016921268e275B0c95aAcf0",
    "transactionIndex": 2,
    "gasUsed": "1562014",
    "logsBloom": "0x
    "blockHash": "0x00002050000000112fde9645daaae662297fa46cf165508fcd8a738bbdd7003b",
    "transactionHash": "0xe3510f2ee810e0ddf5825e89ffa33bf3cf7f33dbd2625aada78d482fe7f7ede6",
    "logs": [],
    "blockNumber": 5772606,
    "cumulativeGasUsed": "4366937",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Bitlootbox Governance",
    "BLBX",
    "0xA7c24AC002f26734Af14426e6dB0418B69124A91",
    "0xf2feb91337c70a8f74E2DCa3efA61B36D0921087"
  ],
  "solcInputHash": "8cdaae598cbece381c3f70bdf245f22b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"erc1155Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"Wrap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getReserves()\":{\"details\":\"get reserves held in wrapper\"},\"getTokenAddress()\":{\"details\":\"get the token address this wrapper is bound to\"},\"getTokenId()\":{\"details\":\"get the token id this wrapper is bound to\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(string,string,address,address,uint8)\":{\"details\":\"initialize is a stub because this class is deployed by us with constructor params\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"unwrap(uint256)\":{\"details\":\"unwrap a quantity of wrapped erc20 governance to erc1155\"},\"wrap(uint256)\":{\"details\":\"wrap a quantity of erc1155 governance to erc20\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/NFTGemERC20Governance.sol\":\"NFTGemWrappedERC20Governance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4dbd32ff92fed4943c7c6524a29c96430f5b8caf64691ea3089184377b92dff8\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6be5c98231ba90ad43bcf7dad027c1a1e7787220565aa3bb24becace05825664\",\"license\":\"MIT\"},\"src/interfaces/IERC20WrappedERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20WrappedERC1155 {\\n    function wrap(uint256 quantity) external;\\n\\n    function unwrap(uint256 quantity) external;\\n\\n    function getReserves() external returns (uint256);\\n\\n    function getTokenAddress() external returns (address);\\n\\n    function getTokenId() external returns (uint256);\\n\\n    event Wrap(address indexed account, uint256 quantity);\\n    event Unwrap(address indexed account, uint256 quantity);\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        address,\\n        address,\\n        uint8\\n    ) external;\\n}\\n\",\"keccak256\":\"0x645ade89440c8aecafe3087eeec3af771398018212a32ba66de6932cde9cf3e0\",\"license\":\"MIT\"},\"src/interfaces/IERC20WrappedGem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC20WrappedERC1155.sol\\\";\\n\\n/**\\n * @dev A wrapped gem is an erc20 wrapper around an erc1155 token type\\n */\\ninterface IERC20WrappedGem is IERC20WrappedERC1155 {\\n\\n}\\n\",\"keccak256\":\"0xbb36a888b2e858a1ccc8e6b11cc996f1c15b827d57433a86427e952d423f02fe\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTComplexGemPoolData {\\n    function addInputRequirement(\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool burn\\n    ) external;\\n\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool burn\\n    ) external;\\n\\n    function allInputRequirementsLength() external returns (uint256);\\n\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint8,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function settings()\\n        external\\n        view\\n        returns (\\n            string memory symbol,\\n            string memory name,\\n            string memory description,\\n            uint256 category,\\n            uint256 ethPrice,\\n            uint256 minTime,\\n            uint256 maxTime,\\n            uint256 diffStep,\\n            uint256 macClaims,\\n            uint256 maxQuantityPerClaim,\\n            uint256 maxClaimsPerAccount\\n        );\\n\\n    function stats()\\n        external\\n        view\\n        returns (\\n            bool visible,\\n            uint256 claimedCount,\\n            uint256 mintedCount,\\n            uint256 totalStakedEth,\\n            uint256 nextClaimHash,\\n            uint256 nextGemHash,\\n            uint256 nextClaimId,\\n            uint256 nextGemId\\n        );\\n\\n    function claim(uint256 claimHash)\\n        external\\n        view\\n        returns (\\n            uint256 claimAmount,\\n            uint256 claimQuantity,\\n            uint256 claimUnlockTime,\\n            uint256 claimTokenAmount,\\n            address stakedToken,\\n            uint256 nextClaimId\\n        );\\n\\n    function token(uint256 tokenHash) external view returns (uint8 tokenType, uint256 tokenId);\\n\\n    function addLegacyToken(\\n        address token,\\n        uint8 tokenType,\\n        uint256 tokenHash,\\n        uint256 tokenId,\\n        address recipient,\\n        uint256 quantity\\n    ) external;\\n\\n    function setToken(\\n        uint256 tokenHash,\\n        uint8 tokenType,\\n        uint256 tokenId\\n    ) external;\\n\\n    function setNextIds(uint256 nextClaimId, uint256 nextGemId) external;\\n\\n    function tokenHashes() external view returns (uint256[] memory);\\n\\n    function setTokenHashes(uint256[] memory tokenHashes) external;\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function minTime() external view returns (uint256);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function difficultyStep() external view returns (uint256);\\n\\n    function maxClaims() external view returns (uint256);\\n\\n    function setVisible(bool visible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 category) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setDescription(string memory description) external;\\n\\n    function description() external view returns (string memory);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function maxQuantityPerClaim() external view returns (uint256);\\n\\n    function maxClaimsPerAccount() external view returns (uint256);\\n\\n    function setMaxQuantityPerClaim(uint256 claimId) external;\\n\\n    function setMaxClaimsPerAccount(uint256 claimId) external;\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function gemClaimHash(uint256 gemHash) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address tkn) external view returns (bool);\\n\\n    function addAllowedToken(address tkn) external;\\n\\n    function removeAllowedToken(address tkn) external;\\n}\\n\",\"keccak256\":\"0xa2b200abfcac8d623cccb589ad42a3d0550ca33ba2c4acbd8da6251d538f40d8\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemFeeManager {\\n    event DefaultFeeDivisorChanged(address indexed operator, uint256 oldValue, uint256 value);\\n    event FeeDivisorChanged(address indexed operator, address indexed token, uint256 oldValue, uint256 value);\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n    event LiquidityChanged(address indexed manager, uint256 oldValue, uint256 value);\\n\\n    function liquidity(address token) external view returns (uint256);\\n\\n    function defaultLiquidity() external view returns (uint256);\\n\\n    function setDefaultLiquidity(uint256 _liquidityMult) external returns (uint256);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor) external returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor) external returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x29f10c923add51ed93bea2cb210c02fa4580f23e687113153f4f1aa3ff8a3e8e\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder) external view returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function tokenHolders(uint256 _token) external view returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        uint8 tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash) external view returns (uint8, address);\\n}\\n\",\"keccak256\":\"0x3de65fa62e37e967b603553941f8894783de7922378875770429055642310f27\",\"license\":\"MIT\"},\"src/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor() {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x15bfd50d966a81b175c274590675b1fce1235d233502004005916c9ce564798e\",\"license\":\"MIT\"},\"src/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x688b57d8a4d5b6221b74de43b603ac03191e89f278c361ea7ceb257268882c4b\",\"license\":\"MIT\"},\"src/tokens/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x49e15074f8a57b5d5667525d0969959e4c046d1be9a2c7fd9728b9f544cd6572\",\"license\":\"MIT\"},\"src/tokens/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC1155Receiver.sol\\\";\\nimport \\\"../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n                ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3bd66ee80963e46b0c88bb3fb9c48c8382106a12f9d182d7f6c9c682b2190850\",\"license\":\"MIT\"},\"src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x49f98bd1cc77a303376bc213068557fadcf311e069fc34be5f7cb8ab87772608\",\"license\":\"MIT\"},\"src/tokens/ERC20WrappedERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/IERC20WrappedERC1155.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./ERC1155Holder.sol\\\";\\nimport \\\"./WrappedTokenLib.sol\\\";\\n\\ncontract ERC20WrappedERC1155 is ERC20, ERC1155Holder, IERC20WrappedERC1155 {\\n    using SafeMath for uint256;\\n    using WrappedTokenLib for WrappedTokenLib.WrappedTokenData;\\n\\n    WrappedTokenLib.WrappedTokenData internal tokenData;\\n\\n    /**\\n     * @dev constructor sets up token parameters. this token wraps bitgem governance tokens.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address erc1155Token,\\n        uint256 tokenIndex,\\n        uint256 exchangeRate\\n    ) ERC20(name, symbol) {\\n        tokenData.erc1155token = erc1155Token;\\n        tokenData.tokenPool = address(0);\\n        tokenData.index = tokenIndex;\\n        tokenData.tokenType = 0;\\n        tokenData.rate = exchangeRate;\\n        _setupDecimals(decimals);\\n    }\\n\\n    /**\\n     * @dev initialize is a stub because this class is deployed by us with constructor params\\n     */\\n    function initialize(\\n        string memory,\\n        string memory,\\n        address,\\n        address,\\n        uint8\\n    ) external override {\\n        tokenData.erc20token = address(this);\\n    }\\n\\n    function _wrap(uint256 quantity) internal {\\n        require(quantity != 0, \\\"ZERO_QUANTITY\\\");\\n        require(\\n            IERC1155(tokenData.erc1155token).balanceOf(msg.sender, tokenData.index) >= quantity,\\n            \\\"INSUFFICIENT_ERC1155_BALANCE\\\"\\n        );\\n        IERC1155(tokenData.erc1155token).safeTransferFrom(msg.sender, address(this), tokenData.index, quantity, \\\"\\\");\\n        _mint(msg.sender, quantity.mul(tokenData.rate * 10**decimals()));\\n    }\\n\\n    /**\\n     * @dev wrap a quantity of erc1155 governance to erc20\\n     */\\n    function wrap(uint256 quantity) external virtual override {\\n        _wrap(quantity);\\n    }\\n\\n    /**\\n     * @dev unwrap a quantity of wrapped erc20 governance to erc1155\\n     */\\n    function _unwrap(uint256 quantity) internal {\\n        require(quantity != 0, \\\"ZERO_QUANTITY\\\");\\n        require(\\n            IERC1155(tokenData.erc1155token).balanceOf(address(this), tokenData.index) >= quantity,\\n            \\\"INSUFFICIENT_RESERVES\\\"\\n        );\\n        require(balanceOf(msg.sender) >= quantity.mul(tokenData.rate * 10**decimals()), \\\"INSUFFICIENT_ERC20_BALANCE\\\");\\n        _burn(msg.sender, quantity.mul(tokenData.rate * 10**decimals()));\\n        IERC1155(tokenData.erc1155token).safeTransferFrom(address(this), msg.sender, tokenData.index, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev unwrap a quantity of wrapped erc20 governance to erc1155\\n     */\\n    function unwrap(uint256 quantity) external virtual override {\\n        _unwrap(quantity);\\n    }\\n\\n    /**\\n     * @dev get reserves held in wrapper\\n     */\\n    function getReserves() external view override returns (uint256) {\\n        return IERC1155(tokenData.erc1155token).balanceOf(address(this), tokenData.index);\\n    }\\n\\n    /**\\n     * @dev get the token address this wrapper is bound to\\n     */\\n    function getTokenAddress() external view override returns (address) {\\n        return tokenData.erc1155token;\\n    }\\n\\n    /**\\n     * @dev get the token id this wrapper is bound to\\n     */\\n    function getTokenId() external view override returns (uint256) {\\n        return tokenData.index;\\n    }\\n}\\n\",\"keccak256\":\"0x404ba8a27443832e1fff0344c489b937bea019223b456c9c388df09b9f424b4d\",\"license\":\"MIT\"},\"src/tokens/NFTGemERC20Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"./ERC20WrappedERC1155.sol\\\";\\n\\ncontract NFTGemWrappedERC20Governance is ERC20WrappedERC1155 {\\n    using SafeMath for uint256;\\n    address internal _feeManager;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address erc1155Token,\\n        address feeManager\\n    ) ERC20WrappedERC1155(name, symbol, 18, erc1155Token, 0, 1) {\\n        _feeManager = feeManager;\\n    }\\n\\n    function wrap(uint256 quantity) external override {\\n        require(quantity != 0, \\\"ZERO_QUANTITY\\\");\\n        require(\\n            IERC1155(tokenData.erc1155token).balanceOf(msg.sender, tokenData.index) >= quantity,\\n            \\\"INSUFFICIENT_ERC1155_BALANCE\\\"\\n        );\\n        uint256 tq = quantity.mul(tokenData.rate * 10**decimals());\\n        uint256 fd = INFTGemFeeManager(_feeManager).feeDivisor(address(this));\\n        uint256 fee = fd != 0 ? tq.div(fd) : 0;\\n        uint256 userQty = tq.sub(fee);\\n        IERC1155(tokenData.erc1155token).safeTransferFrom(msg.sender, address(this), tokenData.index, quantity, \\\"\\\");\\n        _mint(msg.sender, userQty);\\n        _mint(_feeManager, fee);\\n    }\\n\\n    function unwrap(uint256 quantity) external override {}\\n}\\n\",\"keccak256\":\"0x5b6f1b587f5bbb84be19e25d06555554c37f1d26993638c38715464dbcea24eb\",\"license\":\"MIT\"},\"src/tokens/WrappedTokenLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20WrappedGem.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\n\\nlibrary WrappedTokenLib {\\n    using SafeMath for uint256;\\n\\n    event Wrap(address indexed account, uint256 quantity);\\n    event Unwrap(address indexed account, uint256 quantity);\\n\\n    struct WrappedTokenData {\\n        address erc1155token;\\n        address erc20token;\\n        address tokenPool;\\n        uint256 index;\\n        uint256 wrappedBalance;\\n        uint8 tokenType;\\n        uint256 rate;\\n        mapping(address => uint256[]) ids;\\n        mapping(address => uint256[]) amounts;\\n    }\\n\\n    function getPoolTypeBalance(\\n        address erc1155token,\\n        address tokenPool,\\n        uint8 tokenType,\\n        address account\\n    ) public view returns (uint256 tq) {\\n        uint256 i = INFTGemMultiToken(erc1155token).allHeldTokensLength(account) - 1;\\n        for (; i >= 0 && tq > 0; i = i.sub(1)) {\\n            uint256 tokenHash = INFTGemMultiToken(erc1155token).allHeldTokens(account, i);\\n            if (INFTComplexGemPoolData(tokenPool).tokenType(tokenHash) == tokenType) {\\n                uint256 oq = IERC1155(erc1155token).balanceOf(account, tokenHash);\\n                uint256 toTransfer = oq > tq ? tq : oq;\\n                tq = tq.add(toTransfer);\\n            }\\n            if (i == 0) break;\\n        }\\n    }\\n\\n    function transferPoolTypesFrom(\\n        WrappedTokenData storage self,\\n        address from,\\n        address to,\\n        uint256 quantity\\n    ) public {\\n        uint256 tq = quantity;\\n        delete self.ids[to];\\n        delete self.amounts[to];\\n\\n        uint256 i = INFTGemMultiToken(self.erc1155token).allHeldTokensLength(from) - 1;\\n\\n        for (; i >= 0 && tq > 0; i = i.sub(1)) {\\n            uint256 tokenHash = INFTGemMultiToken(self.erc1155token).allHeldTokens(from, i);\\n            if (INFTComplexGemPoolData(self.tokenPool).tokenType(tokenHash) == self.tokenType) {\\n                uint256 oq = IERC1155(self.erc1155token).balanceOf(from, tokenHash);\\n                uint256 toTransfer = oq > tq ? tq : oq;\\n                self.ids[to].push(tokenHash);\\n                self.amounts[to].push(toTransfer);\\n                tq = tq.sub(toTransfer);\\n            }\\n            if (i == 0) break;\\n        }\\n\\n        require(tq == 0, \\\"INSUFFICIENT_GEMS\\\");\\n\\n        IERC1155(self.erc1155token).safeBatchTransferFrom(from, to, self.ids[to], self.amounts[to], \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf883bf73de5a0c9ffdcc00025ba7661a472a378bdbba87dfa4ef2e46e15ccc6b\",\"license\":\"MIT\"},\"src/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x10f0d08f1f55674dc723babe48c1bfb0ae23640a099394a8b7aab9f4fafba18c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001bc938038062001bc9833981810160405260808110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b50604090815260208281015192909101518651929450925085918591601291869160009160019187918791620001d49160039185019062000330565b508051620001ea90600490602084019062000330565b50506005805460ff19166012179055506200020c6301ffc9a760e01b62000295565b6200021e630271189760e51b62000295565b600780546001600160a01b0385166001600160a01b031991821617909155600980549091169055600a829055600c805460ff19169055600d81905562000264846200031a565b5050601080546001600160a01b0319166001600160a01b03969096169590951790945550620003cc95505050505050565b6001600160e01b03198082161415620002f5576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600660205260409020805460ff19166001179055565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200037357805160ff1916838001178555620003a3565b82800160010185558215620003a3579182015b82811115620003a357825182559160200191906001019062000386565b50620003b1929150620003b5565b5090565b5b80821115620003b15760008155600101620003b6565b6117ed80620003dc6000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063651d8366116100cd578063bc197c8111610081578063de0e9a3e11610066578063de0e9a3e146107b7578063ea598cb0146107d4578063f23a6e61146107f15761016c565b8063bc197c8114610573578063dd62ed3e1461077c5761016c565b806395d89b41116100b257806395d89b41146104f9578063a457c2d714610501578063a9059cbb1461053a5761016c565b8063651d83661461036f57806370a08231146104c65761016c565b806310fe9ae81161012457806323b872dd1161010957806323b872dd146102d5578063313ce5671461031857806339509351146103365761016c565b806310fe9ae81461029c57806318160ddd146102cd5761016c565b806306fdde031161015557806306fdde03146101de5780630902f1ac1461025b578063095ea7b3146102635761016c565b8063010a38f51461017157806301ffc9a71461018b575b600080fd5b6101796108c9565b60408051918252519081900360200190f35b6101ca600480360360208110156101a157600080fd5b50357fffffffff00000000000000000000000000000000000000000000000000000000166108cf565b604080519115158252519081900360200190f35b6101e6610906565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610220578181015183820152602001610208565b50505050905090810190601f16801561024d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101796109ba565b6101ca6004803603604081101561027957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a64565b6102a4610a82565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610179610a9e565b6101ca600480360360608110156102eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610aa4565b610320610b45565b6040805160ff9092168252519081900360200190f35b6101ca6004803603604081101561034c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610b4e565b6104c4600480360360a081101561038557600080fd5b8101906020810181356401000000008111156103a057600080fd5b8201836020820111156103b257600080fd5b803590602001918460018302840111640100000000831117156103d457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561042757600080fd5b82018360208201111561043957600080fd5b8035906020019184600183028401116401000000008311171561045b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050813573ffffffffffffffffffffffffffffffffffffffff9081169350602083013516916040013560ff169050610ba9565b005b610179600480360360208110156104dc57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610bda565b6101e6610c02565b6101ca6004803603604081101561051757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610c81565b6101ca6004803603604081101561055057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610cf6565b610747600480360360a081101561058957600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116918101906060810160408201356401000000008111156105ca57600080fd5b8201836020820111156105dc57600080fd5b803590602001918460208302840111640100000000831117156105fe57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561064e57600080fd5b82018360208201111561066057600080fd5b8035906020019184602083028401116401000000008311171561068257600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156106d257600080fd5b8201836020820111156106e457600080fd5b8035906020019184600183028401116401000000008311171561070657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d0a945050505050565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b6101796004803603604081101561079257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610d34565b6104c4600480360360208110156107cd57600080fd5b5035610d6c565b6104c4600480360360208110156107ea57600080fd5b5035610d6f565b610747600480360360a081101561080757600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561085457600080fd5b82018360208201111561086657600080fd5b8035906020019184600183028401116401000000008311171561088857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611087945050505050565b600a5490565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526006602052604090205460ff1690565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109b05780601f10610985576101008083540402835291602001916109b0565b820191906000526020600020905b81548152906001019060200180831161099357829003601f168201915b5050505050905090565b600754600a54604080517efdd58e00000000000000000000000000000000000000000000000000000000815230600482015260248101929092525160009273ffffffffffffffffffffffffffffffffffffffff169162fdd58e916044808301926020929190829003018186803b158015610a3357600080fd5b505afa158015610a47573d6000803e3d6000fd5b505050506040513d6020811015610a5d57600080fd5b5051905090565b6000610a78610a716110b1565b84846110b5565b5060015b92915050565b60075473ffffffffffffffffffffffffffffffffffffffff1690565b60025490565b6000610ab18484846111c8565b610b3b84610abd6110b1565b610b36856040518060600160405280602881526020016117226028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020526040812090610b086110b1565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020549190611364565b6110b5565b5060019392505050565b60055460ff1690565b6000610a78610b5b6110b1565b84610b368560016000610b6c6110b1565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c1681529252902054906113fb565b5050600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001630179055505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109b05780601f10610985576101008083540402835291602001916109b0565b6000610a78610c8e6110b1565b84610b36856040518060600160405280602581526020016117936025913960016000610cb86110b1565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d16815292529020549190611364565b6000610a78610d036110b1565b84846111c8565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b50565b80610dc1576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b600754600a54604080517efdd58e000000000000000000000000000000000000000000000000000000008152336004820152602481019290925251839273ffffffffffffffffffffffffffffffffffffffff169162fdd58e916044808301926020929190829003018186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d6020811015610e6357600080fd5b50511015610eb8576040805162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f455243313135355f42414c414e434500000000604482015290519081900360640190fd5b6000610ed6610ec5610b45565b600d54849160ff16600a0a0261145c565b601054604080517feee1ad80000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163eee1ad8091602480820192602092909190829003018186803b158015610f4d57600080fd5b505afa158015610f61573d6000803e3d6000fd5b505050506040513d6020811015610f7757600080fd5b50519050600081610f89576000610f93565b610f9383836114b5565b90506000610fa1848361151c565b600754600a54604080517ff242432a00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101929092526064820189905260a06084830152600060a48301819052905193945073ffffffffffffffffffffffffffffffffffffffff9092169263f242432a9260e48084019391929182900301818387803b15801561103b57600080fd5b505af115801561104f573d6000803e3d6000fd5b5050505061105d3382611579565b6010546110809073ffffffffffffffffffffffffffffffffffffffff1683611579565b5050505050565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff83166111075760405162461bcd60e51b815260040180806020018281038252602481526020018061176f6024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166111595760405162461bcd60e51b81526004018080602001828103825260228152602001806116b96022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff831661121a5760405162461bcd60e51b815260040180806020018281038252602581526020018061174a6025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661126c5760405162461bcd60e51b81526004018080602001828103825260238152602001806116966023913960400191505060405180910390fd5b611277838383611690565b6112c1816040518060600160405280602681526020016116db6026913973ffffffffffffffffffffffffffffffffffffffff86166000908152602081905260409020549190611364565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822093909355908416815220546112fd90826113fb565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156113f35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113b85781810151838201526020016113a0565b50505050905090810190601f1680156113e55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015611455576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60008261146b57506000610a7c565b8282028284828161147857fe5b04146114555760405162461bcd60e51b81526004018080602001828103825260218152602001806117016021913960400191505060405180910390fd5b600080821161150b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161151457fe5b049392505050565b600082821115611573576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b73ffffffffffffffffffffffffffffffffffffffff82166115e1576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6115ed60008383611690565b6002546115fa90826113fb565b60025573ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205461162d90826113fb565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212208bab77ff0c6669456453c277c2c1e7b9ad643af435bcffedd56ae80711b4b6d464736f6c63430007030033",
  "deployedBytecode": "",
  "libraries": {
    "GovernanceLib": "0x9eAc2A20bFB02a065b5B721109Ce51D4730B9e92",
    "Strings": "0xe98D76f55e5Dae2DE566CC8Aa1a36282742eabf7",
    "SafeMath": "0x753f0df0a61c5F8A0eB31c6Bf6e7363943Eb225B",
    "AddressSet": "0x86fca4de79B7DA4138cB961e0ce32FF17Bb1e3B3",
    "UInt256Set": "0xA7A95c6BA39DA9747ae1fE7C64e4E7ad00dCFD73",
    "Create2": "0x117f8511d54E60dE2F1C63F0Ac1c7C05473cdAa4",
    "ProposalsLib": "0xab14bBF2998944255052bdBE1258cb863D330A4e",
    "ComplexPoolLib": "0x819e15b3A3f4F36965d1a3994060398A5CAa02B6",
    "WrappedTokenLib": "0x2a12942218Ddf38d951A5B107460F6295c758Fc8"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getReserves()": {
        "details": "get reserves held in wrapper"
      },
      "getTokenAddress()": {
        "details": "get the token address this wrapper is bound to"
      },
      "getTokenId()": {
        "details": "get the token id this wrapper is bound to"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(string,string,address,address,uint8)": {
        "details": "initialize is a stub because this class is deployed by us with constructor params"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "unwrap(uint256)": {
        "details": "unwrap a quantity of wrapped erc20 governance to erc1155"
      },
      "wrap(uint256)": {
        "details": "wrap a quantity of erc1155 governance to erc20"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25162,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25168,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 25170,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25172,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 25174,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 25176,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 16066,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 26153,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "tokenData",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(WrappedTokenData)28033_storage"
      },
      {
        "astId": 26732,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_feeManager",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WrappedTokenData)28033_storage": {
        "encoding": "inplace",
        "label": "struct WrappedTokenLib.WrappedTokenData",
        "members": [
          {
            "astId": 28010,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "erc1155token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 28012,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "erc20token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 28014,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "tokenPool",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 28016,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "index",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 28018,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "wrappedBalance",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 28020,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "tokenType",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 28022,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "rate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 28027,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "ids",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 28032,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "amounts",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}