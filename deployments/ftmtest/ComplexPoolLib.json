{
  "address": "0xd7203305346B69227e126D7FBfCE20Fc976aE524",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "NFTGemClaimCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAssessed",
          "type": "uint256"
        }
      ],
      "name": "NFTGemClaimRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gemHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "NFTGemCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "name": "NFTGemERC20ClaimCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAssessed",
          "type": "uint256"
        }
      ],
      "name": "NFTGemERC20ClaimRedeemed",
      "type": "event"
    }
  ],
  "transactionHash": "0x9298172f5ff56e1cba222c94e25844010dcb8a02a0bb56b3ec95edd8506d209e",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xd7203305346B69227e126D7FBfCE20Fc976aE524",
    "transactionIndex": 0,
    "gasUsed": "5032964",
    "logsBloom": "0x
    "blockHash": "0x00000d3c00000102d76928a1f57ae8784ae1be711340ed7c5d91056647c8d685",
    "transactionHash": "0x9298172f5ff56e1cba222c94e25844010dcb8a02a0bb56b3ec95edd8506d209e",
    "logs": [],
    "blockNumber": 1517078,
    "cumulativeGasUsed": "5032964",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8146679affc56af088416b479497acfb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"NFTGemClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAssessed\",\"type\":\"uint256\"}],\"name\":\"NFTGemClaimRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"NFTGemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"NFTGemERC20ClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAssessed\",\"type\":\"uint256\"}],\"name\":\"NFTGemERC20ClaimRedeemed\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"NFTGemClaimCreated(address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is created using base currency\"},\"NFTGemClaimRedeemed(address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is redeemed\"},\"NFTGemCreated(address,address,uint256,uint256,uint256)\":{\"details\":\"Event generated when a gem is created\"},\"NFTGemERC20ClaimCreated(address,address,uint256,uint256,address,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is created using ERC20 tokens\"},\"NFTGemERC20ClaimRedeemed(address,address,uint256,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Event generated when an NFT erc20 claim is redeemed\"}},\"kind\":\"dev\",\"methods\":{\"addAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)\":{\"details\":\"add a token that is allowed to be used to create a claim\"},\"addInputRequirement(ComplexPoolLib.ComplexPoolData storage,address,address,INFTComplexGemPool.RequirementType,uint256,uint256,bool,bool,bool)\":{\"details\":\"add an input requirement for this token\"},\"addToken(ComplexPoolLib.ComplexPoolData storage,uint256,INFTGemMultiToken.TokenType)\":{\"details\":\"create a token of token hash / token type\"},\"allInputRequirements(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"input requirements at index\"},\"allInputRequirementsLength(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"count of input requirements\"},\"allTokenHashes(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"get the token hash at index\"},\"claimAmount(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"return the claim amount paid for this claim\"},\"claimQuantity(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"the claim quantity (count of gems staked) for the given claim hash\"},\"claimTokenAmount(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"return the claim token amount for this claim hash\"},\"claimUnlockTime(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"the lock time for this claim hash. once past lock time a gem is minted\"},\"collectClaim(ComplexPoolLib.ComplexPoolData storage,uint256,bool)\":{\"details\":\"collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\"},\"createClaims(ComplexPoolLib.ComplexPoolData storage,uint256,uint256)\":{\"details\":\"attempt to create a claim using the given timeframe with count\"},\"createERC20Claims(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)\":{\"details\":\"crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\"},\"deposit(ComplexPoolLib.ComplexPoolData storage,address,uint256)\":{\"details\":\"deposit into pool\"},\"depositNFT(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)\":{\"details\":\"deposit NFT into pool\"},\"gemClaimHash(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"return the claim hash of the given gemhash\"},\"increaseDifficulty(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\"},\"mintGenesisGems(ComplexPoolLib.ComplexPoolData storage,address,address)\":{\"details\":\"mint the genesis gems earned by the pools creator and funder\"},\"nextClaimHash(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"the hash of the next claim to be minted\"},\"nextClaimId(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"get the next claim id\"},\"nextGemHash(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"the hash of the next gem to be minted\"},\"nextGemId(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"get the next gem id\"},\"purchaseGems(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)\":{\"details\":\"purchase gem(s) at the listed pool price\"},\"removeAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)\":{\"details\":\"remove a token that is allowed to be used to create a claim\"},\"requireInputReqs(ComplexPoolLib.ComplexPoolData storage,address,uint256)\":{\"details\":\"checks to see that account owns all the pool requirements needed to mint at least the given quantity of NFT\"},\"stakedToken(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"return the token that was staked to create the given token hash. 0 if the native token\"},\"updateInputRequirement(ComplexPoolLib.ComplexPoolData storage,uint256,address,address,INFTComplexGemPool.RequirementType,uint256,uint256,bool,bool,bool)\":{\"details\":\"update input requirement at index\"},\"withdraw(ComplexPoolLib.ComplexPoolData storage,address,address,uint256)\":{\"details\":\"withdraw pool contents\"},\"withdrawNFT(ComplexPoolLib.ComplexPoolData storage,address,address,uint256,uint256)\":{\"details\":\"withdraw pool NFT\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pool/ComplexPoolLib.sol\":\"ComplexPoolLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool {\\n    enum RequirementType {\\n        ERC20,\\n        ERC1155,\\n        POOL\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 gemHash,\\n        uint256 quantity\\n    );\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash, bool requireMature) external;\\n\\n    function purchaseGems(uint256 count) external payable;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x82c44e3e50944c227762a26043a1307be6c51ce8621153fe0a69b0633abe0a73\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./INFTGemMultiToken.sol\\\";\\nimport \\\"./INFTComplexGemPool.sol\\\";\\n\\ninterface INFTComplexGemPoolData {\\n    enum PriceIncrementType {\\n        COMPOUND,\\n        INVERSELOG,\\n        NONE\\n    }\\n\\n    /**\\n     * @dev a requirement of erc20, erc1155, or nft gem\\n     */\\n    struct InputRequirement {\\n        address token;\\n        address pool;\\n        INFTComplexGemPool.RequirementType inputType; // 1 = erc20, 2 = erc1155, 3 = pool\\n        uint256 tokenId; // if erc20 slot 0 contains required amount\\n        uint256 minVal;\\n        bool takeCustody;\\n        bool burn;\\n        bool exactAmount;\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is imported from a legacy contract\\n     */\\n    event NFTGemImported(\\n        address indexed converter,\\n        address indexed pool,\\n        address oldPool,\\n        address oldToken,\\n        uint256 indexed gemHash,\\n        uint256 quantity\\n    );\\n\\n    function addInputRequirement(\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 theTokenId,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn,\\n        bool exactAmount\\n    ) external;\\n\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn,\\n        bool exactAmount\\n    ) external;\\n\\n    function allInputRequirementsLength() external returns (uint256);\\n\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            INFTComplexGemPool.RequirementType,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function settings()\\n        external\\n        view\\n        returns (\\n            string memory settingsSymbol,\\n            string memory settingsName,\\n            string memory settingsDescription,\\n            uint256 settingsCategory,\\n            uint256 settingsEthPrice,\\n            uint256 settingsMinTime,\\n            uint256 settingsMaxTime,\\n            uint256 settingsDiffStep,\\n            uint256 settingsMacClaims,\\n            uint256 settingsMaxQuantityPerClaim,\\n            uint256 settingsMaxClaimsPerAccount\\n        );\\n\\n    function stats()\\n        external\\n        view\\n        returns (\\n            bool statsVisible,\\n            uint256 statsClaimedCount,\\n            uint256 statsMintedCount,\\n            uint256 statsTotalStakedEth,\\n            uint256 statsNextClaimHash,\\n            uint256 statsNextGemHash,\\n            uint256 statsNextClaimId,\\n            uint256 statsNextGemId\\n        );\\n\\n    function claim(uint256 claimHash)\\n        external\\n        view\\n        returns (\\n            uint256 claimClaimAmount,\\n            uint256 claimClaimQuantity,\\n            uint256 claimClaimUnlockTime,\\n            uint256 claimClaimTokenAmount,\\n            address claimStakedToken,\\n            uint256 claimNextClaimId\\n        );\\n\\n    function token(uint256 tokenHash)\\n        external\\n        view\\n        returns (\\n            INFTGemMultiToken.TokenType tokenTokenType,\\n            uint256 tokenTokenId,\\n            address tokenTokenSource\\n        );\\n\\n    function addAllowedTokenSource(address allowedToken) external;\\n\\n    function removeAllowedTokenSource(address allowedToken) external;\\n\\n    function allowedTokenSources() external view returns (address[] memory);\\n\\n    function importLegacyGem(\\n        address pool,\\n        address legacyToken,\\n        uint256 tokenHash,\\n        address recipient,\\n        bool burnOld\\n    ) external;\\n\\n    function isLegacyGemImported(address account, uint256 tokenhash)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setNextIds(uint256 _nextClaimId, uint256 _nextGemId) external;\\n\\n    function tokenHashes() external view returns (uint256[] memory);\\n\\n    function setTokenHashes(uint256[] memory inTokenHashes) external;\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function setVisible(bool isVisible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 theCategory) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setDescription(string memory desc) external;\\n\\n    function description() external view returns (string memory);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function maxQuantityPerClaim() external view returns (uint256);\\n\\n    function maxClaimsPerAccount() external view returns (uint256);\\n\\n    function setMaxQuantityPerClaim(uint256 claimId) external;\\n\\n    function setMaxClaimsPerAccount(uint256 claimId) external;\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash)\\n        external\\n        view\\n        returns (INFTGemMultiToken.TokenType);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function gemClaimHash(uint256 gemHash) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address tkn) external view returns (bool);\\n\\n    function addAllowedToken(address tkn) external;\\n\\n    function removeAllowedToken(address tkn) external;\\n\\n    function allowPurchase() external view returns (bool);\\n\\n    function setAllowPurchase(bool allow) external;\\n\\n    function enabled() external view returns (bool);\\n\\n    function setEnabled(bool enable) external;\\n\\n    function priceIncrementType() external view returns (PriceIncrementType);\\n\\n    function setPriceIncrementType(PriceIncrementType incrementType) external;\\n}\\n\",\"keccak256\":\"0x4fbcba34bc2e6aa89a82ba61ce5452204c601b8795b2d5c57cc65cc05c184437\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INFTGemFeeManager {\\n    event FeeChanged(\\n        address indexed operator,\\n        uint256 indexed feeHash,\\n        uint256 value\\n    );\\n\\n    function fee(uint256 feeTypeHash) external view returns (uint256);\\n\\n    function setFee(uint256 feeTypeHash, uint256 _fee) external;\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x073089b45be4de1e2feecfa65d36ea9cb3ec18cec7e3c1e9de18ea8923c016c2\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    function createPool(\\n        address owner,\\n        address funder,\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function initialized() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5a3431567529737534236c362456d43a80e740ddfc1c8c75f77b67d5defc1afa\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    struct Royalty {\\n        address owner;\\n        uint256 royaltyPermillion;\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function setRoyaltyInfo(\\n        uint256 _tokenId,\\n        address _owner,\\n        uint256 feePermil\\n    ) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0x1d54431d4f990265d8a0c692430e75c5c77870b78f19264069e1cfe86d7464c0\",\"license\":\"MIT\"},\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ISwapQueryHelper {\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(address pair) external view returns (uint256, uint256);\\n\\n    function getPathForCoinToToken(address token)\\n        external\\n        pure\\n        returns (address[] memory);\\n\\n    function setFactory(address f) external;\\n}\\n\",\"keccak256\":\"0x9b85b7f774e809680b6e5fd76ccdc1668139a2f9ef928a05f5ce7c79f0f6783f\",\"license\":\"MIT\"},\"src/libs/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary AddressSet {\\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, address key) internal {\\n        require(\\n            !exists(self, key),\\n            \\\"AddressSet: key already exists in the set.\\\"\\n        );\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, address key) internal {\\n        // TODO: I commented this out do get a test to pass - need to figure out what is up here\\n        require(\\n            exists(self, key),\\n            \\\"AddressSet: key does not exist in the set.\\\"\\n        );\\n        if (!exists(self, key)) return;\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            address keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        self.keyList.pop();\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, address key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return self.keyList[index];\\n    }\\n}\\n\",\"keccak256\":\"0xb947da4808754cbe6b272c67dd1ffe96c67563c1d5c02c1924bea92172836b97\",\"license\":\"MIT\"},\"src/pool/ComplexPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\nimport \\\"../interfaces/ISwapQueryHelper.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\n\\nimport \\\"../libs/AddressSet.sol\\\";\\n\\nlibrary ComplexPoolLib {\\n    using AddressSet for AddressSet.Set;\\n    address private constant WFTM = 0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83;\\n    /**\\n     * @dev Event generated when an NFT claim is created using base currency\\n     */\\n    event NFTGemClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT erc20 claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 gemHash,\\n        uint256 quantity\\n    );\\n\\n    /**\\n     * @dev data describes complex pool\\n     */\\n    struct ComplexPoolData {\\n        // governor and multitoken target\\n        address pool;\\n        address multitoken;\\n        address governor;\\n        address feeTracker;\\n        address swapHelper;\\n        uint256 category;\\n        bool visible;\\n        // it all starts with a symbol and a nams\\n        string symbol;\\n        string name;\\n        string description;\\n        // magic economy numbers\\n        uint256 ethPrice;\\n        uint256 minTime;\\n        uint256 maxTime;\\n        uint256 diffstep;\\n        uint256 maxClaims;\\n        uint256 maxQuantityPerClaim;\\n        uint256 maxClaimsPerAccount;\\n        bool validateerc20;\\n        bool allowPurchase;\\n        bool enabled;\\n        INFTComplexGemPoolData.PriceIncrementType priceIncrementType;\\n        mapping(uint256 => INFTGemMultiToken.TokenType) tokenTypes;\\n        mapping(uint256 => uint256) tokenIds;\\n        mapping(uint256 => address) tokenSources;\\n        AddressSet.Set allowedTokenSources;\\n        uint256[] tokenHashes;\\n        // next ids of things\\n        uint256 nextGemIdVal;\\n        uint256 nextClaimIdVal;\\n        uint256 totalStakedEth;\\n        // records claim timestamp / ETH value / ERC token and amount sent\\n        mapping(uint256 => uint256) claimLockTimestamps;\\n        mapping(uint256 => address) claimLockToken;\\n        mapping(uint256 => uint256) claimAmountPaid;\\n        mapping(uint256 => uint256) claimQuant;\\n        mapping(uint256 => uint256) claimTokenAmountPaid;\\n        mapping(uint256 => mapping(address => uint256)) importedLegacyToken;\\n        // input NFTs storage\\n        mapping(uint256 => uint256) gemClaims;\\n        mapping(uint256 => uint256[]) claimIds;\\n        mapping(uint256 => uint256[]) claimQuantities;\\n        mapping(address => bool) controllers;\\n        mapping(address => uint256) claimsMade;\\n        INFTComplexGemPoolData.InputRequirement[] inputRequirements;\\n        AddressSet.Set allowedTokens;\\n    }\\n\\n    function checkGemRequirement(\\n        ComplexPoolData storage self,\\n        uint256 _inputIndex,\\n        address _holderAddress,\\n        uint256 _quantity\\n    ) internal view returns (address) {\\n        address gemtoken;\\n        int256 required = int256(\\n            self.inputRequirements[_inputIndex].minVal * _quantity\\n        );\\n        uint256[] memory hashes = INFTGemMultiToken(\\n            self.inputRequirements[_inputIndex].token\\n        ).heldTokens(_holderAddress);\\n        for (\\n            uint256 _hashIndex = 0;\\n            _hashIndex < hashes.length;\\n            _hashIndex += 1\\n        ) {\\n            uint256 hashAt = hashes[_hashIndex];\\n            if (\\n                INFTComplexGemPoolData(self.inputRequirements[_inputIndex].pool)\\n                .tokenType(hashAt) == INFTGemMultiToken.TokenType.GEM\\n            ) {\\n                gemtoken = self.inputRequirements[_inputIndex].token;\\n                uint256 balance = IERC1155(\\n                    self.inputRequirements[_inputIndex].token\\n                ).balanceOf(_holderAddress, hashAt);\\n                if (balance > uint256(required)) {\\n                    balance = uint256(required);\\n                }\\n                if (balance == 0) {\\n                    continue;\\n                }\\n                required = required - int256(balance);\\n            }\\n            if (\\n                required == 0 &&\\n                self.inputRequirements[_inputIndex].exactAmount == false\\n            ) {\\n                break;\\n            }\\n            if (required < 0) {\\n                require(required == 0, \\\"EXACT_AMOUNT_REQUIRED\\\");\\n            }\\n        }\\n        require(required == 0, \\\"UNMET_GEM_REQUIREMENT\\\");\\n        return gemtoken;\\n    }\\n\\n    /**\\n     * @dev checks to see that account owns all the pool requirements needed to mint at least the given quantity of NFT\\n     */\\n    function requireInputReqs(\\n        ComplexPoolData storage self,\\n        address _holderAddress,\\n        uint256 _quantity\\n    ) public view {\\n        for (\\n            uint256 _inputIndex = 0;\\n            _inputIndex < self.inputRequirements.length;\\n            _inputIndex += 1\\n        ) {\\n            if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC20\\n            ) {\\n                require(\\n                    IERC20(self.inputRequirements[_inputIndex].token).balanceOf(\\n                        _holderAddress\\n                    ) >=\\n                        self.inputRequirements[_inputIndex].minVal *\\n                            (_quantity),\\n                    \\\"UNMET_ERC20_REQUIREMENT\\\"\\n                );\\n            } else if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC1155\\n            ) {\\n                require(\\n                    IERC1155(self.inputRequirements[_inputIndex].token)\\n                    .balanceOf(\\n                        _holderAddress,\\n                        self.inputRequirements[_inputIndex].tokenId\\n                    ) >=\\n                        self.inputRequirements[_inputIndex].minVal *\\n                            (_quantity),\\n                    \\\"UNMET_ERC1155_REQUIREMENT\\\"\\n                );\\n            } else if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.POOL\\n            ) {\\n                checkGemRequirement(\\n                    self,\\n                    _inputIndex,\\n                    _holderAddress,\\n                    _quantity\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer a quantity of input reqs from to\\n     */\\n    function takeInputReqsFrom(\\n        ComplexPoolData storage self,\\n        uint256 _claimHash,\\n        address _fromAddress,\\n        uint256 _quantity\\n    ) internal {\\n        address gemtoken;\\n        for (\\n            uint256 _inputIndex = 0;\\n            _inputIndex < self.inputRequirements.length;\\n            _inputIndex += 1\\n        ) {\\n            if (!self.inputRequirements[_inputIndex].takeCustody) {\\n                continue;\\n            }\\n            if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC20\\n            ) {\\n                IERC20 token = IERC20(\\n                    self.inputRequirements[_inputIndex].token\\n                );\\n                token.transferFrom(\\n                    _fromAddress,\\n                    self.pool,\\n                    self.inputRequirements[_inputIndex].minVal * (_quantity)\\n                );\\n            } else if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC1155\\n            ) {\\n                IERC1155 token = IERC1155(\\n                    self.inputRequirements[_inputIndex].token\\n                );\\n                token.safeTransferFrom(\\n                    _fromAddress,\\n                    self.pool,\\n                    self.inputRequirements[_inputIndex].tokenId,\\n                    self.inputRequirements[_inputIndex].minVal * (_quantity),\\n                    \\\"\\\"\\n                );\\n            } else if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.POOL\\n            ) {\\n                gemtoken = checkGemRequirement(\\n                    self,\\n                    _inputIndex,\\n                    _fromAddress,\\n                    _quantity\\n                );\\n            }\\n        }\\n\\n        if (self.claimIds[_claimHash].length > 0 && gemtoken != address(0)) {\\n            IERC1155(gemtoken).safeBatchTransferFrom(\\n                _fromAddress,\\n                self.pool,\\n                self.claimIds[_claimHash],\\n                self.claimQuantities[_claimHash],\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the returnable input requirements for claimhash to account\\n     */\\n    function returnInputReqsTo(\\n        ComplexPoolData storage self,\\n        uint256 _claimHash,\\n        address _toAddress,\\n        uint256 _quantity\\n    ) internal {\\n        address gemtoken;\\n        for (uint256 i = 0; i < self.inputRequirements.length; i++) {\\n            if (\\n                self.inputRequirements[i].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC20 &&\\n                self.inputRequirements[i].burn == false &&\\n                self.inputRequirements[i].takeCustody == true\\n            ) {\\n                IERC20 token = IERC20(self.inputRequirements[i].token);\\n                token.transferFrom(\\n                    self.pool,\\n                    _toAddress,\\n                    self.inputRequirements[i].minVal * (_quantity)\\n                );\\n            } else if (\\n                self.inputRequirements[i].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC1155 &&\\n                self.inputRequirements[i].burn == false &&\\n                self.inputRequirements[i].takeCustody == true\\n            ) {\\n                IERC1155 token = IERC1155(self.inputRequirements[i].token);\\n                token.safeTransferFrom(\\n                    self.pool,\\n                    _toAddress,\\n                    self.inputRequirements[i].tokenId,\\n                    self.inputRequirements[i].minVal * (_quantity),\\n                    \\\"\\\"\\n                );\\n            } else if (\\n                self.inputRequirements[i].inputType ==\\n                INFTComplexGemPool.RequirementType.POOL &&\\n                self.inputRequirements[i].burn == false &&\\n                self.inputRequirements[i].takeCustody == true\\n            ) {\\n                gemtoken = self.inputRequirements[i].token;\\n            }\\n        }\\n        if (self.claimIds[_claimHash].length > 0 && gemtoken != address(0)) {\\n            IERC1155(gemtoken).safeBatchTransferFrom(\\n                self.pool,\\n                _toAddress,\\n                self.claimIds[_claimHash],\\n                self.claimQuantities[_claimHash],\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev add an input requirement for this token\\n     */\\n    function addInputRequirement(\\n        ComplexPoolData storage self,\\n        address token,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn,\\n        bool exactAmount\\n    ) public {\\n        require(token != address(0), \\\"INVALID_TOKEN\\\");\\n        require(\\n            inputType == INFTComplexGemPool.RequirementType.ERC20 ||\\n                inputType == INFTComplexGemPool.RequirementType.ERC1155 ||\\n                inputType == INFTComplexGemPool.RequirementType.POOL,\\n            \\\"INVALID_INPUTTYPE\\\"\\n        );\\n        require(\\n            (inputType == INFTComplexGemPool.RequirementType.POOL &&\\n                pool != address(0)) ||\\n                inputType != INFTComplexGemPool.RequirementType.POOL,\\n            \\\"INVALID_POOL\\\"\\n        );\\n        require(\\n            (inputType == INFTComplexGemPool.RequirementType.ERC20 &&\\n                tokenId == 0) ||\\n                inputType == INFTComplexGemPool.RequirementType.ERC1155 ||\\n                (inputType == INFTComplexGemPool.RequirementType.POOL &&\\n                    tokenId == 0),\\n            \\\"INVALID_TOKENID\\\"\\n        );\\n        require(minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        require(!(!takeCustody && burn), \\\"INVALID_TOKENSTATE\\\");\\n        self.inputRequirements.push(\\n            INFTComplexGemPoolData.InputRequirement(\\n                token,\\n                pool,\\n                inputType,\\n                tokenId,\\n                minAmount,\\n                takeCustody,\\n                burn,\\n                exactAmount\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev update input requirement at index\\n     */\\n    function updateInputRequirement(\\n        ComplexPoolData storage self,\\n        uint256 _index,\\n        address _tokenAddress,\\n        address _poolAddress,\\n        INFTComplexGemPool.RequirementType _inputRequirementType,\\n        uint256 _tokenId,\\n        uint256 _minAmount,\\n        bool _takeCustody,\\n        bool _burn,\\n        bool _exactAmount\\n    ) public {\\n        require(_index < self.inputRequirements.length, \\\"OUT_OF_RANGE\\\");\\n        require(_tokenAddress != address(0), \\\"INVALID_TOKEN\\\");\\n        require(\\n            _inputRequirementType == INFTComplexGemPool.RequirementType.ERC20 ||\\n                _inputRequirementType ==\\n                INFTComplexGemPool.RequirementType.ERC1155 ||\\n                _inputRequirementType ==\\n                INFTComplexGemPool.RequirementType.POOL,\\n            \\\"INVALID_INPUTTYPE\\\"\\n        );\\n        require(\\n            (_inputRequirementType == INFTComplexGemPool.RequirementType.POOL &&\\n                _poolAddress != address(0)) ||\\n                _inputRequirementType !=\\n                INFTComplexGemPool.RequirementType.POOL,\\n            \\\"INVALID_POOL\\\"\\n        );\\n        require(\\n            (_inputRequirementType ==\\n                INFTComplexGemPool.RequirementType.ERC20 &&\\n                _tokenId == 0) ||\\n                _inputRequirementType ==\\n                INFTComplexGemPool.RequirementType.ERC1155 ||\\n                (_inputRequirementType ==\\n                    INFTComplexGemPool.RequirementType.POOL &&\\n                    _tokenId == 0),\\n            \\\"INVALID_TOKENID\\\"\\n        );\\n        require(_minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        require(!(!_takeCustody && _burn), \\\"INVALID_TOKENSTATE\\\");\\n        self.inputRequirements[_index] = INFTComplexGemPoolData\\n        .InputRequirement(\\n            _tokenAddress,\\n            _poolAddress,\\n            _inputRequirementType,\\n            _tokenId,\\n            _minAmount,\\n            _takeCustody,\\n            _burn,\\n            _exactAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev count of input requirements\\n     */\\n    function allInputRequirementsLength(ComplexPoolData storage self)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.inputRequirements.length;\\n    }\\n\\n    /**\\n     * @dev input requirements at index\\n     */\\n    function allInputRequirements(ComplexPoolData storage self, uint256 _index)\\n        public\\n        view\\n        returns (\\n            address,\\n            address,\\n            INFTComplexGemPool.RequirementType,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        require(_index < self.inputRequirements.length, \\\"OUT_OF_RANGE\\\");\\n        INFTComplexGemPoolData.InputRequirement memory req = self\\n        .inputRequirements[_index];\\n        return (\\n            req.token,\\n            req.pool,\\n            req.inputType,\\n            req.tokenId,\\n            req.minVal,\\n            req.takeCustody,\\n            req.burn,\\n            req.exactAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev attempt to create a claim using the given timeframe with count\\n     */\\n    function createClaims(\\n        ComplexPoolData storage self,\\n        uint256 _timeframe,\\n        uint256 _count\\n    ) public {\\n        // enabled\\n        require(self.enabled == true, \\\"DISABLED\\\");\\n        // minimum timeframe\\n        require(_timeframe >= self.minTime, \\\"TIMEFRAME_TOO_SHORT\\\");\\n        // no ETH\\n        require(msg.value != 0, \\\"ZERO_BALANCE\\\");\\n        // zero qty\\n        require(_count != 0, \\\"ZERO_QUANTITY\\\");\\n        // maximum timeframe\\n        require(\\n            (self.maxTime != 0 && _timeframe <= self.maxTime) ||\\n                self.maxTime == 0,\\n            \\\"TIMEFRAME_TOO_LONG\\\"\\n        );\\n        // max quantity per claim\\n        require(\\n            (self.maxQuantityPerClaim != 0 &&\\n                _count <= self.maxQuantityPerClaim) ||\\n                self.maxQuantityPerClaim == 0,\\n            \\\"MAX_QUANTITY_EXCEEDED\\\"\\n        );\\n        require(\\n            (self.maxClaimsPerAccount != 0 &&\\n                self.claimsMade[msg.sender] < self.maxClaimsPerAccount) ||\\n                self.maxClaimsPerAccount == 0,\\n            \\\"MAX_QUANTITY_EXCEEDED\\\"\\n        );\\n\\n        uint256 adjustedBalance = msg.value / (_count);\\n        // cost given this timeframe\\n\\n        uint256 cost = (self.ethPrice * (self.minTime)) / (_timeframe);\\n        require(adjustedBalance >= cost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // get the nest claim hash, revert if no more claims\\n        uint256 claimHash = nextClaimHash(self);\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // require the user to have the input requirements\\n        requireInputReqs(self, msg.sender, _count);\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, claimHash, 1);\\n        INFTGemMultiToken(self.multitoken).setTokenData(\\n            claimHash,\\n            INFTGemMultiToken.TokenType.CLAIM,\\n            address(this)\\n        );\\n        addToken(self, claimHash, INFTGemMultiToken.TokenType.CLAIM);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 claimUnlockTimestamp = block.timestamp + (_timeframe);\\n        self.claimLockTimestamps[claimHash] = claimUnlockTimestamp;\\n        self.claimAmountPaid[claimHash] = cost * (_count);\\n        self.claimQuant[claimHash] = _count;\\n        self.claimsMade[msg.sender] = self.claimsMade[msg.sender] + (1);\\n\\n        // tranasfer NFT input requirements from user to pool\\n        takeInputReqsFrom(self, claimHash, msg.sender, _count);\\n\\n        // emit an event about it\\n        emit NFTGemClaimCreated(\\n            msg.sender,\\n            address(self.pool),\\n            claimHash,\\n            _timeframe,\\n            _count,\\n            cost\\n        );\\n\\n        // increase the staked eth balance\\n        self.totalStakedEth = self.totalStakedEth + (cost * (_count));\\n\\n        // return the extra to sender\\n        if (msg.value > cost * (_count)) {\\n            (bool success, ) = payable(msg.sender).call{\\n                value: msg.value - (cost * (_count))\\n            }(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    function getPoolFee(ComplexPoolData storage self, address tokenUsed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // get the fee for this pool if it exists\\n        uint256 poolDivFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"pool_fee\\\", address(self.pool)))\\n        );\\n        uint256 poolFee = INFTGemFeeManager(self.feeTracker).fee(\\n            poolDivFeeHash\\n        );\\n        // get the pool fee for this token if it exists\\n        uint256 poolTokenFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"pool_fee\\\", address(tokenUsed)))\\n        );\\n        uint256 poolTokenFee = INFTGemFeeManager(self.feeTracker).fee(\\n            poolTokenFeeHash\\n        );\\n        // get the default fee amoutn for this token\\n        uint256 defaultFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"pool_fee\\\"))\\n        );\\n        uint256 defaultFee = INFTGemFeeManager(self.feeTracker).fee(\\n            defaultFeeHash\\n        );\\n        defaultFee = defaultFee == 0 ? 2000 : defaultFee;\\n\\n        // get the fee, preferring the token fee if available\\n        uint256 feeNum = poolFee != poolTokenFee\\n            ? (poolTokenFee != 0 ? poolTokenFee : poolFee)\\n            : poolFee;\\n\\n        // set the fee to default if it is 0\\n        return feeNum == 0 ? defaultFee : feeNum;\\n    }\\n\\n    function getMinimumLiquidity(\\n        ComplexPoolData storage self,\\n        address tokenUsed\\n    ) internal view returns (uint256) {\\n        // get the fee for this pool if it exists\\n        uint256 poolDivFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"min_liquidity\\\", address(self.pool)))\\n        );\\n        uint256 poolFee = INFTGemFeeManager(self.feeTracker).fee(\\n            poolDivFeeHash\\n        );\\n        // get the pool fee for this token if it exists\\n        uint256 poolTokenFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"min_liquidity\\\", address(tokenUsed)))\\n        );\\n        uint256 poolTokenFee = INFTGemFeeManager(self.feeTracker).fee(\\n            poolTokenFeeHash\\n        );\\n        // get the default fee amoutn for this token\\n        uint256 defaultFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"min_liquidity\\\"))\\n        );\\n        uint256 defaultFee = INFTGemFeeManager(self.feeTracker).fee(\\n            defaultFeeHash\\n        );\\n        defaultFee = defaultFee == 0 ? 50 : defaultFee;\\n\\n        // get the fee, preferring the token fee if available\\n        uint256 feeNum = poolFee != poolTokenFee\\n            ? (poolTokenFee != 0 ? poolTokenFee : poolFee)\\n            : poolFee;\\n\\n        // set the fee to default if it is 0\\n        return feeNum == 0 ? defaultFee : feeNum;\\n    }\\n\\n    /**\\n     * @dev crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\\n     */\\n    function createERC20Claims(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) public {\\n        // enabled\\n        require(self.enabled == true, \\\"DISABLED\\\");\\n        // must be a valid address\\n        require(erc20token != address(0), \\\"INVALID_ERC20_TOKEN\\\");\\n\\n        // token is allowed\\n        require(\\n            (self.allowedTokens.count() > 0 &&\\n                self.allowedTokens.exists(erc20token)) ||\\n                self.allowedTokens.count() == 0,\\n            \\\"TOKEN_DISALLOWED\\\"\\n        );\\n\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n\\n        // max quantity per claim\\n        require(\\n            (self.maxQuantityPerClaim != 0 &&\\n                count <= self.maxQuantityPerClaim) ||\\n                self.maxQuantityPerClaim == 0,\\n            \\\"MAX_QUANTITY_EXCEEDED\\\"\\n        );\\n        require(\\n            (self.maxClaimsPerAccount != 0 &&\\n                self.claimsMade[msg.sender] < self.maxClaimsPerAccount) ||\\n                self.maxClaimsPerAccount == 0,\\n            \\\"MAX_QUANTITY_EXCEEDED\\\"\\n        );\\n\\n        // require the user to have the input requirements\\n        requireInputReqs(self, msg.sender, count);\\n\\n        // Uniswap pool must exist\\n        require(\\n            ISwapQueryHelper(self.swapHelper).hasPool(erc20token) == true,\\n            \\\"NO_UNISWAP_POOL\\\"\\n        );\\n\\n        // must have an amount specified\\n        require(tokenAmount >= 0, \\\"NO_PAYMENT_INCLUDED\\\");\\n\\n        // get a quote in ETH for the given token.\\n        (\\n            uint256 ethereum,\\n            uint256 tokenReserve,\\n            uint256 ethReserve\\n        ) = ISwapQueryHelper(self.swapHelper).coinQuote(\\n            erc20token,\\n            tokenAmount / (count)\\n        );\\n\\n        // TODO: update liquidity multiple from fee manager\\n        if (self.validateerc20 == true) {\\n            uint256 minLiquidity = getMinimumLiquidity(self, erc20token);\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(\\n                ethReserve >= ethereum * minLiquidity * (count),\\n                \\\"INSUFFICIENT_ETH_LIQUIDITY\\\"\\n            );\\n\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(\\n                tokenReserve >= tokenAmount * minLiquidity * (count),\\n                \\\"INSUFFICIENT_TOKEN_LIQUIDITY\\\"\\n            );\\n        }\\n\\n        // make sure the convertible amount is less than max price\\n        require(ethereum <= self.ethPrice, \\\"OVERPAYMENT\\\");\\n\\n        // calculate the maturity time given the converted eth\\n        uint256 maturityTime = (self.ethPrice * (self.minTime)) / (ethereum);\\n\\n        // make sure the convertible amount is less than max price\\n        require(maturityTime >= self.minTime, \\\"INSUFFICIENT_TIME\\\");\\n\\n        // get the next claim hash, revert if no more claims\\n        uint256 claimHash = nextClaimHash(self);\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, claimHash, 1);\\n        INFTGemMultiToken(self.multitoken).setTokenData(\\n            claimHash,\\n            INFTGemMultiToken.TokenType.CLAIM,\\n            address(this)\\n        );\\n        addToken(self, claimHash, INFTGemMultiToken.TokenType.CLAIM);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 claimUnlockTimestamp = block.timestamp + (maturityTime);\\n        self.claimLockTimestamps[claimHash] = claimUnlockTimestamp;\\n        self.claimAmountPaid[claimHash] = ethereum;\\n        self.claimLockToken[claimHash] = erc20token;\\n        self.claimTokenAmountPaid[claimHash] = tokenAmount;\\n        self.claimQuant[claimHash] = count;\\n        self.claimsMade[msg.sender] = self.claimsMade[msg.sender] + (1);\\n\\n        // tranasfer NFT input requirements from user to pool\\n        takeInputReqsFrom(self, claimHash, msg.sender, count);\\n\\n        // increase staked eth amount\\n        self.totalStakedEth = self.totalStakedEth + (ethereum);\\n\\n        // emit a message indicating that an erc20 claim has been created\\n        emit NFTGemERC20ClaimCreated(\\n            msg.sender,\\n            address(self.pool),\\n            claimHash,\\n            maturityTime,\\n            erc20token,\\n            count,\\n            ethereum\\n        );\\n\\n        // transfer the caller's ERC20 tokens into the pool\\n        IERC20(erc20token).transferFrom(\\n            msg.sender,\\n            address(self.pool),\\n            tokenAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function collectClaim(\\n        ComplexPoolData storage self,\\n        uint256 _claimHash,\\n        bool _requireMature\\n    ) public {\\n        // enabled\\n        require(self.enabled == true, \\\"DISABLED\\\");\\n        // check the maturity of the claim - only issue gem if mature\\n        uint256 unlockTime = self.claimLockTimestamps[_claimHash];\\n        bool isMature = unlockTime < block.timestamp;\\n        require(\\n            !_requireMature || (_requireMature && isMature),\\n            \\\"IMMATURE_CLAIM\\\"\\n        );\\n        __collectClaim(self, _claimHash);\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function __collectClaim(ComplexPoolData storage self, uint256 claimHash)\\n        internal\\n    {\\n        // validation checks - disallow if not owner (holds coin with claimHash)\\n        // or if the unlockTime amd unlockPaid data is in an invalid state\\n        require(\\n            IERC1155(self.multitoken).balanceOf(msg.sender, claimHash) == 1,\\n            \\\"NOT_CLAIM_OWNER\\\"\\n        );\\n        uint256 unlockTime = self.claimLockTimestamps[claimHash];\\n        uint256 unlockPaid = self.claimAmountPaid[claimHash];\\n        require(unlockTime != 0 && unlockPaid > 0, \\\"INVALID_CLAIM\\\");\\n\\n        // grab the erc20 token info if there is any\\n        address tokenUsed = self.claimLockToken[claimHash];\\n        uint256 unlockTokenPaid = self.claimTokenAmountPaid[claimHash];\\n\\n        // check the maturity of the claim - only issue gem if mature\\n        bool isMature = unlockTime < block.timestamp;\\n\\n        //  burn claim and transfer money back to user\\n        INFTGemMultiToken(self.multitoken).burn(msg.sender, claimHash, 1);\\n\\n        // if they used erc20 tokens stake their claim, return their tokens\\n        if (tokenUsed != address(0)) {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                feePortion = unlockTokenPaid / getPoolFee(self, tokenUsed);\\n            }\\n            // assess a fee for minting the NFT. Fee is collectec in fee tracker\\n            IERC20(tokenUsed).transferFrom(\\n                address(self.pool),\\n                self.feeTracker,\\n                feePortion\\n            );\\n            // send the principal minus fees to the caller\\n            IERC20(tokenUsed).transferFrom(\\n                address(self.pool),\\n                msg.sender,\\n                unlockTokenPaid - (feePortion)\\n            );\\n\\n            // emit an event that the claim was redeemed for ERC20\\n            emit NFTGemERC20ClaimRedeemed(\\n                msg.sender,\\n                address(self.pool),\\n                claimHash,\\n                tokenUsed,\\n                unlockPaid,\\n                unlockTokenPaid,\\n                self.claimQuant[claimHash],\\n                feePortion\\n            );\\n        } else {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                feePortion = unlockPaid / getPoolFee(self, address(0));\\n            }\\n            // transfer the ETH fee to fee tracker\\n            payable(self.feeTracker).transfer(feePortion);\\n\\n            // transfer the ETH back to user\\n            payable(msg.sender).transfer(unlockPaid - (feePortion));\\n\\n            // emit an event that the claim was redeemed for ETH\\n            emit NFTGemClaimRedeemed(\\n                msg.sender,\\n                address(self.pool),\\n                claimHash,\\n                unlockPaid,\\n                self.claimQuant[claimHash],\\n                feePortion\\n            );\\n        }\\n\\n        // tranasfer NFT input requirements from pool to user\\n        returnInputReqsTo(\\n            self,\\n            claimHash,\\n            msg.sender,\\n            self.claimQuant[claimHash]\\n        );\\n\\n        // deduct the total staked ETH balance of the pool\\n        self.totalStakedEth = self.totalStakedEth - (unlockPaid);\\n\\n        // if all this is happening before the unlocktime then we exit\\n        // without minting a gem because the user is withdrawing early\\n        if (!isMature) {\\n            return;\\n        }\\n\\n        // get the next gem hash, increase the staking sifficulty\\n        // for the pool, and mint a gem token back to account\\n        uint256 nextHash = nextGemHash(self);\\n\\n        // associate gem and claim\\n        self.gemClaims[nextHash] = claimHash;\\n\\n        // mint the gem\\n        INFTGemMultiToken(self.multitoken).mint(\\n            msg.sender,\\n            nextHash,\\n            self.claimQuant[claimHash]\\n        );\\n        addToken(self, nextHash, INFTGemMultiToken.TokenType.GEM);\\n\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(\\n            msg.sender,\\n            address(self.pool),\\n            claimHash,\\n            nextHash,\\n            self.claimQuant[claimHash]\\n        );\\n    }\\n\\n    /**\\n     * @dev purchase gem(s) at the listed pool price\\n     */\\n    function purchaseGems(\\n        ComplexPoolData storage self,\\n        address sender,\\n        uint256 value,\\n        uint256 count\\n    ) public {\\n        // enabled\\n        require(self.enabled == true, \\\"DISABLED\\\");\\n        // non-zero balance\\n        require(value != 0, \\\"ZERO_BALANCE\\\");\\n        // non-zero quantity\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n        // sufficient input eth\\n        uint256 adjustedBalance = value / (count);\\n        require(adjustedBalance >= self.ethPrice, \\\"INSUFFICIENT_ETH\\\");\\n        require(self.allowPurchase == true, \\\"PURCHASE_DISALLOWED\\\");\\n\\n        // get the next gem hash, increase the staking sifficulty\\n        // for the pool, and mint a gem token back to account\\n        uint256 nextHash = nextGemHash(self);\\n\\n        // mint the gem\\n        INFTGemMultiToken(self.multitoken).mint(sender, nextHash, count);\\n        addToken(self, nextHash, INFTGemMultiToken.TokenType.GEM);\\n\\n        // transfer the funds for the gem to the fee tracker\\n        payable(self.feeTracker).transfer(value);\\n\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(sender, address(self.pool), 0, nextHash, count);\\n    }\\n\\n    /**\\n     * @dev create a token of token hash / token type\\n     */\\n    function addToken(\\n        ComplexPoolData storage self,\\n        uint256 tokenHash,\\n        INFTGemMultiToken.TokenType tokenType\\n    ) public {\\n        require(\\n            tokenType == INFTGemMultiToken.TokenType.CLAIM ||\\n                tokenType == INFTGemMultiToken.TokenType.GEM,\\n            \\\"INVALID_TOKENTYPE\\\"\\n        );\\n        self.tokenHashes.push(tokenHash);\\n        self.tokenTypes[tokenHash] = tokenType;\\n        self.tokenIds[tokenHash] = tokenType ==\\n            INFTGemMultiToken.TokenType.CLAIM\\n            ? nextClaimId(self)\\n            : nextGemId(self);\\n        INFTGemMultiToken(self.multitoken).setTokenData(\\n            tokenHash,\\n            tokenType,\\n            address(this)\\n        );\\n        if (tokenType == INFTGemMultiToken.TokenType.GEM) {\\n            increaseDifficulty(self);\\n        }\\n    }\\n\\n    /**\\n     * @dev get the next claim id\\n     */\\n    function nextClaimId(ComplexPoolData storage self)\\n        public\\n        returns (uint256)\\n    {\\n        uint256 ncId = self.nextClaimIdVal;\\n        self.nextClaimIdVal = self.nextClaimIdVal + (1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev get the next gem id\\n     */\\n    function nextGemId(ComplexPoolData storage self) public returns (uint256) {\\n        uint256 ncId = self.nextGemIdVal;\\n        self.nextGemIdVal = self.nextGemIdVal + (1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\\n     */\\n    function increaseDifficulty(ComplexPoolData storage self) public {\\n        if (\\n            self.priceIncrementType ==\\n            INFTComplexGemPoolData.PriceIncrementType.COMPOUND\\n        ) {\\n            uint256 diffIncrease = self.ethPrice / (self.diffstep);\\n            self.ethPrice = self.ethPrice + (diffIncrease);\\n        } else if (\\n            self.priceIncrementType ==\\n            INFTComplexGemPoolData.PriceIncrementType.INVERSELOG\\n        ) {\\n            uint256 diffIncrease = self.diffstep / (self.ethPrice);\\n            self.ethPrice = self.ethPrice + (diffIncrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev the hash of the next gem to be minted\\n     */\\n    function nextGemHash(ComplexPoolData storage self)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"gem\\\",\\n                        address(self.pool),\\n                        self.nextGemIdVal\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev the hash of the next claim to be minted\\n     */\\n    function nextClaimHash(ComplexPoolData storage self)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (self.maxClaims != 0 && self.nextClaimIdVal <= self.maxClaims) ||\\n                self.maxClaims == 0\\n                ? uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            \\\"claim\\\",\\n                            address(self.pool),\\n                            self.nextClaimIdVal\\n                        )\\n                    )\\n                )\\n                : 0;\\n    }\\n\\n    /**\\n     * @dev get the token hash at index\\n     */\\n    function allTokenHashes(ComplexPoolData storage self, uint256 ndx)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.tokenHashes[ndx];\\n    }\\n\\n    /**\\n     * @dev return the claim amount paid for this claim\\n     */\\n    function claimAmount(ComplexPoolData storage self, uint256 claimHash)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.claimAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the claim quantity (count of gems staked) for the given claim hash\\n     */\\n    function claimQuantity(ComplexPoolData storage self, uint256 claimHash)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.claimQuant[claimHash];\\n    }\\n\\n    /**\\n     * @dev the lock time for this claim hash. once past lock time a gem is minted\\n     */\\n    function claimUnlockTime(ComplexPoolData storage self, uint256 claimHash)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.claimLockTimestamps[claimHash];\\n    }\\n\\n    /**\\n     * @dev return the claim token amount for this claim hash\\n     */\\n    function claimTokenAmount(ComplexPoolData storage self, uint256 claimHash)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.claimTokenAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev return the claim hash of the given gemhash\\n     */\\n    function gemClaimHash(ComplexPoolData storage self, uint256 gemHash)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.gemClaims[gemHash];\\n    }\\n\\n    /**\\n     * @dev return the token that was staked to create the given token hash. 0 if the native token\\n     */\\n    function stakedToken(ComplexPoolData storage self, uint256 claimHash)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return self.claimLockToken[claimHash];\\n    }\\n\\n    /**\\n     * @dev add a token that is allowed to be used to create a claim\\n     */\\n    function addAllowedToken(ComplexPoolData storage self, address token)\\n        public\\n    {\\n        if (!self.allowedTokens.exists(token) && token != WFTM) {\\n            self.allowedTokens.insert(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev  remove a token that is allowed to be used to create a claim\\n     */\\n    function removeAllowedToken(ComplexPoolData storage self, address token)\\n        public\\n    {\\n        if (self.allowedTokens.exists(token)) {\\n            self.allowedTokens.remove(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev deposit into pool\\n     */\\n    function deposit(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        uint256 tokenAmount\\n    ) public {\\n        if (erc20token == address(0)) {\\n            require(msg.sender.balance >= tokenAmount, \\\"INSUFFICIENT_BALANCE\\\");\\n            self.totalStakedEth = self.totalStakedEth + (msg.sender.balance);\\n        } else {\\n            require(\\n                IERC20(erc20token).balanceOf(msg.sender) >= tokenAmount,\\n                \\\"INSUFFICIENT_BALANCE\\\"\\n            );\\n            IERC20(erc20token).transferFrom(\\n                msg.sender,\\n                address(self.pool),\\n                tokenAmount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev deposit NFT into pool\\n     */\\n    function depositNFT(\\n        ComplexPoolData storage self,\\n        address erc1155token,\\n        uint256 tokenId,\\n        uint256 tokenAmount\\n    ) public {\\n        require(\\n            IERC1155(erc1155token).balanceOf(msg.sender, tokenId) >=\\n                tokenAmount,\\n            \\\"INSUFFICIENT_BALANCE\\\"\\n        );\\n        IERC1155(erc1155token).safeTransferFrom(\\n            msg.sender,\\n            address(self.pool),\\n            tokenId,\\n            tokenAmount,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev withdraw pool contents\\n     */\\n    function withdraw(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        address destination,\\n        uint256 tokenAmount\\n    ) public {\\n        require(destination != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(\\n            self.controllers[msg.sender] == true || msg.sender == self.governor,\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        if (erc20token == address(0)) {\\n            payable(destination).transfer(tokenAmount);\\n        } else {\\n            IERC20(erc20token).transferFrom(\\n                address(self.pool),\\n                address(destination),\\n                tokenAmount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraw pool NFT\\n     */\\n    function withdrawNFT(\\n        ComplexPoolData storage self,\\n        address erc1155token,\\n        address destination,\\n        uint256 tokenId,\\n        uint256 tokenAmount\\n    ) public {\\n        require(\\n            self.controllers[msg.sender] == true || msg.sender == self.governor,\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        require(erc1155token != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(destination != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(\\n            IERC1155(erc1155token).balanceOf(address(self.pool), tokenId) >=\\n                tokenAmount,\\n            \\\"INSUFFICIENT_BALANCE\\\"\\n        );\\n        IERC1155(erc1155token).safeTransferFrom(\\n            address(self.pool),\\n            address(destination),\\n            tokenId,\\n            tokenAmount,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev mint the genesis gems earned by the pools creator and funder\\n     */\\n    function mintGenesisGems(\\n        ComplexPoolData storage self,\\n        address creator,\\n        address funder\\n    ) public {\\n        require(self.multitoken != address(0), \\\"NO_MULTITOKEN\\\");\\n        require(\\n            creator != address(0) && funder != address(0),\\n            \\\"ZERO_DESTINATION\\\"\\n        );\\n        require(self.nextGemIdVal == 0, \\\"ALREADY_MINTED\\\");\\n\\n        uint256 gemHash = nextGemHash(self);\\n        INFTGemMultiToken(self.multitoken).mint(creator, gemHash, 1);\\n        addToken(self, gemHash, INFTGemMultiToken.TokenType.GEM);\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(creator, address(self.pool), 0, gemHash, 1);\\n\\n        gemHash = nextGemHash(self);\\n        INFTGemMultiToken(self.multitoken).mint(funder, gemHash, 1);\\n        addToken(self, gemHash, INFTGemMultiToken.TokenType.GEM);\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(funder, address(self.pool), 0, gemHash, 1);\\n    }\\n}\\n\",\"keccak256\":\"0xdc91a001dd49c7b398a85231b9c10bcea5b6cf42db89e343a402a09457e343a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x615a586200003b600b82828239805160001a60731461002e57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101d95760003560e01c80635b68e93c1161010e578063b94677da116100ac578063dc1f0f531161007b578063dc1f0f53146104b5578063e5932f42146104c8578063e5fca79a146104e8578063ecd5244e14610508576101d9565b8063b94677da14610442578063b9f0527414610455578063ca7aa49f14610475578063d9495bce14610495576101d9565b8063828c7b72116100e8578063828c7b72146103cf57806388d496a4146103e25780639630ccd814610402578063afeafd9a14610422576101d9565b80635b68e93c1461036857806376e455e11461038f57806380ca2ba6146103af576101d9565b80632394dcbf1161017b578063401348c911610155578063401348c9146102f557806348126f4b1461031557806350ec7077146103355780635aec67be14610348576101d9565b80632394dcbf146102a257806324ccf5cf146102c257806333c13e0d146102e2576101d9565b80631e427b7f116101b75780631e427b7f1461022d57806320b97bdb14610242578063210dd81014610262578063212f8bbd14610282576101d9565b806301356b6d146101de578063102c13aa14610207578063164cd8c21461021a575b600080fd5b6101f16101ec366004614a6f565b61051b565b6040516101fe9190615850565b60405180910390f35b6101f1610215366004614a6f565b610533565b6101f1610228366004614857565b610549565b61024061023b366004614a01565b6105c3565b005b81801561024e57600080fd5b506101f161025d366004614857565b6109b1565b81801561026e57600080fd5b5061024061027d3660046149b4565b6109d0565b81801561028e57600080fd5b5061024061029d3660046148d5565b610b91565b8180156102ae57600080fd5b506102406102bd366004614a90565b610f54565b8180156102ce57600080fd5b506102406102dd36600461486f565b61134b565b6101f16102f0366004614857565b611398565b81801561030157600080fd5b50610240610310366004614a35565b6113bd565b81801561032157600080fd5b50610240610330366004614b37565b6114df565b6101f1610343366004614a6f565b611561565b81801561035457600080fd5b50610240610363366004614857565b611599565b61037b610376366004614a6f565b61166a565b6040516101fe989796959493929190614e20565b6103a261039d366004614a6f565b6117f9565b6040516101fe9190614db4565b8180156103bb57600080fd5b506102406103ca366004614b9c565b611818565b6101f16103dd366004614857565b611c67565b8180156103ee57600080fd5b506102406103fd366004614a01565b611c6e565b81801561040e57600080fd5b506101f161041d366004614857565b611df7565b81801561042e57600080fd5b5061024061043d366004614a35565b611e16565b6101f1610450366004614a6f565b61246d565b81801561046157600080fd5b5061024061047036600461489a565b612483565b81801561048157600080fd5b50610240610490366004614b6f565b6126a5565b8180156104a157600080fd5b506102406104b036600461486f565b61285d565b6101f16104c3366004614a6f565b61287c565b8180156104d457600080fd5b506102406104e3366004614971565b612892565b8180156104f457600080fd5b50610240610503366004614a35565b6129d6565b6101f1610516366004614a6f565b612bb0565b6000818152601d830160205260409020545b92915050565b6000908152602191909101602052604090205490565b600081600e0154600014158015610568575081600e0154826019015411155b806105755750600e820154155b6105805760006105bb565b815460198301546040516105a1926001600160a01b03169190602001614cfd565b6040516020818303038152906040528051906020012060001c5b90505b919050565b60005b60268401548110156109ab5760008460260182815481106105f757634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160010160149054906101000a900460ff16600281111561063557634e487b7160e01b600052602160045260246000fd5b1415610771578184602601828154811061065f57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016003015461067b91906158f8565b84602601828154811061069e57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a08231906106f5908790600401614db4565b60206040518083038186803b15801561070d57600080fd5b505afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190614bc7565b101561076c5760405162461bcd60e51b815260040161076390615415565b60405180910390fd5b610999565b600184602601828154811061079657634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160010160149054906101000a900460ff1660028111156107d457634e487b7160e01b600052602160045260246000fd5b141561092257818460260182815481106107fe57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016003015461081a91906158f8565b84602601828154811061083d57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546026860180546001600160a01b039092169162fdd58e9187918690811061088557634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600201546040518363ffffffff1660e01b81526004016108b4929190614f04565b60206040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109049190614bc7565b101561076c5760405162461bcd60e51b8152600401610763906151c9565b600284602601828154811061094757634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160010160149054906101000a900460ff16600281111561098557634e487b7160e01b600052602160045260246000fd5b14156109995761099784828585612bc6565b505b6109a46001826158c0565b90506105c6565b50505050565b60188101546000906109c48160016158c0565b60188401559050919050565b33600090815260248601602052604090205460ff16151560011480610a01575060028501546001600160a01b031633145b610a1d5760405162461bcd60e51b815260040161076390615048565b6001600160a01b038416610a435760405162461bcd60e51b8152600401610763906152dc565b6001600160a01b038316610a695760405162461bcd60e51b8152600401610763906152dc565b8454604051627eeac760e11b815282916001600160a01b038088169262fdd58e92610a9a9216908790600401614f04565b60206040518083038186803b158015610ab257600080fd5b505afa158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea9190614bc7565b1015610b085760405162461bcd60e51b815260040161076390614fa3565b84546040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b038681169263f242432a92610b589290911690879087908790600401614ecc565b600060405180830381600087803b158015610b7257600080fd5b505af1158015610b86573d6000803e3d6000fd5b505050505050505050565b6001600160a01b038816610bb75760405162461bcd60e51b815260040161076390615200565b6000866002811115610bd957634e487b7160e01b600052602160045260246000fd5b1480610c0457506001866002811115610c0257634e487b7160e01b600052602160045260246000fd5b145b80610c2e57506002866002811115610c2c57634e487b7160e01b600052602160045260246000fd5b145b610c4a5760405162461bcd60e51b815260040161076390615124565b6002866002811115610c6c57634e487b7160e01b600052602160045260246000fd5b148015610c8157506001600160a01b03871615155b80610cac57506002866002811115610ca957634e487b7160e01b600052602160045260246000fd5b14155b610cc85760405162461bcd60e51b8152600401610763906157bc565b6000866002811115610cea57634e487b7160e01b600052602160045260246000fd5b148015610cf5575084155b80610d1f57506001866002811115610d1d57634e487b7160e01b600052602160045260246000fd5b145b80610d5257506002866002811115610d4757634e487b7160e01b600052602160045260246000fd5b148015610d52575084155b610d6e5760405162461bcd60e51b815260040161076390615528565b83610d8b5760405162461bcd60e51b8152600401610763906154f1565b82158015610d965750815b15610db35760405162461bcd60e51b8152600401610763906150ed565b886026016040518061010001604052808a6001600160a01b03168152602001896001600160a01b03168152602001886002811115610e0157634e487b7160e01b600052602160045260246000fd5b8152602080820189905260408083018990528715156060840152861515608084015285151560a0909301929092528354600180820186556000958652948290208451600590920201805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03938416178255928501519581018054909316959091169490941780825591830151929392917fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000836002811115610ee957634e487b7160e01b600052602160045260246000fd5b0217905550606082015160028201556080820151600382015560a08201516004909101805460c084015160e0909401511515620100000262ff0000199415156101000261ff001994151560ff1990931692909217939093161792909216179055505050505050505050565b60268a01548910610f775760405162461bcd60e51b815260040161076390615483565b6001600160a01b038816610f9d5760405162461bcd60e51b815260040161076390615200565b6000866002811115610fbf57634e487b7160e01b600052602160045260246000fd5b1480610fea57506001866002811115610fe857634e487b7160e01b600052602160045260246000fd5b145b806110145750600286600281111561101257634e487b7160e01b600052602160045260246000fd5b145b6110305760405162461bcd60e51b815260040161076390615124565b600286600281111561105257634e487b7160e01b600052602160045260246000fd5b14801561106757506001600160a01b03871615155b806110925750600286600281111561108f57634e487b7160e01b600052602160045260246000fd5b14155b6110ae5760405162461bcd60e51b8152600401610763906157bc565b60008660028111156110d057634e487b7160e01b600052602160045260246000fd5b1480156110db575084155b806111055750600186600281111561110357634e487b7160e01b600052602160045260246000fd5b145b806111385750600286600281111561112d57634e487b7160e01b600052602160045260246000fd5b148015611138575084155b6111545760405162461bcd60e51b815260040161076390615528565b836111715760405162461bcd60e51b8152600401610763906154f1565b8215801561117c5750815b156111995760405162461bcd60e51b8152600401610763906150ed565b604051806101000160405280896001600160a01b03168152602001886001600160a01b031681526020018760028111156111e357634e487b7160e01b600052602160045260246000fd5b8152602001868152602001858152602001841515815260200183151581526020018215158152508a6026018a8154811061122d57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020835160059092020180546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff199182161782559284015160018201805491909316931692909217808255604084015191907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000008360028111156112df57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160028201556080820151600382015560a08201516004909101805460c084015160e0909401511515620100000262ff0000199415156101000261ff001994151560ff199093169290921793909316179290921617905550505050505050505050565b6113586027830182612fff565b15801561138257506001600160a01b0381167321be370d5312f44cb42ce377bc9b8a0cef1a4c8314155b1561139457611394602783018261306e565b5050565b805460188201546040516000926105a1926001600160a01b0390911691602001614cb5565b604051627eeac760e11b815281906001600160a01b0385169062fdd58e906113eb9033908790600401614f04565b60206040518083038186803b15801561140357600080fd5b505afa158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b9190614bc7565b10156114595760405162461bcd60e51b815260040161076390614fa3565b83546040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b038086169263f242432a926114a7923392169087908790600401614ecc565b600060405180830381600087803b1580156114c157600080fd5b505af11580156114d5573d6000803e3d6000fd5b5050505050505050565b601183015462010000900460ff16151560011461150e5760405162461bcd60e51b8152600401610763906154ba565b6000828152601b8401602052604090205442811082158061153457508280156115345750805b6115505760405162461bcd60e51b815260040161076390615672565b61155a85856130fa565b5050505050565b600082601701828154811061158657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600060118201546301000000900460ff1660028111156115c957634e487b7160e01b600052602160045260246000fd5b141561160257600081600d015482600a01546115e591906158d8565b90508082600a01546115f791906158c0565b600a83015550611667565b600160118201546301000000900460ff16600281111561163257634e487b7160e01b600052602160045260246000fd5b141561166757600081600a015482600d015461164e91906158d8565b90508082600a015461166091906158c0565b600a830155505b50565b6000806000806000806000808960260180549050891061169c5760405162461bcd60e51b815260040161076390615483565b60008a6026018a815481106116c157634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805161010081018252600590930290910180546001600160a01b03908116845260018201549081169484019490945291929083019060ff7401000000000000000000000000000000000000000090910416600281111561173e57634e487b7160e01b600052602160045260246000fd5b600281111561175d57634e487b7160e01b600052602160045260246000fd5b81526002820154602080830191909152600383015460408084019190915260049093015460ff808216151560608086019190915261010083048216151560808087019190915262010000909304909116151560a0948501528551928601519486015190860151918601519386015160c087015160e090970151939f50949d509b5099509097509095509093509150509295985092959890939650565b6000908152601c9190910160205260409020546001600160a01b031690565b601183015462010000900460ff1615156001146118475760405162461bcd60e51b8152600401610763906154ba565b82600b015482101561186b5760405162461bcd60e51b8152600401610763906150b6565b346118885760405162461bcd60e51b81526004016107639061515b565b806118a55760405162461bcd60e51b81526004016107639061534a565b600c830154158015906118bc575082600c01548211155b806118c95750600c830154155b6118e55760405162461bcd60e51b81526004016107639061507f565b600f830154158015906118fc575082600f01548111155b806119095750600f830154155b6119255760405162461bcd60e51b815260040161076390615192565b60108301541580159061194c57506010830154336000908152602585016020526040902054105b8061195957506010830154155b6119755760405162461bcd60e51b815260040161076390615192565b600061198182346158d8565b905060008385600b015486600a015461199a91906158f8565b6119a491906158d8565b9050808210156119c65760405162461bcd60e51b815260040161076390615785565b60006119d186610549565b9050806119f05760405162461bcd60e51b8152600401610763906152a5565b6119fb8633866105c3565b600180870154604051630ab714fb60e11b81526001600160a01b039091169163156e29f691611a31913391869190600401614f1d565b600060405180830381600087803b158015611a4b57600080fd5b505af1158015611a5f573d6000803e3d6000fd5b50505050600186810154604051633e44083b60e11b81526001600160a01b0390911691637c88107691611a98918591309060040161587d565b600060405180830381600087803b158015611ab257600080fd5b505af1158015611ac6573d6000803e3d6000fd5b50505050611ad6868260016126a5565b6000611ae286426158c0565b6000838152601b8901602052604090208190559050611b0185846158f8565b6000838152601d89016020908152604080832093909355601e8a01815282822088905533825260258a0190522054611b3a9060016158c0565b33600081815260258a016020526040902091909155611b5d90889084908861368a565b865460405183916001600160a01b03169033907f7772d56f71cb2b982c42f148cad4839ce0736b201b032c93233f428ba938177490611ba1908b908b908a906158aa565b60405180910390a4611bb385846158f8565b87601a0154611bc291906158c0565b601a880155611bd185846158f8565b341115611c5e57600033611be587866158f8565b611bef903461598b565b604051611bfb90614d45565b60006040518083038185875af1925050503d8060008114611c38576040519150601f19603f3d011682016040523d82523d6000602084013e611c3d565b606091505b50509050806114d55760405162461bcd60e51b815260040161076390615381565b50505050505050565b6026015490565b6001600160a01b038216611cb8573331811115611c9d5760405162461bcd60e51b815260040161076390614fa3565b601a830154611cae903331906158c0565b601a840155611df2565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815281906001600160a01b038416906370a0823190611cff903390600401614db4565b60206040518083038186803b158015611d1757600080fd5b505afa158015611d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4f9190614bc7565b1015611d6d5760405162461bcd60e51b815260040161076390614fa3565b82546040516323b872dd60e01b81526001600160a01b03808516926323b872dd92611da092339216908690600401614ea8565b602060405180830381600087803b158015611dba57600080fd5b505af1158015611dce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab9190614818565b505050565b6019810154600090611e0a8160016158c0565b60198401559050919050565b601184015462010000900460ff161515600114611e455760405162461bcd60e51b8152600401610763906154ba565b6001600160a01b038316611e6b5760405162461bcd60e51b815260040161076390615604565b6000611e7985602701613afb565b118015611e8e5750611e8e6027850184612fff565b80611ea25750611ea084602701613afb565b155b611ebe5760405162461bcd60e51b81526004016107639061526e565b80611edb5760405162461bcd60e51b81526004016107639061534a565b600f84015415801590611ef2575083600f01548111155b80611eff5750600f840154155b611f1b5760405162461bcd60e51b815260040161076390615192565b601084015415801590611f4257506010840154336000908152602586016020526040902054105b80611f4f57506010840154155b611f6b5760405162461bcd60e51b815260040161076390615192565b611f768433836105c3565b6004808501546040517f1246dbf50000000000000000000000000000000000000000000000000000000081526001600160a01b0390911691631246dbf591611fc091879101614db4565b60206040518083038186803b158015611fd857600080fd5b505afa158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190614818565b15156001146120315760405162461bcd60e51b81526004016107639061574e565b6004840154600090819081906001600160a01b031663868d2d1e8761205687896158d8565b6040518363ffffffff1660e01b8152600401612073929190614f04565b60606040518083038186803b15801561208b57600080fd5b505afa15801561209f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c39190614bdf565b60118a0154929550909350915060ff161515600114156121555760006120e98888613b02565b9050846120f682866158f8565b61210091906158f8565b82101561211f5760405162461bcd60e51b815260040161076390615596565b8461212a82886158f8565b61213491906158f8565b8310156121535760405162461bcd60e51b815260040161076390615313565b505b86600a01548311156121795760405162461bcd60e51b815260040161076390615237565b60008388600b015489600a015461219091906158f8565b61219a91906158d8565b905087600b01548110156121c05760405162461bcd60e51b8152600401610763906156e0565b60006121cb89610549565b9050806121ea5760405162461bcd60e51b8152600401610763906152a5565b6001808a0154604051630ab714fb60e11b81526001600160a01b039091169163156e29f691612220913391869190600401614f1d565b600060405180830381600087803b15801561223a57600080fd5b505af115801561224e573d6000803e3d6000fd5b50505050600189810154604051633e44083b60e11b81526001600160a01b0390911691637c88107691612287918591309060040161587d565b600060405180830381600087803b1580156122a157600080fd5b505af11580156122b5573d6000803e3d6000fd5b505050506122c5898260016126a5565b60006122d183426158c0565b6000838152601b8c0160209081526040808320849055601d8e0182528083208a9055601c8e018252808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038f16179055601f8e0182528083208c9055601e8e0182528083208b905533835260258e019091529020549091506123559060016158c0565b33600081815260258d016020526040902091909155612378908b9084908a61368a565b858a601a015461238891906158c0565b601a8b0155895460405183916001600160a01b03169033907fe583bcc9acfcc0488165ba03e5e6613c9cb6a8cc97fd72a3d28b402b0a1830fc906123d39088908f908e908e90615859565b60405180910390a489546040516323b872dd60e01b81526001600160a01b03808c16926323b872dd9261240e92339216908d90600401614ea8565b602060405180830381600087803b15801561242857600080fd5b505af115801561243c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124609190614818565b5050505050505050505050565b6000908152601b91909101602052604090205490565b60018301546001600160a01b03166124ad5760405162461bcd60e51b8152600401610763906155cd565b6001600160a01b038216158015906124cd57506001600160a01b03811615155b6124e95760405162461bcd60e51b815260040161076390614f6c565b60188301541561250b5760405162461bcd60e51b8152600401610763906156a9565b600061251684611398565b600180860154604051630ab714fb60e11b81529293506001600160a01b03169163156e29f69161254c9187918691600401614f1d565b600060405180830381600087803b15801561256657600080fd5b505af115801561257a573d6000803e3d6000fd5b5050505061258a848260026126a5565b83546040517fa684ef88136a415ed987c0b39bc528a16b3e83b511c414590bbe613f38f1a072916125ce9186916001600160a01b0316906000908690600190614e77565b60405180910390a16125df84611398565b600180860154604051630ab714fb60e11b81529293506001600160a01b03169163156e29f6916126159186918691600401614f1d565b600060405180830381600087803b15801561262f57600080fd5b505af1158015612643573d6000803e3d6000fd5b50505050612653848260026126a5565b83546040517fa684ef88136a415ed987c0b39bc528a16b3e83b511c414590bbe613f38f1a072916126979185916001600160a01b0316906000908690600190614e77565b60405180910390a150505050565b60018160028111156126c757634e487b7160e01b600052602160045260246000fd5b14806126f2575060028160028111156126f057634e487b7160e01b600052602160045260246000fd5b145b61270e5760405162461bcd60e51b81526004016107639061563b565b60178301805460018181018355600092835260208084209092018590558483526012860190915260409091208054839260ff199091169083600281111561276557634e487b7160e01b600052602160045260246000fd5b0217905550600181600281111561278c57634e487b7160e01b600052602160045260246000fd5b1461279f5761279a836109b1565b6127a8565b6127a883611df7565b6000838152601385016020526040908190209190915560018401549051633e44083b60e11b81526001600160a01b0390911690637c881076906127f39085908590309060040161587d565b600060405180830381600087803b15801561280d57600080fd5b505af1158015612821573d6000803e3d6000fd5b506002925061282e915050565b81600281111561284e57634e487b7160e01b600052602160045260246000fd5b1415611df257611df283611599565b61286a6027830182612fff565b15611394576113946027830182613d72565b6000908152601f91909101602052604090205490565b6001600160a01b0382166128b85760405162461bcd60e51b8152600401610763906152dc565b33600090815260248501602052604090205460ff161515600114806128e9575060028401546001600160a01b031633145b6129055760405162461bcd60e51b815260040161076390615048565b6001600160a01b03831661294f576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612949573d6000803e3d6000fd5b506109ab565b83546040516323b872dd60e01b81526001600160a01b03858116926323b872dd92612984929091169086908690600401614ea8565b602060405180830381600087803b15801561299e57600080fd5b505af11580156129b2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a9190614818565b601184015462010000900460ff161515600114612a055760405162461bcd60e51b8152600401610763906154ba565b81612a225760405162461bcd60e51b81526004016107639061515b565b80612a3f5760405162461bcd60e51b81526004016107639061534a565b6000612a4b82846158d8565b905084600a0154811015612a715760405162461bcd60e51b815260040161076390615785565b601185015460ff610100909104161515600114612aa05760405162461bcd60e51b81526004016107639061544c565b6000612aab86611398565b6001870154604051630ab714fb60e11b81529192506001600160a01b03169063156e29f690612ae290889085908890600401614f1d565b600060405180830381600087803b158015612afc57600080fd5b505af1158015612b10573d6000803e3d6000fd5b50505050612b20868260026126a5565b60038601546040516001600160a01b039091169085156108fc029086906000818181858888f19350505050158015612b5c573d6000803e3d6000fd5b5085546040517fa684ef88136a415ed987c0b39bc528a16b3e83b511c414590bbe613f38f1a07291612ba09188916001600160a01b03169060009086908990614e77565b60405180910390a1505050505050565b6000908152601e91909101602052604090205490565b600080600083876026018781548110612bef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160030154612c0b91906158f8565b90506000876026018781548110612c3257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546040517fde0099a30000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063de0099a390612c89908990600401614db4565b60006040518083038186803b158015612ca157600080fd5b505afa158015612cb5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cdd919081019061475e565b905060005b8151811015612fd4576000828281518110612d0d57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600280811115612d3757634e487b7160e01b600052602160045260246000fd5b8a6026018a81548110612d5a57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600160059092020101546040517fe6c3b1f60000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e6c3b1f690612db4908590600401615850565b60206040518083038186803b158015612dcc57600080fd5b505afa158015612de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e04919061483b565b6002811115612e2357634e487b7160e01b600052602160045260246000fd5b1415612f4357896026018981548110612e4c57634e487b7160e01b600052603260045260246000fd5b6000918252602082206005909102015460268c0180546001600160a01b039092169750908b908110612e8e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060059091020154604051627eeac760e11b81526001600160a01b039091169062fdd58e90612ecc908c908690600401614f04565b60206040518083038186803b158015612ee457600080fd5b505afa158015612ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1c9190614bc7565b905084811115612f295750835b80612f35575050612fc2565b612f3f8186615917565b9450505b83158015612f8e5750896026018981548110612f6f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005909102016004015462010000900460ff16155b15612f995750612fd4565b6000841215612fc0578315612fc05760405162461bcd60e51b815260040161076390614fda565b505b612fcd6001826158c0565b9050612ce2565b508115612ff35760405162461bcd60e51b815260040161076390615717565b50909695505050505050565b60018201546000906130135750600061052d565b6001600160a01b038216600081815260208590526040902054600185018054909190811061305157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316149392505050565b6130788282612fff565b156130955760405162461bcd60e51b8152600401610763906157f3565b60018281018054808301825560008281526020902001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055546130dc919061598b565b6001600160a01b039091166000908152602092909252604090912055565b6001820154604051627eeac760e11b81526001600160a01b039091169062fdd58e9061312c9033908590600401614f04565b60206040518083038186803b15801561314457600080fd5b505afa158015613158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317c9190614bc7565b60011461319b5760405162461bcd60e51b81526004016107639061555f565b6000818152601b83016020908152604080832054601d86019092529091205481158015906131c95750600081115b6131e55760405162461bcd60e51b815260040161076390615011565b6000838152601c85016020908152604080832054601f8801909252918290205460018088015493517ff5298aca0000000000000000000000000000000000000000000000000000000081526001600160a01b0393841694929342881093169163f5298aca9161325b9133918b9190600401614f1d565b600060405180830381600087803b15801561327557600080fd5b505af1158015613289573d6000803e3d6000fd5b505050506001600160a01b03831615613445576000600182151514156132c0576132b38885613ef8565b6132bd90846158d8565b90505b875460038901546040516323b872dd60e01b81526001600160a01b03808816936323b872dd936132fa939183169216908690600401614ea8565b602060405180830381600087803b15801561331457600080fd5b505af1158015613328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334c9190614818565b5087546001600160a01b03808616916323b872dd91163361336d858861598b565b6040518463ffffffff1660e01b815260040161338b93929190614ea8565b602060405180830381600087803b1580156133a557600080fd5b505af11580156133b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dd9190614818565b5087546000888152601e8a0160205260409081902054905189926001600160a01b03169133917ff5985b088cffe6418e2385594434caa977f4a3b1ddb26380b797cbe94e53bb9d91613437918a918c918b91908a90614f3e565b60405180910390a45061353d565b60006001821515141561346a5761345d886000613ef8565b61346790866158d8565b90505b60038801546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156134a6573d6000803e3d6000fd5b50336108fc6134b5838861598b565b6040518115909202916000818181858888f193505050501580156134dd573d6000803e3d6000fd5b5087546000888152601e8a0160205260409081902054905189926001600160a01b03169133917fdbaea246020c5432ce4ef3acd102558b2e4ce08d9f1f1dffb4eb34fd5d5507fd91613533918b919088906158aa565b60405180910390a4505b61355e8787338a601e0160008b81526020019081526020016000205461413c565b8387601a015461356e919061598b565b601a88015580613582575050505050611394565b600061358d88611398565b600081815260218a01602090815260408083208b905560018c01548b8452601e8d0190925291829020549151630ab714fb60e11b81529293506001600160a01b03169163156e29f6916135e69133918691600401614f1d565b600060405180830381600087803b15801561360057600080fd5b505af1158015613614573d6000803e3d6000fd5b50505050613624888260026126a5565b87546000888152601e8a016020526040908190205490517fa684ef88136a415ed987c0b39bc528a16b3e83b511c414590bbe613f38f1a072926136789233926001600160a01b03909216918c918791614e77565b60405180910390a15050505050505050565b6000805b6026860154811015613a64578560260181815481106136bd57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600590920201015460ff166136dd57613a52565b600086602601828154811061370257634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160010160149054906101000a900460ff16600281111561374057634e487b7160e01b600052602160045260246000fd5b141561385257600086602601828154811061376b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005909102015487546026890180546001600160a01b03938416945084936323b872dd938a93911691899190889081106137bf57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600301546137db91906158f8565b6040518463ffffffff1660e01b81526004016137f993929190614ea8565b602060405180830381600087803b15801561381357600080fd5b505af1158015613827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384b9190614818565b5050613a52565b600186602601828154811061387757634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160010160149054906101000a900460ff1660028111156138b557634e487b7160e01b600052602160045260246000fd5b14156139da5760008660260182815481106138e057634e487b7160e01b600052603260045260246000fd5b600091825260209091206005909102015487546026890180546001600160a01b039384169450849363f242432a938a939116918790811061393157634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160020154888c602601888154811061396757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016003015461398391906158f8565b6040518563ffffffff1660e01b81526004016139a29493929190614ecc565b600060405180830381600087803b1580156139bc57600080fd5b505af11580156139d0573d6000803e3d6000fd5b5050505050613a52565b60028660260182815481106139ff57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160010160149054906101000a900460ff166002811115613a3d57634e487b7160e01b600052602160045260246000fd5b1415613a5257613a4f86828686612bc6565b91505b613a5d6001826158c0565b905061368e565b50600084815260228601602052604090205415801590613a8c57506001600160a01b03811615155b1561155a5784546000858152602287016020908152604080832060238a019092529182902091517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b0385811694632eb2c2d694610b58948a949390921692600401614dc8565b6001015490565b81546040516000918291613b22916001600160a01b031690602001614c72565b60408051601f19818403018152908290528051602090910120600386015463039b37ab60e41b83529092506000916001600160a01b03909116906339b37ab090613b70908590600401615850565b60206040518083038186803b158015613b8857600080fd5b505afa158015613b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc09190614bc7565b9050600084604051602001613bd59190614c72565b60408051601f19818403018152908290528051602090910120600388015463039b37ab60e41b83529092506000916001600160a01b03909116906339b37ab090613c23908590600401615850565b60206040518083038186803b158015613c3b57600080fd5b505afa158015613c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c739190614bc7565b90506000604051602001613c8690614c49565b60408051601f1981840301815290829052805160209091012060038a015463039b37ab60e41b83529092506000916001600160a01b03909116906339b37ab090613cd4908590600401615850565b60206040518083038186803b158015613cec57600080fd5b505afa158015613d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d249190614bc7565b90508015613d325780613d35565b60325b9050600083861415613d475785613d54565b83613d525785613d54565b835b90508015613d625780613d64565b815b9a9950505050505050505050565b613d7c8282612fff565b613d985760405162461bcd60e51b8152600401610763906153b8565b613da28282612fff565b613dab57611394565b60006001613db884613afb565b613dc2919061598b565b6001600160a01b038316600090815260208590526040902054909150808214613e89576000846001018381548110613e0a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352908790526040909120839055600186018054919250829184908110613e5957634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6001600160a01b03831660009081526020859052604081205560018401805480613ec357634e487b7160e01b600052603160045260246000fd5b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905501905550505050565b81546040516000918291613f18916001600160a01b031690602001614d71565b60408051601f19818403018152908290528051602090910120600386015463039b37ab60e41b83529092506000916001600160a01b03909116906339b37ab090613f66908590600401615850565b60206040518083038186803b158015613f7e57600080fd5b505afa158015613f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb69190614bc7565b9050600084604051602001613fcb9190614d71565b60408051601f19818403018152908290528051602090910120600388015463039b37ab60e41b83529092506000916001600160a01b03909116906339b37ab090614019908590600401615850565b60206040518083038186803b15801561403157600080fd5b505afa158015614045573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140699190614bc7565b9050600060405160200161407c90614d48565b60408051601f1981840301815290829052805160209091012060038a015463039b37ab60e41b83529092506000916001600160a01b03909116906339b37ab0906140ca908590600401615850565b60206040518083038186803b1580156140e257600080fd5b505afa1580156140f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061411a9190614bc7565b905080156141285780613d35565b506107d0600085841415613d475785613d54565b6000805b60268601548110156146af57600086602601828154811061417157634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160010160149054906101000a900460ff1660028111156141af57634e487b7160e01b600052602160045260246000fd5b1480156141f857508560260181815481106141da57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060059091020160040154610100900460ff16155b801561423f575085602601818154811061422257634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600590920201015460ff1615156001145b1561434f57600086602601828154811061426957634e487b7160e01b600052603260045260246000fd5b600091825260209091206005909102015487546026890180546001600160a01b03938416945084936323b872dd9316918991899190889081106142bc57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600301546142d891906158f8565b6040518463ffffffff1660e01b81526004016142f693929190614ea8565b602060405180830381600087803b15801561431057600080fd5b505af1158015614324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143489190614818565b505061469d565b600186602601828154811061437457634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160010160149054906101000a900460ff1660028111156143b257634e487b7160e01b600052602160045260246000fd5b1480156143fb57508560260181815481106143dd57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060059091020160040154610100900460ff16155b8015614442575085602601818154811061442557634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600590920201015460ff1615156001145b1561456557600086602601828154811061446c57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005909102015487546026890180546001600160a01b039384169450849363f242432a9316918991879081106144bc57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160020154888c60260188815481106144f257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016003015461450e91906158f8565b6040518563ffffffff1660e01b815260040161452d9493929190614ecc565b600060405180830381600087803b15801561454757600080fd5b505af115801561455b573d6000803e3d6000fd5b505050505061469d565b600286602601828154811061458a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160010160149054906101000a900460ff1660028111156145c857634e487b7160e01b600052602160045260246000fd5b14801561461157508560260181815481106145f357634e487b7160e01b600052603260045260246000fd5b6000918252602090912060059091020160040154610100900460ff16155b8015614658575085602601818154811061463b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600590920201015460ff1615156001145b1561469d5785602601818154811061468057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b031691505b806146a7816159a2565b915050614140565b506000848152602286016020526040902054158015906146d757506001600160a01b03811615155b1561155a5784546000858152602287016020908152604080832060238a019092529182902091517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b0380861694632eb2c2d694610b58949190921692899290600401614dc8565b80356001600160a01b03811681146105be57600080fd5b60006020808385031215614770578182fd5b825167ffffffffffffffff80821115614787578384fd5b818501915085601f83011261479a578384fd5b8151818111156147ac576147ac6159d3565b838102604051858282010181811085821117156147cb576147cb6159d3565b604052828152858101935084860182860187018a10156147e9578788fd5b8795505b8386101561480b5780518552600195909501949386019386016147ed565b5098975050505050505050565b600060208284031215614829578081fd5b815161483481615a07565b9392505050565b60006020828403121561484c578081fd5b815161483481615a15565b600060208284031215614868578081fd5b5035919050565b60008060408385031215614881578081fd5b8235915061489160208401614747565b90509250929050565b6000806000606084860312156148ae578081fd5b833592506148be60208501614747565b91506148cc60408501614747565b90509250925092565b60008060008060008060008060006101208a8c0312156148f3578485fd5b8935985061490360208b01614747565b975061491160408b01614747565b965060608a013561492181615a15565b955060808a0135945060a08a0135935060c08a013561493f81615a07565b925060e08a013561494f81615a07565b91506101008a013561496081615a07565b809150509295985092959850929598565b60008060008060808587031215614986578384fd5b8435935061499660208601614747565b92506149a460408601614747565b9396929550929360600135925050565b600080600080600060a086880312156149cb578081fd5b853594506149db60208701614747565b93506149e960408701614747565b94979396509394606081013594506080013592915050565b600080600060608486031215614a15578283fd5b83359250614a2560208501614747565b9150604084013590509250925092565b60008060008060808587031215614a4a578182fd5b84359350614a5a60208601614747565b93969395505050506040820135916060013590565b60008060408385031215614a81578182fd5b50508035926020909101359150565b6000806000806000806000806000806101408b8d031215614aaf578384fd5b8a35995060208b01359850614ac660408c01614747565b9750614ad460608c01614747565b965060808b0135614ae481615a15565b955060a08b0135945060c08b0135935060e08b0135614b0281615a07565b92506101008b0135614b1381615a07565b91506101208b0135614b2481615a07565b809150509295989b9194979a5092959850565b600080600060608486031215614b4b578081fd5b83359250602084013591506040840135614b6481615a07565b809150509250925092565b600080600060608486031215614b83578081fd5b83359250602084013591506040840135614b6481615a15565b600080600060608486031215614bb0578081fd5b505081359360208301359350604090920135919050565b600060208284031215614bd8578081fd5b5051919050565b600080600060608486031215614bf3578081fd5b8351925060208401519150604084015190509250925092565b6000815480845260208085019450838352808320835b83811015614c3e57815487529582019560019182019101614c22565b509495945050505050565b7f6d696e5f6c6971756964697479000000000000000000000000000000000000008152600d0190565b7f6d696e5f6c697175696469747900000000000000000000000000000000000000815260609190911b6bffffffffffffffffffffffff1916600d82015260210190565b7f67656d0000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff19166003830152601782015260370190565b7f636c61696d000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff19166005830152601982015260390190565b90565b7f706f6f6c5f666565000000000000000000000000000000000000000000000000815260080190565b7f706f6f6c5f666565000000000000000000000000000000000000000000000000815260609190911b6bffffffffffffffffffffffff19166008820152601c0190565b6001600160a01b0391909116815260200190565b60006001600160a01b03808716835280861660208401525060a06040830152614df460a0830185614c0c565b8281036060840152614e068185614c0c565b838103608090940193909352508152602001949350505050565b6001600160a01b038981168252881660208201526101008101614e42886159e9565b60408201979097526060810195909552608085019390935290151560a0840152151560c0830152151560e09091015292915050565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b03959095168552602085019390935260408401919091526060830152608082015260a00190565b60208082526010908201527f5a45524f5f44455354494e4154494f4e00000000000000000000000000000000604082015260600190565b60208082526014908201527f494e53554646494349454e545f42414c414e4345000000000000000000000000604082015260600190565b60208082526015908201527f45584143545f414d4f554e545f52455155495245440000000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f434c41494d00000000000000000000000000000000000000604082015260600190565b6020808252600c908201527f554e415554484f52495a45440000000000000000000000000000000000000000604082015260600190565b60208082526012908201527f54494d454652414d455f544f4f5f4c4f4e470000000000000000000000000000604082015260600190565b60208082526013908201527f54494d454652414d455f544f4f5f53484f525400000000000000000000000000604082015260600190565b60208082526012908201527f494e56414c49445f544f4b454e53544154450000000000000000000000000000604082015260600190565b60208082526011908201527f494e56414c49445f494e50555454595045000000000000000000000000000000604082015260600190565b6020808252600c908201527f5a45524f5f42414c414e43450000000000000000000000000000000000000000604082015260600190565b60208082526015908201527f4d41585f5155414e544954595f45584345454445440000000000000000000000604082015260600190565b60208082526019908201527f554e4d45545f455243313135355f524551554952454d454e5400000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f4f5645525041594d454e54000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f544f4b454e5f444953414c4c4f57454400000000000000000000000000000000604082015260600190565b60208082526011908201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604082015260600190565b6020808252600c908201527f5a45524f5f414444524553530000000000000000000000000000000000000000604082015260600190565b6020808252601c908201527f494e53554646494349454e545f544f4b454e5f4c495155494449545900000000604082015260600190565b6020808252600d908201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604082015260600190565b6020808252600d908201527f524546554e445f4641494c454400000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f416464726573735365743a206b657920646f6573206e6f74206578697374206960408201527f6e20746865207365742e00000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f554e4d45545f45524332305f524551554952454d454e54000000000000000000604082015260600190565b60208082526013908201527f50555243484153455f444953414c4c4f57454400000000000000000000000000604082015260600190565b6020808252600c908201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604082015260600190565b60208082526008908201527f44495341424c4544000000000000000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f5a45524f5f414d4f554e54000000000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f494e56414c49445f544f4b454e49440000000000000000000000000000000000604082015260600190565b6020808252600f908201527f4e4f545f434c41494d5f4f574e45520000000000000000000000000000000000604082015260600190565b6020808252601a908201527f494e53554646494349454e545f4554485f4c4951554944495459000000000000604082015260600190565b6020808252600d908201527f4e4f5f4d554c5449544f4b454e00000000000000000000000000000000000000604082015260600190565b60208082526013908201527f494e56414c49445f45524332305f544f4b454e00000000000000000000000000604082015260600190565b60208082526011908201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604082015260600190565b6020808252600e908201527f494d4d41545552455f434c41494d000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f414c52454144595f4d494e544544000000000000000000000000000000000000604082015260600190565b60208082526011908201527f494e53554646494349454e545f54494d45000000000000000000000000000000604082015260600190565b60208082526015908201527f554e4d45545f47454d5f524551554952454d454e540000000000000000000000604082015260600190565b6020808252600f908201527f4e4f5f554e49535741505f504f4f4c0000000000000000000000000000000000604082015260600190565b60208082526010908201527f494e53554646494349454e545f45544800000000000000000000000000000000604082015260600190565b6020808252600c908201527f494e56414c49445f504f4f4c0000000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f416464726573735365743a206b657920616c726561647920657869737473206960408201527f6e20746865207365742e00000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b8381526060810161588d846159e9565b8360208301526001600160a01b0383166040830152949350505050565b9283526020830191909152604082015260600190565b600082198211156158d3576158d36159bd565b500190565b6000826158f357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615912576159126159bd565b500290565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615615951576159516159bd565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615615985576159856159bd565b50500390565b60008282101561599d5761599d6159bd565b500390565b60006000198214156159b6576159b66159bd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6003811061166757634e487b7160e01b600052602160045260246000fd5b801515811461166757600080fd5b6003811061166757600080fdfea2646970667358221220e4285d8ed8976dbeb04a6a5501cd5eacf06fe960ba149bfedce54d6e25eb2f4764736f6c63430008000033",
  "deployedBytecode": "",
  "libraries": {
    "AddressSet": "0x5d3EFF596b76CAaF5F71176D5B8499BDB7fCb639"
  },
  "devdoc": {
    "events": {
      "NFTGemClaimCreated(address,address,uint256,uint256,uint256,uint256)": {
        "details": "Event generated when an NFT claim is created using base currency"
      },
      "NFTGemClaimRedeemed(address,address,uint256,uint256,uint256,uint256)": {
        "details": "Event generated when an NFT claim is redeemed"
      },
      "NFTGemCreated(address,address,uint256,uint256,uint256)": {
        "details": "Event generated when a gem is created"
      },
      "NFTGemERC20ClaimCreated(address,address,uint256,uint256,address,uint256,uint256)": {
        "details": "Event generated when an NFT claim is created using ERC20 tokens"
      },
      "NFTGemERC20ClaimRedeemed(address,address,uint256,address,uint256,uint256,uint256,uint256)": {
        "details": "Event generated when an NFT erc20 claim is redeemed"
      }
    },
    "kind": "dev",
    "methods": {
      "addAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)": {
        "details": "add a token that is allowed to be used to create a claim"
      },
      "addInputRequirement(ComplexPoolLib.ComplexPoolData storage,address,address,INFTComplexGemPool.RequirementType,uint256,uint256,bool,bool,bool)": {
        "details": "add an input requirement for this token"
      },
      "addToken(ComplexPoolLib.ComplexPoolData storage,uint256,INFTGemMultiToken.TokenType)": {
        "details": "create a token of token hash / token type"
      },
      "allInputRequirements(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "input requirements at index"
      },
      "allInputRequirementsLength(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "count of input requirements"
      },
      "allTokenHashes(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "get the token hash at index"
      },
      "claimAmount(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "return the claim amount paid for this claim"
      },
      "claimQuantity(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "the claim quantity (count of gems staked) for the given claim hash"
      },
      "claimTokenAmount(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "return the claim token amount for this claim hash"
      },
      "claimUnlockTime(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "the lock time for this claim hash. once past lock time a gem is minted"
      },
      "collectClaim(ComplexPoolLib.ComplexPoolData storage,uint256,bool)": {
        "details": "collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)"
      },
      "createClaims(ComplexPoolLib.ComplexPoolData storage,uint256,uint256)": {
        "details": "attempt to create a claim using the given timeframe with count"
      },
      "createERC20Claims(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)": {
        "details": "crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail"
      },
      "deposit(ComplexPoolLib.ComplexPoolData storage,address,uint256)": {
        "details": "deposit into pool"
      },
      "depositNFT(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)": {
        "details": "deposit NFT into pool"
      },
      "gemClaimHash(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "return the claim hash of the given gemhash"
      },
      "increaseDifficulty(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market"
      },
      "mintGenesisGems(ComplexPoolLib.ComplexPoolData storage,address,address)": {
        "details": "mint the genesis gems earned by the pools creator and funder"
      },
      "nextClaimHash(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "the hash of the next claim to be minted"
      },
      "nextClaimId(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "get the next claim id"
      },
      "nextGemHash(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "the hash of the next gem to be minted"
      },
      "nextGemId(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "get the next gem id"
      },
      "purchaseGems(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)": {
        "details": "purchase gem(s) at the listed pool price"
      },
      "removeAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)": {
        "details": "remove a token that is allowed to be used to create a claim"
      },
      "requireInputReqs(ComplexPoolLib.ComplexPoolData storage,address,uint256)": {
        "details": "checks to see that account owns all the pool requirements needed to mint at least the given quantity of NFT"
      },
      "stakedToken(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "return the token that was staked to create the given token hash. 0 if the native token"
      },
      "updateInputRequirement(ComplexPoolLib.ComplexPoolData storage,uint256,address,address,INFTComplexGemPool.RequirementType,uint256,uint256,bool,bool,bool)": {
        "details": "update input requirement at index"
      },
      "withdraw(ComplexPoolLib.ComplexPoolData storage,address,address,uint256)": {
        "details": "withdraw pool contents"
      },
      "withdrawNFT(ComplexPoolLib.ComplexPoolData storage,address,address,uint256,uint256)": {
        "details": "withdraw pool NFT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}