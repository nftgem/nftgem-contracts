{
  "address": "0x11FD8FC9FB835990258f4551130989AEd5071bEB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_availableSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x76852851fd96652ae7da78921ae6f782eb634a7dffe578582bd1bf60e50b70fe",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x11FD8FC9FB835990258f4551130989AEd5071bEB",
    "transactionIndex": 0,
    "gasUsed": "1671978",
    "logsBloom": "0x
    "blockHash": "0x00000cb300004d9d5709f5aefbedf91b1b389806f3f58d6301bc9d101d8ce4d9",
    "transactionHash": "0x76852851fd96652ae7da78921ae6f782eb634a7dffe578582bd1bf60e50b70fe",
    "logs": [],
    "blockNumber": 1200270,
    "cumulativeGasUsed": "1671978",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    0,
    "30000000000000000000000000"
  ],
  "solcInputHash": "7d18b36fc9d0f37073003b6f2b916a6c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_availableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"constructor\":{\"params\":{\"account\":\"The initial account to grant all the tokens\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"mint(address,uint256)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"amount\":\"The address of the account spending the funds\"}},\"transfer(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"The standard EIP-20 approval event\"},\"DelegateChanged(address,address,address)\":{\"notice\":\"An event thats emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event thats emitted when a delegate account's vote balance changes\"},\"Transfer(address,address,uint256)\":{\"notice\":\"The standard EIP-20 transfer event\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"constructor\":{\"notice\":\"Construct a new Comp token\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"A record of each accounts delegate\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"mint(address,uint256)\":{\"notice\":\"Mint the given amount of tokens to the given account\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/governance/GovernanceToken.sol\":\"GovernanceToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"src/governance/GovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IGovernanceMintable.sol\\\";\\n\\ncontract GovernanceToken is IGovernanceMintable {\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"Bitgem\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"BGEM\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    uint256 public availableSupply;\\n\\n    uint256 public totalSupply;\\n\\n    address public minter;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Construct a new Comp token\\n     * @param account The initial account to grant all the tokens\\n     */\\n    constructor(\\n        address account,\\n        uint256 _availableSupply,\\n        uint256 _totalSupply\\n    ) {\\n        minter = account;\\n        totalSupply = _totalSupply;\\n        availableSupply = _availableSupply;\\n        if (_availableSupply > 0) {\\n            balances[account] = uint96(_availableSupply);\\n            emit Transfer(address(0), account, _availableSupply);\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint the given amount of tokens to the given account\\n     * @param account The address of the account holding the funds\\n     * @param amount The address of the account spending the funds\\n     */\\n    function mint(address account, uint256 amount) external override {\\n        require(msg.sender == minter, \\\"sender is not minter\\\");\\n        require(availableSupply + amount <= totalSupply, \\\"over total supply\\\");\\n        availableSupply += amount;\\n        balances[account] += uint96(amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 rawAmount)\\n        external\\n        returns (bool)\\n    {\\n        uint96 amount;\\n        if (rawAmount == type(uint256).max) {\\n            amount = type(uint96).max;\\n        } else {\\n            amount = safe96(rawAmount, \\\"Comp::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\\n        uint96 amount = safe96(\\n            rawAmount,\\n            \\\"Comp::transfer: amount exceeds 96 bits\\\"\\n        );\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 rawAmount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(\\n            rawAmount,\\n            \\\"Comp::approve: amount exceeds 96 bits\\\"\\n        );\\n\\n        if (spender != src && spenderAllowance != type(uint96).max) {\\n            uint96 newAllowance = sub96(\\n                spenderAllowance,\\n                amount,\\n                \\\"Comp::transferFrom: transfer amount exceeds spender allowance\\\"\\n            );\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"Comp::delegateBySig: invalid signature\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"Comp::delegateBySig: invalid nonce\\\"\\n        );\\n        require(\\n            block.timestamp <= expiry,\\n            \\\"Comp::delegateBySig: signature expired\\\"\\n        );\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        returns (uint96)\\n    {\\n        require(\\n            blockNumber < block.number,\\n            \\\"Comp::getPriorVotes: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(\\n        address src,\\n        address dst,\\n        uint96 amount\\n    ) internal {\\n        require(\\n            src != address(0),\\n            \\\"Comp::_transferTokens: cannot transfer from the zero address\\\"\\n        );\\n        require(\\n            dst != address(0),\\n            \\\"Comp::_transferTokens: cannot transfer to the zero address\\\"\\n        );\\n\\n        balances[src] = sub96(\\n            balances[src],\\n            amount,\\n            \\\"Comp::_transferTokens: transfer amount exceeds balance\\\"\\n        );\\n        balances[dst] = add96(\\n            balances[dst],\\n            amount,\\n            \\\"Comp::_transferTokens: transfer amount overflows\\\"\\n        );\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0\\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\\n                    : 0;\\n                uint96 srcRepNew = sub96(\\n                    srcRepOld,\\n                    amount,\\n                    \\\"Comp::_moveVotes: vote amount underflows\\\"\\n                );\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0\\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\\n                    : 0;\\n                uint96 dstRepNew = add96(\\n                    dstRepOld,\\n                    amount,\\n                    \\\"Comp::_moveVotes: vote amount overflows\\\"\\n                );\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(\\n            block.number,\\n            \\\"Comp::_writeCheckpoint: block number exceeds 32 bits\\\"\\n        );\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newVotes\\n            );\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0xe53ac44e03091cc700b843c5f4a6cedd0708c3bb44539922437c8fd3361d3e7c\",\"license\":\"MIT\"},\"src/interfaces/IGovernanceMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IGovernanceMintable {\\n    function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x248d74222c03322db1219687adfab7d97fe4eaaa72d1fbebdc93c8d69157f3a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001db238038062001db28339810160408190526200003491620000d4565b600580546001600160a01b0319166001600160a01b038516179055600481905560038290558115620000cb576001600160a01b03831660008181526001602052604080822080546001600160601b0319166001600160601b038716179055517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90620000c290869062000117565b60405180910390a35b50505062000120565b600080600060608486031215620000e9578283fd5b83516001600160a01b038116811462000100578384fd5b602085015160409095015190969495509392505050565b90815260200190565b611c8280620001306000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806370a08231116100d8578063a9059cbb1161008c578063dd62ed3e11610066578063dd62ed3e14610309578063e7a324dc1461031c578063f1127ed81461032457610182565b8063a9059cbb146102d0578063b4b5ea57146102e3578063c3cda520146102f657610182565b80637ecc2b56116100bd5780637ecc2b56146102ad5780637ecebe00146102b557806395d89b41146102c857610182565b806370a082311461027a578063782d6fe11461028d57610182565b806323b872dd1161013a578063587cde1e11610114578063587cde1e146102345780635c19a95c146102475780636fcfff451461025a57610182565b806323b872dd146101f7578063313ce5671461020a57806340c10f191461021f57610182565b8063095ea7b31161016b578063095ea7b3146101ba57806318160ddd146101da57806320606b70146101ef57610182565b806306fdde031461018757806307546172146101a5575b600080fd5b61018f610345565b60405161019c9190611647565b60405180910390f35b6101ad61037e565b60405161019c91906115b9565b6101cd6101c83660046114be565b61038d565b60405161019c91906115cd565b6101e2610454565b60405161019c91906115d8565b6101e261045a565b6101cd610205366004611483565b61047e565b6102126105c6565b60405161019c9190611966565b61023261022d3660046114be565b6105cb565b005b6101ad610242366004611437565b61069d565b610232610255366004611437565b6106b8565b61026d610268366004611437565b6106c5565b60405161019c9190611936565b6101e2610288366004611437565b6106dd565b6102a061029b3660046114be565b610705565b60405161019c9190611974565b6101e261094f565b6101e26102c3366004611437565b610955565b61018f610967565b6101cd6102de3660046114be565b6109a0565b6102a06102f1366004611437565b6109dc565b6102326103043660046114e7565b610a5b565b6101e2610317366004611451565b610c7d565b6101e2610caf565b610337610332366004611545565b610cd3565b60405161019c929190611947565b6040518060400160405280600681526020017f42697467656d000000000000000000000000000000000000000000000000000081525081565b6005546001600160a01b031681565b6000806000198314156103a857506001600160601b036103cd565b6103ca83604051806060016040528060258152602001611b1260259139610d09565b90505b336000818152602081815260408083206001600160a01b03891680855292529182902080546bffffffffffffffffffffffff19166001600160601b03861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610440908590611974565b60405180910390a360019150505b92915050565b60045481565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001600160a01b0383166000908152602081815260408083203380855290835281842054825160608101909352602580845291936001600160601b039091169285926104d49288929190611b1290830139610d09565b9050866001600160a01b0316836001600160a01b03161415801561050157506001600160601b0382811614155b156105ae57600061052b83836040518060600160405280603d8152602001611be9603d9139610d41565b6001600160a01b03898116600081815260208181526040808320948a16808452949091529081902080546bffffffffffffffffffffffff19166001600160601b0386161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105a4908590611974565b60405180910390a3505b6105b9878783610d8b565b5060019695505050505050565b601281565b6005546001600160a01b031633146105fe5760405162461bcd60e51b81526004016105f59061180e565b60405180910390fd5b6004548160035461060f91906119a2565b111561062d5760405162461bcd60e51b81526004016105f5906118ff565b806003600082825461063f91906119a2565b90915550506001600160a01b038216600090815260016020526040812080548392906106759084906001600160601b03166119e2565b92506101000a8154816001600160601b0302191690836001600160601b031602179055505050565b6002602052600090815260409020546001600160a01b031681565b6106c23382610f40565b50565b60076020526000908152604090205463ffffffff1681565b6001600160a01b0381166000908152600160205260409020546001600160601b03165b919050565b60004382106107265760405162461bcd60e51b81526004016105f590611754565b6001600160a01b03831660009081526007602052604090205463ffffffff168061075457600091505061044e565b6001600160a01b03841660009081526006602052604081208491610779600185611a4c565b63ffffffff908116825260208201929092526040016000205416116107ed576001600160a01b0384166000908152600660205260408120906107bc600184611a4c565b63ffffffff16815260208101919091526040016000205464010000000090046001600160601b0316915061044e9050565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff1683101561082857600091505061044e565b600080610836600184611a4c565b90505b8163ffffffff168163ffffffff161115610909576000600261085b8484611a4c565b6108659190611a04565b61086f9083611a4c565b6001600160a01b038816600090815260066020908152604080832063ffffffff8581168552908352928190208151808301909252549283168082526401000000009093046001600160601b0316918101919091529192508714156108dd5760200151945061044e9350505050565b805163ffffffff168711156108f457819350610902565b6108ff600183611a4c565b92505b5050610839565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546001600160601b036401000000009091041691505092915050565b60035481565b60086020526000908152604090205481565b6040518060400160405280600481526020017f4247454d0000000000000000000000000000000000000000000000000000000081525081565b6000806109c583604051806060016040528060268152602001611b3760269139610d09565b90506109d2338583610d8b565b5060019392505050565b6001600160a01b03811660009081526007602052604081205463ffffffff1680610a07576000610a54565b6001600160a01b038316600090815260066020526040812090610a2b600184611a4c565b63ffffffff16815260208101919091526040016000205464010000000090046001600160601b03165b9392505050565b60408051808201909152600681527f42697467656d000000000000000000000000000000000000000000000000000060209091015260007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667f757a391a7f6d05fe0e88b62ed06dac3933f9266015d6ced3f084b76d63341df6610adc610fe2565b30604051602001610af09493929190611605565b60405160208183030381529060405280519060200120905060007fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf888888604051602001610b4194939291906115e1565b60405160208183030381529060405280519060200120905060008282604051602001610b6e929190611583565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610bab9493929190611629565b6020604051602081039080840390855afa158015610bcd573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c005760405162461bcd60e51b81526004016105f59061169a565b6001600160a01b0381166000908152600860205260408120805491610c2483611a91565b919050558914610c465760405162461bcd60e51b81526004016105f5906117b1565b87421115610c665760405162461bcd60e51b81526004016105f5906116f7565b610c70818b610f40565b505050505b505050505050565b6001600160a01b039182166000908152602081815260408083209390941682529190915220546001600160601b031690565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b600660209081526000928352604080842090915290825290205463ffffffff81169064010000000090046001600160601b031682565b6000816c010000000000000000000000008410610d395760405162461bcd60e51b81526004016105f59190611647565b509192915050565b6000836001600160601b0316836001600160601b031611158290610d785760405162461bcd60e51b81526004016105f59190611647565b50610d838385611a71565b949350505050565b6001600160a01b038316610db15760405162461bcd60e51b81526004016105f5906118a2565b6001600160a01b038216610dd75760405162461bcd60e51b81526004016105f590611845565b6001600160a01b038316600090815260016020908152604091829020548251606081019093526036808452610e22936001600160601b039092169285929190611adc90830139610d41565b6001600160a01b03848116600090815260016020908152604080832080546bffffffffffffffffffffffff19166001600160601b03968716179055928616825290829020548251606081019093526030808452610e8f9491909116928592909190611bb990830139610fe6565b6001600160a01b038381166000818152600160205260409081902080546bffffffffffffffffffffffff19166001600160601b0395909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f01908590611974565b60405180910390a36001600160a01b03808416600090815260026020526040808220548584168352912054610f3b92918216911683611033565b505050565b6001600160a01b03808316600081815260026020818152604080842080546001845282862054949093528787167fffffffffffffffffffffffff000000000000000000000000000000000000000084168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610fdc828483611033565b50505050565b4690565b600080610ff384866119e2565b9050846001600160601b0316816001600160601b03161015839061102a5760405162461bcd60e51b81526004016105f59190611647565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561105e57506000816001600160601b0316115b15610f3b576001600160a01b03831615611124576001600160a01b03831660009081526007602052604081205463ffffffff16908161109e5760006110eb565b6001600160a01b0385166000908152600660205260408120906110c2600185611a4c565b63ffffffff16815260208101919091526040016000205464010000000090046001600160601b03165b905060006111128285604051806060016040528060288152602001611b9160289139610d41565b9050611120868484846111dd565b5050505b6001600160a01b03821615610f3b576001600160a01b03821660009081526007602052604081205463ffffffff16908161115f5760006111ac565b6001600160a01b038416600090815260066020526040812090611183600185611a4c565b63ffffffff16815260208101919091526040016000205464010000000090046001600160601b03165b905060006111d38285604051806060016040528060278152602001611c2660279139610fe6565b9050610c75858484845b600061120143604051806060016040528060348152602001611b5d603491396113f8565b905060008463ffffffff1611801561125b57506001600160a01b038516600090815260066020526040812063ffffffff83169161123f600188611a4c565b63ffffffff908116825260208201929092526040016000205416145b156112df576001600160a01b03851660009081526006602052604081208391611285600188611a4c565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216640100000000027fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff9092169190911790556113ae565b60408051808201825263ffffffff83811682526001600160601b0385811660208085019182526001600160a01b038b166000908152600682528681208b861682529091529490942092518354945163ffffffff199095169216919091177fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff16640100000000939091169290920291909117905561137d8460016119ba565b6001600160a01b0386166000908152600760205260409020805463ffffffff191663ffffffff929092169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72484846040516113e9929190611988565b60405180910390a25050505050565b6000816401000000008410610d395760405162461bcd60e51b81526004016105f59190611647565b80356001600160a01b038116811461070057600080fd5b600060208284031215611448578081fd5b610a5482611420565b60008060408385031215611463578081fd5b61146c83611420565b915061147a60208401611420565b90509250929050565b600080600060608486031215611497578081fd5b6114a084611420565b92506114ae60208501611420565b9150604084013590509250925092565b600080604083850312156114d0578182fd5b6114d983611420565b946020939093013593505050565b60008060008060008060c087890312156114ff578182fd5b61150887611420565b95506020870135945060408701359350606087013560ff8116811461152b578283fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215611557578182fd5b61156083611420565b9150602083013563ffffffff81168114611578578182fd5b809150509250929050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b8181101561167357858101830151858201604001528201611657565b818111156116845783604083870101525b50601f01601f1916929092016040019392505050565b60208082526026908201527f436f6d703a3a64656c656761746542795369673a20696e76616c69642073696760408201527f6e61747572650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f436f6d703a3a64656c656761746542795369673a207369676e6174757265206560408201527f7870697265640000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f436f6d703a3a6765745072696f72566f7465733a206e6f74207965742064657460408201527f65726d696e656400000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f436f6d703a3a64656c656761746542795369673a20696e76616c6964206e6f6e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f73656e646572206973206e6f74206d696e746572000000000000000000000000604082015260600190565b6020808252603a908201527f436f6d703a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260408201527f616e7366657220746f20746865207a65726f2061646472657373000000000000606082015260800190565b6020808252603c908201527f436f6d703a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260408201527f616e736665722066726f6d20746865207a65726f206164647265737300000000606082015260800190565b60208082526011908201527f6f76657220746f74616c20737570706c79000000000000000000000000000000604082015260600190565b63ffffffff91909116815260200190565b63ffffffff9290921682526001600160601b0316602082015260400190565b60ff91909116815260200190565b6001600160601b0391909116815260200190565b6001600160601b0392831681529116602082015260400190565b600082198211156119b5576119b5611aac565b500190565b600063ffffffff8083168185168083038211156119d9576119d9611aac565b01949350505050565b60006001600160601b038083168185168083038211156119d9576119d9611aac565b600063ffffffff80841680611a40577f4e487b710000000000000000000000000000000000000000000000000000000083526012600452602483fd5b92169190910492915050565b600063ffffffff83811690831681811015611a6957611a69611aac565b039392505050565b60006001600160601b0383811690831681811015611a6957611a69611aac565b6000600019821415611aa557611aa5611aac565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfe436f6d703a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365436f6d703a3a617070726f76653a20616d6f756e7420657863656564732039362062697473436f6d703a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473436f6d703a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473436f6d703a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773436f6d703a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773436f6d703a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365436f6d703a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773a2646970667358221220b50e7c6c9b4f04c3eb105f2e1536378a03883e8dcb4b14b1f968de3f4d67220a64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c806370a08231116100d8578063a9059cbb1161008c578063dd62ed3e11610066578063dd62ed3e14610309578063e7a324dc1461031c578063f1127ed81461032457610182565b8063a9059cbb146102d0578063b4b5ea57146102e3578063c3cda520146102f657610182565b80637ecc2b56116100bd5780637ecc2b56146102ad5780637ecebe00146102b557806395d89b41146102c857610182565b806370a082311461027a578063782d6fe11461028d57610182565b806323b872dd1161013a578063587cde1e11610114578063587cde1e146102345780635c19a95c146102475780636fcfff451461025a57610182565b806323b872dd146101f7578063313ce5671461020a57806340c10f191461021f57610182565b8063095ea7b31161016b578063095ea7b3146101ba57806318160ddd146101da57806320606b70146101ef57610182565b806306fdde031461018757806307546172146101a5575b600080fd5b61018f610345565b60405161019c9190611647565b60405180910390f35b6101ad61037e565b60405161019c91906115b9565b6101cd6101c83660046114be565b61038d565b60405161019c91906115cd565b6101e2610454565b60405161019c91906115d8565b6101e261045a565b6101cd610205366004611483565b61047e565b6102126105c6565b60405161019c9190611966565b61023261022d3660046114be565b6105cb565b005b6101ad610242366004611437565b61069d565b610232610255366004611437565b6106b8565b61026d610268366004611437565b6106c5565b60405161019c9190611936565b6101e2610288366004611437565b6106dd565b6102a061029b3660046114be565b610705565b60405161019c9190611974565b6101e261094f565b6101e26102c3366004611437565b610955565b61018f610967565b6101cd6102de3660046114be565b6109a0565b6102a06102f1366004611437565b6109dc565b6102326103043660046114e7565b610a5b565b6101e2610317366004611451565b610c7d565b6101e2610caf565b610337610332366004611545565b610cd3565b60405161019c929190611947565b6040518060400160405280600681526020017f42697467656d000000000000000000000000000000000000000000000000000081525081565b6005546001600160a01b031681565b6000806000198314156103a857506001600160601b036103cd565b6103ca83604051806060016040528060258152602001611b1260259139610d09565b90505b336000818152602081815260408083206001600160a01b03891680855292529182902080546bffffffffffffffffffffffff19166001600160601b03861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610440908590611974565b60405180910390a360019150505b92915050565b60045481565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001600160a01b0383166000908152602081815260408083203380855290835281842054825160608101909352602580845291936001600160601b039091169285926104d49288929190611b1290830139610d09565b9050866001600160a01b0316836001600160a01b03161415801561050157506001600160601b0382811614155b156105ae57600061052b83836040518060600160405280603d8152602001611be9603d9139610d41565b6001600160a01b03898116600081815260208181526040808320948a16808452949091529081902080546bffffffffffffffffffffffff19166001600160601b0386161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105a4908590611974565b60405180910390a3505b6105b9878783610d8b565b5060019695505050505050565b601281565b6005546001600160a01b031633146105fe5760405162461bcd60e51b81526004016105f59061180e565b60405180910390fd5b6004548160035461060f91906119a2565b111561062d5760405162461bcd60e51b81526004016105f5906118ff565b806003600082825461063f91906119a2565b90915550506001600160a01b038216600090815260016020526040812080548392906106759084906001600160601b03166119e2565b92506101000a8154816001600160601b0302191690836001600160601b031602179055505050565b6002602052600090815260409020546001600160a01b031681565b6106c23382610f40565b50565b60076020526000908152604090205463ffffffff1681565b6001600160a01b0381166000908152600160205260409020546001600160601b03165b919050565b60004382106107265760405162461bcd60e51b81526004016105f590611754565b6001600160a01b03831660009081526007602052604090205463ffffffff168061075457600091505061044e565b6001600160a01b03841660009081526006602052604081208491610779600185611a4c565b63ffffffff908116825260208201929092526040016000205416116107ed576001600160a01b0384166000908152600660205260408120906107bc600184611a4c565b63ffffffff16815260208101919091526040016000205464010000000090046001600160601b0316915061044e9050565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff1683101561082857600091505061044e565b600080610836600184611a4c565b90505b8163ffffffff168163ffffffff161115610909576000600261085b8484611a4c565b6108659190611a04565b61086f9083611a4c565b6001600160a01b038816600090815260066020908152604080832063ffffffff8581168552908352928190208151808301909252549283168082526401000000009093046001600160601b0316918101919091529192508714156108dd5760200151945061044e9350505050565b805163ffffffff168711156108f457819350610902565b6108ff600183611a4c565b92505b5050610839565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546001600160601b036401000000009091041691505092915050565b60035481565b60086020526000908152604090205481565b6040518060400160405280600481526020017f4247454d0000000000000000000000000000000000000000000000000000000081525081565b6000806109c583604051806060016040528060268152602001611b3760269139610d09565b90506109d2338583610d8b565b5060019392505050565b6001600160a01b03811660009081526007602052604081205463ffffffff1680610a07576000610a54565b6001600160a01b038316600090815260066020526040812090610a2b600184611a4c565b63ffffffff16815260208101919091526040016000205464010000000090046001600160601b03165b9392505050565b60408051808201909152600681527f42697467656d000000000000000000000000000000000000000000000000000060209091015260007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667f757a391a7f6d05fe0e88b62ed06dac3933f9266015d6ced3f084b76d63341df6610adc610fe2565b30604051602001610af09493929190611605565b60405160208183030381529060405280519060200120905060007fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf888888604051602001610b4194939291906115e1565b60405160208183030381529060405280519060200120905060008282604051602001610b6e929190611583565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610bab9493929190611629565b6020604051602081039080840390855afa158015610bcd573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c005760405162461bcd60e51b81526004016105f59061169a565b6001600160a01b0381166000908152600860205260408120805491610c2483611a91565b919050558914610c465760405162461bcd60e51b81526004016105f5906117b1565b87421115610c665760405162461bcd60e51b81526004016105f5906116f7565b610c70818b610f40565b505050505b505050505050565b6001600160a01b039182166000908152602081815260408083209390941682529190915220546001600160601b031690565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b600660209081526000928352604080842090915290825290205463ffffffff81169064010000000090046001600160601b031682565b6000816c010000000000000000000000008410610d395760405162461bcd60e51b81526004016105f59190611647565b509192915050565b6000836001600160601b0316836001600160601b031611158290610d785760405162461bcd60e51b81526004016105f59190611647565b50610d838385611a71565b949350505050565b6001600160a01b038316610db15760405162461bcd60e51b81526004016105f5906118a2565b6001600160a01b038216610dd75760405162461bcd60e51b81526004016105f590611845565b6001600160a01b038316600090815260016020908152604091829020548251606081019093526036808452610e22936001600160601b039092169285929190611adc90830139610d41565b6001600160a01b03848116600090815260016020908152604080832080546bffffffffffffffffffffffff19166001600160601b03968716179055928616825290829020548251606081019093526030808452610e8f9491909116928592909190611bb990830139610fe6565b6001600160a01b038381166000818152600160205260409081902080546bffffffffffffffffffffffff19166001600160601b0395909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f01908590611974565b60405180910390a36001600160a01b03808416600090815260026020526040808220548584168352912054610f3b92918216911683611033565b505050565b6001600160a01b03808316600081815260026020818152604080842080546001845282862054949093528787167fffffffffffffffffffffffff000000000000000000000000000000000000000084168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610fdc828483611033565b50505050565b4690565b600080610ff384866119e2565b9050846001600160601b0316816001600160601b03161015839061102a5760405162461bcd60e51b81526004016105f59190611647565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561105e57506000816001600160601b0316115b15610f3b576001600160a01b03831615611124576001600160a01b03831660009081526007602052604081205463ffffffff16908161109e5760006110eb565b6001600160a01b0385166000908152600660205260408120906110c2600185611a4c565b63ffffffff16815260208101919091526040016000205464010000000090046001600160601b03165b905060006111128285604051806060016040528060288152602001611b9160289139610d41565b9050611120868484846111dd565b5050505b6001600160a01b03821615610f3b576001600160a01b03821660009081526007602052604081205463ffffffff16908161115f5760006111ac565b6001600160a01b038416600090815260066020526040812090611183600185611a4c565b63ffffffff16815260208101919091526040016000205464010000000090046001600160601b03165b905060006111d38285604051806060016040528060278152602001611c2660279139610fe6565b9050610c75858484845b600061120143604051806060016040528060348152602001611b5d603491396113f8565b905060008463ffffffff1611801561125b57506001600160a01b038516600090815260066020526040812063ffffffff83169161123f600188611a4c565b63ffffffff908116825260208201929092526040016000205416145b156112df576001600160a01b03851660009081526006602052604081208391611285600188611a4c565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216640100000000027fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff9092169190911790556113ae565b60408051808201825263ffffffff83811682526001600160601b0385811660208085019182526001600160a01b038b166000908152600682528681208b861682529091529490942092518354945163ffffffff199095169216919091177fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff16640100000000939091169290920291909117905561137d8460016119ba565b6001600160a01b0386166000908152600760205260409020805463ffffffff191663ffffffff929092169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72484846040516113e9929190611988565b60405180910390a25050505050565b6000816401000000008410610d395760405162461bcd60e51b81526004016105f59190611647565b80356001600160a01b038116811461070057600080fd5b600060208284031215611448578081fd5b610a5482611420565b60008060408385031215611463578081fd5b61146c83611420565b915061147a60208401611420565b90509250929050565b600080600060608486031215611497578081fd5b6114a084611420565b92506114ae60208501611420565b9150604084013590509250925092565b600080604083850312156114d0578182fd5b6114d983611420565b946020939093013593505050565b60008060008060008060c087890312156114ff578182fd5b61150887611420565b95506020870135945060408701359350606087013560ff8116811461152b578283fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215611557578182fd5b61156083611420565b9150602083013563ffffffff81168114611578578182fd5b809150509250929050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b8181101561167357858101830151858201604001528201611657565b818111156116845783604083870101525b50601f01601f1916929092016040019392505050565b60208082526026908201527f436f6d703a3a64656c656761746542795369673a20696e76616c69642073696760408201527f6e61747572650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f436f6d703a3a64656c656761746542795369673a207369676e6174757265206560408201527f7870697265640000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f436f6d703a3a6765745072696f72566f7465733a206e6f74207965742064657460408201527f65726d696e656400000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f436f6d703a3a64656c656761746542795369673a20696e76616c6964206e6f6e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f73656e646572206973206e6f74206d696e746572000000000000000000000000604082015260600190565b6020808252603a908201527f436f6d703a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260408201527f616e7366657220746f20746865207a65726f2061646472657373000000000000606082015260800190565b6020808252603c908201527f436f6d703a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260408201527f616e736665722066726f6d20746865207a65726f206164647265737300000000606082015260800190565b60208082526011908201527f6f76657220746f74616c20737570706c79000000000000000000000000000000604082015260600190565b63ffffffff91909116815260200190565b63ffffffff9290921682526001600160601b0316602082015260400190565b60ff91909116815260200190565b6001600160601b0391909116815260200190565b6001600160601b0392831681529116602082015260400190565b600082198211156119b5576119b5611aac565b500190565b600063ffffffff8083168185168083038211156119d9576119d9611aac565b01949350505050565b60006001600160601b038083168185168083038211156119d9576119d9611aac565b600063ffffffff80841680611a40577f4e487b710000000000000000000000000000000000000000000000000000000083526012600452602483fd5b92169190910492915050565b600063ffffffff83811690831681811015611a6957611a69611aac565b039392505050565b60006001600160601b0383811690831681811015611a6957611a69611aac565b6000600019821415611aa557611aa5611aac565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfe436f6d703a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365436f6d703a3a617070726f76653a20616d6f756e7420657863656564732039362062697473436f6d703a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473436f6d703a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473436f6d703a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773436f6d703a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773436f6d703a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365436f6d703a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773a2646970667358221220b50e7c6c9b4f04c3eb105f2e1536378a03883e8dcb4b14b1f968de3f4d67220a64736f6c63430008000033",
  "libraries": {
    "Strings": "0x9cd2aa68ecCF27b393E825c6fC844eF4217D4c22",
    "AddressSet": "0x22221807f0E47654729213994D40ea8c5e23892F",
    "UInt256Set": "0x0690fedAEc49A5Bd4c2fb723Cf3F0114E57014BC",
    "Create2": "0x931Fd76E170a15918409dBA587F0802da03845AD",
    "WrappedTokenLib": "0x5E99B7A7e6855BEdaa31d0Fca1117bFb7cF23e2e",
    "ComplexPoolLib": "0xc59f6643335979369672a05Db01FeC97fB219608"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "constructor": {
        "params": {
          "account": "The initial account to grant all the tokens"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "account": "The address of the account holding the funds",
          "amount": "The address of the account spending the funds"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "The standard EIP-20 approval event"
      },
      "DelegateChanged(address,address,address)": {
        "notice": "An event thats emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when a delegate account's vote balance changes"
      },
      "Transfer(address,address,uint256)": {
        "notice": "The standard EIP-20 transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "constructor": {
        "notice": "Construct a new Comp token"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "A record of each accounts delegate"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "mint(address,uint256)": {
        "notice": "Mint the given amount of tokens to the given account"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5660,
        "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
        "label": "allowances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))"
      },
      {
        "astId": 5664,
        "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
        "label": "balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 5669,
        "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
        "label": "delegates",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5671,
        "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
        "label": "availableSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5673,
        "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5675,
        "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
        "label": "minter",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5688,
        "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
        "label": "checkpoints",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)5680_storage))"
      },
      {
        "astId": 5693,
        "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 5710,
        "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint96))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint96)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)5680_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct GovernanceToken.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)5680_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)5680_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct GovernanceToken.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)5680_storage"
      },
      "t_struct(Checkpoint)5680_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceToken.Checkpoint",
        "members": [
          {
            "astId": 5677,
            "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5679,
            "contract": "src/governance/GovernanceToken.sol:GovernanceToken",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}