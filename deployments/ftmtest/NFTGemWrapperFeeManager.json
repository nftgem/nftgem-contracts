{
  "address": "0xD1f2DDAEbF89079f22f2C01d98C540D0D04f20CF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "DefaultFeeDivisorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ETHReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FeeDivisorChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOfERC1155",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "balanceOfERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "feeDivisor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "divisor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeDivisor",
          "type": "uint256"
        }
      ],
      "name": "setFeeDivisor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oldDivisor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferERC1155Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferERC20Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x54ecc0b7c7114a19032826817cdd55b320fed3ea427e5e226c6837be14f5a125",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xD1f2DDAEbF89079f22f2C01d98C540D0D04f20CF",
    "transactionIndex": 0,
    "gasUsed": "827003",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x00000b1500000619b385eb4c5088dd06a6ae274906be6207e7e7d1383f9c025c",
    "transactionHash": "0x54ecc0b7c7114a19032826817cdd55b320fed3ea427e5e226c6837be14f5a125",
    "logs": [],
    "blockNumber": 857330,
    "cumulativeGasUsed": "827003",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c56ba75d5114639d0b7a395f04f266ad",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DefaultFeeDivisorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ETHReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FeeDivisorChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOfERC1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOfERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"feeDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeDivisor\",\"type\":\"uint256\"}],\"name\":\"setFeeDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oldDivisor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC1155Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"balanceOfERC1155(address,uint256)\":{\"details\":\"get the token balance of this fee manager\"},\"balanceOfERC20(address)\":{\"details\":\"get the token balance of this fee manager\"},\"constructor\":{\"details\":\"constructor\"},\"ethBalanceOf()\":{\"details\":\"get the ETH balance of this fee manager\"},\"feeDivisor(address)\":{\"details\":\"Get the fee divisor for the specified token\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Check if this address is a controller\"},\"setFeeDivisor(address,uint256)\":{\"details\":\"Set the fee divisor for the specified token\"},\"transferERC1155Token(address,uint256,address,uint256)\":{\"details\":\"transfer tokens from this contract to another contract\"},\"transferERC20Token(address,address,uint256)\":{\"details\":\"transfer tokens from this contract to the to given recipient\"},\"transferEth(address,uint256)\":{\"details\":\"transfer ETH from this contract to the to given recipient\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/fees/NFTGemWrapperFeeManager.sol\":\"NFTGemWrapperFeeManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller) external override onlyController {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address) external view override returns (bool allowed) {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function relinquishControl() external view override onlyController {\\n        _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xd775053cec953f14832c8145de2f04f2259110a29accbc924f5dfe71ea85b095\",\"license\":\"MIT\"},\"src/fees/NFTGemWrapperFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"../interfaces/INFTGemWrapperFeeManager.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\ncontract NFTGemWrapperFeeManager is Controllable, INFTGemWrapperFeeManager {\\n    address private operator;\\n\\n    uint256 private constant FEE_DIVISOR = 2000;\\n\\n    mapping(address => uint256) private feeDivisors;\\n\\n    /**\\n     * @dev constructor\\n     */\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /**\\n     * @dev receive funds\\n     */\\n    receive() external payable {\\n        //\\n    }\\n\\n    /**\\n     * @dev Get the fee divisor for the specified token\\n     */\\n    function feeDivisor(address token) external view override returns (uint256 divisor) {\\n        divisor = feeDivisors[token];\\n        divisor = divisor == 0 ? FEE_DIVISOR : divisor;\\n    }\\n\\n    /**\\n     * @dev Set the fee divisor for the specified token\\n     */\\n    function setFeeDivisor(address token, uint256 _feeDivisor)\\n        external\\n        override\\n        onlyController\\n        returns (uint256 oldDivisor)\\n    {\\n        require(_feeDivisor != 0, \\\"DIVISIONBYZERO\\\");\\n        oldDivisor = feeDivisors[token];\\n        feeDivisors[token] = _feeDivisor;\\n        emit FeeDivisorChanged(operator, token, oldDivisor, _feeDivisor);\\n    }\\n\\n    /**\\n     * @dev get the ETH balance of this fee manager\\n     */\\n    function ethBalanceOf() external view override returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev get the token balance of this fee manager\\n     */\\n    function balanceOfERC20(address token) external view override returns (uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev get the token balance of this fee manager\\n     */\\n    function balanceOfERC1155(address token, uint256 id) external view override returns (uint256) {\\n        return IERC1155(token).balanceOf(address(this), id);\\n    }\\n\\n    /**\\n     * @dev transfer ETH from this contract to the to given recipient\\n     */\\n    function transferEth(address payable recipient, uint256 amount) external override onlyController {\\n        require(address(this).balance >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n        recipient.transfer(amount);\\n    }\\n\\n    /**\\n     * @dev transfer tokens from this contract to the to given recipient\\n     */\\n    function transferERC20Token(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external override onlyController {\\n        require(IERC20(token).balanceOf(address(this)) >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n        IERC20(token).transfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev transfer tokens from this contract to another contract\\n     */\\n    function transferERC1155Token(\\n        address token,\\n        uint256 id,\\n        address recipient,\\n        uint256 amount\\n    ) external override onlyController {\\n        require(IERC1155(token).balanceOf(address(this), id) >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n        IERC1155(token).safeTransferFrom(address(this), recipient, id, amount, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x75f9b50416a7055a94beea610920da2b6cf1a91da0b1eb32da9f284250fecd90\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2f2d8600b126c9f7e41c2d3f94d9cf833ccd0312b74a9563c769743a192f81ca\",\"license\":\"MIT\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6be5c98231ba90ad43bcf7dad027c1a1e7787220565aa3bb24becace05825664\",\"license\":\"MIT\"},\"src/interfaces/INFTGemWrapperFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemWrapperFeeManager {\\n    event DefaultFeeDivisorChanged(address indexed operator, uint256 oldValue, uint256 value);\\n    event FeeDivisorChanged(address indexed operator, address indexed token, uint256 oldValue, uint256 value);\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor) external returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOfERC20(address token) external view returns (uint256);\\n\\n    function balanceOfERC1155(address token, uint256 id) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferERC20Token(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    function transferERC1155Token(\\n        address token,\\n        uint256 id,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5cd8bbd3c3941a6fb63f701760d31dceec7f079bea6fad491254174dc53b4eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610043565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b610dae806100526000396000f3fe6080604052600436106100c05760003560e01c8063b429afeb11610074578063e9bb84c21161004e578063e9bb84c2146102ba578063eee1ad8014610300578063fc05e52814610340576100c7565b8063b429afeb14610211578063d93db24f14610265578063e1c28bef146102a5576100c7565b806392940bf9116100a557806392940bf914610139578063a51834ff1461018b578063a7fc7a07146101d1576100c7565b8063418ae269146100cc5780636b4be0b914610124576100c7565b366100c757005b600080fd5b3480156100d857600080fd5b50610112600480360360408110156100ef57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610394565b60408051918252519081900360200190f35b34801561013057600080fd5b50610112610437565b34801561014557600080fd5b506101896004803603606081101561015c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561043b565b005b34801561019757600080fd5b50610112600480360360408110156101ae57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610655565b3480156101dd57600080fd5b50610189600480360360208110156101f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166107ab565b34801561021d57600080fd5b506102516004803603602081101561023457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610871565b604080519115158252519081900360200190f35b34801561027157600080fd5b506101126004803603602081101561028857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661089c565b3480156102b157600080fd5b50610189610937565b3480156102c657600080fd5b50610189600480360360408110156102dd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109b9565b34801561030c57600080fd5b506101126004803603602081101561032357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ae7565b34801561034c57600080fd5b506101896004803603608081101561036357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135169060600135610b23565b60008273ffffffffffffffffffffffffffffffffffffffff1662fdd58e30846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561040457600080fd5b505afa158015610418573d6000803e3d6000fd5b505050506040513d602081101561042e57600080fd5b50519392505050565b4790565b3360009081526020819052604090205460ff1615156001148061045d57503033145b6104b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561051a57600080fd5b505afa15801561052e573d6000803e3d6000fd5b505050506040513d602081101561054457600080fd5b505110156105b357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e53554646494349454e545f42414c414e4345000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561062457600080fd5b505af1158015610638573d6000803e3d6000fd5b505050506040513d602081101561064e57600080fd5b5050505050565b3360009081526020819052604081205460ff1615156001148061067757503033145b6106cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b8161073857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4449564953494f4e42595a45524f000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff80831660008181526002602090815260409182902080549086905560015483518281529283018790528351919516927f8f604bc5c2d1916032a90c8f4d7cdc0dff78f1ba11119344f3fe46ddea179544928290030190a392915050565b3360009081526020819052604090205460ff161515600114806107cd57503033145b610822576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561090557600080fd5b505afa158015610919573d6000803e3d6000fd5b505050506040513d602081101561092f57600080fd5b505192915050565b3360009081526020819052604090205460ff1615156001148061095957503033145b6109ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b336000908152602052565b3360009081526020819052604090205460ff161515600114806109db57503033145b610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b80471015610a9f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e53554646494349454e545f42414c414e4345000000000000000000000000604482015290519081900360640190fd5b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610ae2573d6000803e3d6000fd5b505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260205260409020548015610b195780610b1d565b6107d05b92915050565b3360009081526020819052604090205460ff16151560011480610b4557503033145b610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b808473ffffffffffffffffffffffffffffffffffffffff1662fdd58e30866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015610c0957600080fd5b505afa158015610c1d573d6000803e3d6000fd5b505050506040513d6020811015610c3357600080fd5b50511015610ca257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e53554646494349454e545f42414c414e4345000000000000000000000000604482015290519081900360640190fd5b604080517ff242432a00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8481166024830152604482018690526064820184905260a06084830152600060a4830181905292519087169263f242432a9260e4808201939182900301818387803b158015610d3257600080fd5b505af1158015610d46573d6000803e3d6000fd5b505050505050505056fe436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a2646970667358221220930e882cf1ffb9e2fc6e374b0bb1ddc3dab6fdcddca9426272c728dd9f2f060e64736f6c63430007030033",
  "deployedBytecode": "0x6080604052600436106100c05760003560e01c8063b429afeb11610074578063e9bb84c21161004e578063e9bb84c2146102ba578063eee1ad8014610300578063fc05e52814610340576100c7565b8063b429afeb14610211578063d93db24f14610265578063e1c28bef146102a5576100c7565b806392940bf9116100a557806392940bf914610139578063a51834ff1461018b578063a7fc7a07146101d1576100c7565b8063418ae269146100cc5780636b4be0b914610124576100c7565b366100c757005b600080fd5b3480156100d857600080fd5b50610112600480360360408110156100ef57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610394565b60408051918252519081900360200190f35b34801561013057600080fd5b50610112610437565b34801561014557600080fd5b506101896004803603606081101561015c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561043b565b005b34801561019757600080fd5b50610112600480360360408110156101ae57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610655565b3480156101dd57600080fd5b50610189600480360360208110156101f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166107ab565b34801561021d57600080fd5b506102516004803603602081101561023457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610871565b604080519115158252519081900360200190f35b34801561027157600080fd5b506101126004803603602081101561028857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661089c565b3480156102b157600080fd5b50610189610937565b3480156102c657600080fd5b50610189600480360360408110156102dd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109b9565b34801561030c57600080fd5b506101126004803603602081101561032357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ae7565b34801561034c57600080fd5b506101896004803603608081101561036357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135169060600135610b23565b60008273ffffffffffffffffffffffffffffffffffffffff1662fdd58e30846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561040457600080fd5b505afa158015610418573d6000803e3d6000fd5b505050506040513d602081101561042e57600080fd5b50519392505050565b4790565b3360009081526020819052604090205460ff1615156001148061045d57503033145b6104b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561051a57600080fd5b505afa15801561052e573d6000803e3d6000fd5b505050506040513d602081101561054457600080fd5b505110156105b357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e53554646494349454e545f42414c414e4345000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561062457600080fd5b505af1158015610638573d6000803e3d6000fd5b505050506040513d602081101561064e57600080fd5b5050505050565b3360009081526020819052604081205460ff1615156001148061067757503033145b6106cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b8161073857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4449564953494f4e42595a45524f000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff80831660008181526002602090815260409182902080549086905560015483518281529283018790528351919516927f8f604bc5c2d1916032a90c8f4d7cdc0dff78f1ba11119344f3fe46ddea179544928290030190a392915050565b3360009081526020819052604090205460ff161515600114806107cd57503033145b610822576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561090557600080fd5b505afa158015610919573d6000803e3d6000fd5b505050506040513d602081101561092f57600080fd5b505192915050565b3360009081526020819052604090205460ff1615156001148061095957503033145b6109ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b336000908152602052565b3360009081526020819052604090205460ff161515600114806109db57503033145b610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b80471015610a9f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e53554646494349454e545f42414c414e4345000000000000000000000000604482015290519081900360640190fd5b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610ae2573d6000803e3d6000fd5b505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260205260409020548015610b195780610b1d565b6107d05b92915050565b3360009081526020819052604090205460ff16151560011480610b4557503033145b610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610d516028913960400191505060405180910390fd5b808473ffffffffffffffffffffffffffffffffffffffff1662fdd58e30866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015610c0957600080fd5b505afa158015610c1d573d6000803e3d6000fd5b505050506040513d6020811015610c3357600080fd5b50511015610ca257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e53554646494349454e545f42414c414e4345000000000000000000000000604482015290519081900360640190fd5b604080517ff242432a00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8481166024830152604482018690526064820184905260a06084830152600060a4830181905292519087169263f242432a9260e4808201939182900301818387803b158015610d3257600080fd5b505af1158015610d46573d6000803e3d6000fd5b505050505050505056fe436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a2646970667358221220930e882cf1ffb9e2fc6e374b0bb1ddc3dab6fdcddca9426272c728dd9f2f060e64736f6c63430007030033",
  "libraries": {
    "GovernanceLib": "0x8B4207A13a5a13bDb2bBf15c137820e61e3c4AAc",
    "Strings": "0x98cCd9cb27398a6595f15cbC4b63AC525b942aad",
    "SafeMath": "0xD34a551B4a262230a373D376dDf8aADb2B0D49FD",
    "AddressSet": "0x54812B41409912bD065E9d3920ce196Ff9BFc995",
    "UInt256Set": "0x893E99de295978142943783D817940854B7a6533",
    "Create2": "0x358266069e53B88520472B2898791A77d92E4054",
    "ProposalsLib": "0xF4899C94a0319825b341775E4387b1C5081b9d1B",
    "ComplexPoolLib": "0xd8bf0D941FC41e44f383d78183807669c230BDed",
    "WrappedTokenLib": "0xbAfcEF1739ab31E775687D657178640124A20E8e",
    "Unigem20Library": "0xdCAA8b65EAe68Df6dD4688d1a542bfb84Ca1891e"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "balanceOfERC1155(address,uint256)": {
        "details": "get the token balance of this fee manager"
      },
      "balanceOfERC20(address)": {
        "details": "get the token balance of this fee manager"
      },
      "constructor": {
        "details": "constructor"
      },
      "ethBalanceOf()": {
        "details": "get the ETH balance of this fee manager"
      },
      "feeDivisor(address)": {
        "details": "Get the fee divisor for the specified token"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Check if this address is a controller"
      },
      "setFeeDivisor(address,uint256)": {
        "details": "Set the fee divisor for the specified token"
      },
      "transferERC1155Token(address,uint256,address,uint256)": {
        "details": "transfer tokens from this contract to another contract"
      },
      "transferERC20Token(address,address,uint256)": {
        "details": "transfer tokens from this contract to the to given recipient"
      },
      "transferEth(address,uint256)": {
        "details": "transfer ETH from this contract to the to given recipient"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10169,
        "contract": "src/fees/NFTGemWrapperFeeManager.sol:NFTGemWrapperFeeManager",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 16915,
        "contract": "src/fees/NFTGemWrapperFeeManager.sol:NFTGemWrapperFeeManager",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16922,
        "contract": "src/fees/NFTGemWrapperFeeManager.sol:NFTGemWrapperFeeManager",
        "label": "feeDivisors",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}