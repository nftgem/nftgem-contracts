{
  "address": "0xd26BdcEaB481423C773D82687277FA58a2eDB1BE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gemCreateUID",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "category",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethPrice",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBitgemIndexer.GemPool",
          "name": "pool",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "gemHash",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "gemPoolFactory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBitgemIndexer.Gem",
          "name": "gem",
          "type": "tuple"
        }
      ],
      "name": "GemCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "opener",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "factoryAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IBitgemIndexer.LootboxFactory",
          "name": "factory",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBitgemIndexer.Lootbox",
          "name": "lootbox",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lootHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lootbox",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBitgemIndexer.Loot[]",
          "name": "receivedLoot",
          "type": "tuple[]"
        }
      ],
      "name": "LootboxOpened",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gemMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "gemHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemPoolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gemPoolFactoriesMap",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "category",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gemPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "category",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gemPoolsMap",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "category",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gemsByFactory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "gemHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemPoolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gemsByMinter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "gemHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemPoolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gemsByMultitoken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "gemHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemPoolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gemsByPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "gemHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gemPoolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gemPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getOwnedGems",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "gems",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "category",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBitgemIndexer.GemPool",
          "name": "gemPool",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "gemHash",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "gemPoolFactory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBitgemIndexer.Gem",
          "name": "gem",
          "type": "tuple"
        }
      ],
      "name": "indexGem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gemPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "indexGemPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "gemHash",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "gemPoolFactory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBitgemIndexer.Gem[]",
          "name": "gems",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x10ae1f1653fe437e0643008f02600d36a816077a1aad9ce53934c2cffd030991",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xd26BdcEaB481423C773D82687277FA58a2eDB1BE",
    "transactionIndex": 0,
    "gasUsed": "2126937",
    "logsBloom": "0x
    "blockHash": "0x00000d92000005ab644f7a362a836636cc9bc64ae9a556beabaf89dfa684cc0e",
    "transactionHash": "0x10ae1f1653fe437e0643008f02600d36a816077a1aad9ce53934c2cffd030991",
    "logs": [],
    "blockNumber": 1566202,
    "cumulativeGasUsed": "2126937",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b3aca09260278d33fac105eaeaa8855b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gemCreateUID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBitgemIndexer.GemPool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBitgemIndexer.Gem\",\"name\":\"gem\",\"type\":\"tuple\"}],\"name\":\"GemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"opener\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IBitgemIndexer.LootboxFactory\",\"name\":\"factory\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBitgemIndexer.Lootbox\",\"name\":\"lootbox\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lootHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootbox\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBitgemIndexer.Loot[]\",\"name\":\"receivedLoot\",\"type\":\"tuple[]\"}],\"name\":\"LootboxOpened\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gemMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gemPoolFactoriesMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gemPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gemPoolsMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gemsByFactory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gemsByMinter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gemsByMultitoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gemsByPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getOwnedGems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"gems\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IBitgemIndexer.GemPool\",\"name\":\"gemPool\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct IBitgemIndexer.Gem\",\"name\":\"gem\",\"type\":\"tuple\"}],\"name\":\"indexGem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"indexGemPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct IBitgemIndexer.Gem[]\",\"name\":\"gems\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The name of the author\",\"details\":\"Explain to a developer any extra details\",\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"}},\"title\":\"A title that should describe the contract/interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Explain to an end user what this does\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/indexer/BitgemIndexer.sol\":\"BitgemIndexer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa31f752b3b092c788ea06a6dced266db79c4407d69733d78bc15e519f39e1d3f\",\"license\":\"MIT\"},\"src/indexer/BitgemIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"../interfaces/ITokenSeller.sol\\\";\\nimport \\\"../interfaces/IBitgemIndexer.sol\\\";\\n\\n/// @dev The gem indexer indexes all historical gems from legacy contracts and\\n/// produces a series of events that get indexed by thegraph indexer. this is\\n/// necessary because the legacy contracts generate events from library code,\\n/// making things not work in thegraph.\\n\\n/// @title A title that should describe the contract/interface\\n/// @author The name of the author\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\ncontract BitgemIndexer is IBitgemIndexer, Controllable {\\n    mapping(uint256 => Gem) public gemMap;\\n    mapping(address => Gem[]) public gemsByMinter;\\n    mapping(address => Gem[]) public gemsByFactory;\\n    mapping(address => Gem[]) public gemsByMultitoken;\\n    mapping(address => Gem[]) public gemsByPool;\\n\\n    GemPool[] public gemPools;\\n    mapping(address => GemPool) public gemPoolsMap;\\n    mapping(address => GemPool) public gemPoolFactoriesMap;\\n\\n    constructor() {\\n        _addController(address(this));\\n    }\\n\\n    function _makeId(Gem memory gem) internal pure returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        gem.gemHash,\\n                        gem.minter,\\n                        gem.gemPoolFactory,\\n                        gem.multitoken,\\n                        gem.pool,\\n                        gem.quantity\\n                    )\\n                )\\n            );\\n    }\\n\\n    function indexGemPool(\\n        address gemPool,\\n        address multitoken,\\n        uint256 page,\\n        uint256 count\\n    ) external override returns (Gem[] memory gems) {\\n        uint256 allTokenHashesLength = IGemPoolData(gemPool)\\n            .allTokenHashesLength();\\n        require((page * count) + count <= allTokenHashesLength, \\\"OUT_OF_RANGE\\\");\\n\\n        uint256 gemLen = 0;\\n        gems = new Gem[](count);\\n\\n        for (\\n            uint256 i = page * count;\\n            i < ((page * count) + count) && i < allTokenHashesLength;\\n            i++\\n        ) {\\n            uint256 claimHash = 0;\\n            try IGemPoolData(gemPool).allTokenHashes(i) returns (\\n                uint256 _claimHash\\n            ) {\\n                claimHash = _claimHash;\\n            } catch {\\n                continue;\\n            }\\n\\n            INFTGemMultiToken.TokenType tokenType = IGemPoolData(gemPool)\\n                .tokenType(claimHash);\\n\\n            if (tokenType == INFTGemMultiToken.TokenType.GEM) {\\n                uint256 allTokenHoldersLength = INFTGemMultiToken(multitoken)\\n                    .allTokenHoldersLength(claimHash);\\n                if (allTokenHoldersLength != 0) {\\n                    for (uint256 j = 0; j < allTokenHoldersLength; j++) {\\n                        (\\n                            GemPool memory _gemPool,\\n                            Gem memory _gem\\n                        ) = _createGemObjects(\\n                                multitoken,\\n                                gemPool,\\n                                i,\\n                                claimHash\\n                            );\\n                        if (_indexGem(_gemPool, _gem)) {\\n                            gems[gemLen++] = _gem;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _createGemObjects(\\n        address multitoken,\\n        address gemPool,\\n        uint256 i,\\n        uint256 claimHash\\n    ) internal view returns (GemPool memory _gemPool, Gem memory _gem) {\\n        address holder = INFTGemMultiToken(multitoken).allTokenHolders(\\n            i,\\n            claimHash\\n        );\\n        (\\n            string memory settingsSymbol,\\n            string memory settingsName,\\n            string memory settingsDescription,\\n            uint256 settingsCategory,\\n            uint256 settingsEthPrice,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = IGemPoolData(gemPool).settings();\\n        _gemPool = GemPool(\\n            address(0),\\n            multitoken,\\n            gemPool,\\n            settingsSymbol,\\n            settingsName,\\n            settingsDescription,\\n            settingsCategory,\\n            settingsEthPrice\\n        );\\n        uint256 balance = IERC1155(multitoken).balanceOf(holder, claimHash);\\n        if (balance != 0) {\\n            _gem = Gem(\\n                0,\\n                settingsSymbol,\\n                settingsName,\\n                claimHash,\\n                holder,\\n                gemPool,\\n                multitoken,\\n                gemPool,\\n                balance\\n            );\\n            _gem.id = _makeId(_gem);\\n        }\\n    }\\n\\n    function getOwnedGems(\\n        address gemPool,\\n        address multitoken,\\n        address account,\\n        uint256 page,\\n        uint256 count\\n    ) external view override returns (uint256[] memory gems) {\\n        uint256 gemLen = 0;\\n        gems = new uint256[](count);\\n\\n        for (uint256 i = page * count; i < (page * count) + count; i++) {\\n            uint256 claimHash = 0;\\n            try IGemPoolData(gemPool).allTokenHashes(i) returns (\\n                uint256 _claimHash\\n            ) {\\n                claimHash = _claimHash;\\n            } catch {\\n                continue;\\n            }\\n\\n            INFTGemMultiToken.TokenType tokenType = IGemPoolData(gemPool)\\n                .tokenType(claimHash);\\n\\n            uint256 bal = IERC1155(multitoken).balanceOf(account, claimHash);\\n            if (\\n                tokenType != INFTGemMultiToken.TokenType.GEM ||\\n                bal == 0 ||\\n                claimHash == 0 ||\\n                claimHash == 1\\n            ) continue;\\n\\n            if (tokenType == INFTGemMultiToken.TokenType.GEM)\\n                gems[gemLen++] = claimHash;\\n        }\\n    }\\n\\n    function _indexGem(GemPool memory gemPool, Gem memory gem)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 gemId = _makeId(gem);\\n        if (gemMap[gemId].id != 0) {\\n            return false;\\n        }\\n        gem.id = gemId;\\n        gemMap[gemId] = gem;\\n        gemsByMinter[gem.minter].push(gem);\\n        gemsByFactory[gem.gemPoolFactory].push(gem);\\n        gemsByMultitoken[gem.multitoken].push(gem);\\n        gemsByPool[gem.pool].push(gem);\\n        if (gemPoolsMap[gem.pool].multitoken == address(0)) {\\n            gemPoolsMap[gem.pool] = gemPool;\\n            gemPools.push(gemPool);\\n        }\\n\\n        emit GemCreated(gem.id, gemPool, gem);\\n        return true;\\n    }\\n\\n    function indexGem(GemPool memory gemPool, Gem memory gem)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        return _indexGem(gemPool, gem);\\n    }\\n}\\n\",\"keccak256\":\"0xaa09bb09d9a0f0892d8e06e31bf5b5d2ac0beff0eac8ee4479724e383be6bbc0\",\"license\":\"MIT\"},\"src/interfaces/IBitgemIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./INFTGemMultiToken.sol\\\";\\n\\n/// @dev The gem indexer indexes all historical gems from legacy contracts and\\n/// produces a series of events that get indexed by thegraph indexer. this is\\n/// necessary because the legacy contracts generate events from library code,\\n/// making things not work in thegraph.\\n\\ninterface IGemPoolData {\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash)\\n        external\\n        view\\n        returns (INFTGemMultiToken.TokenType);\\n\\n    function settings()\\n        external\\n        view\\n        returns (\\n            string memory settingsSymbol,\\n            string memory settingsName,\\n            string memory settingsDescription,\\n            uint256 settingsCategory,\\n            uint256 settingsEthPrice,\\n            uint256 settingsMinTime,\\n            uint256 settingsMaxTime,\\n            uint256 settingsDiffStep,\\n            uint256 settingsMacClaims,\\n            uint256 settingsMaxQuantityPerClaim,\\n            uint256 settingsMaxClaimsPerAccount\\n        );\\n}\\n\\ninterface IBitgemIndexer {\\n    struct GemPoolFactory {\\n        address factoryAddress;\\n    }\\n    struct GemPool {\\n        address factory;\\n        address multitoken;\\n        address poolAddress;\\n        string symbol;\\n        string name;\\n        string description;\\n        uint256 category;\\n        uint256 ethPrice;\\n    }\\n    struct Gem {\\n        uint256 id;\\n        string symbol;\\n        string name;\\n        uint256 gemHash;\\n        address pool;\\n        address minter;\\n        address gemPoolFactory;\\n        address multitoken;\\n        uint256 quantity;\\n    }\\n    struct LootboxFactory {\\n        address factoryAddress;\\n    }\\n    struct Lootbox {\\n        address poolAddress;\\n        string symbol;\\n        string name;\\n        string description;\\n        address factory;\\n        address multitoken;\\n        uint256 quantity;\\n    }\\n    struct Loot {\\n        uint256 id;\\n        string symbol;\\n        string name;\\n        string description;\\n        uint256 lootHash;\\n        uint256 lootbox;\\n        address minter;\\n        address factory;\\n        address multitoken;\\n        uint256 probability;\\n        uint256 quantity;\\n    }\\n    struct SwapMeet {\\n        address swapMeetAddress;\\n    }\\n    struct Offer {\\n        uint256 id;\\n        address swapMeet;\\n        address owner;\\n        address pool;\\n        uint256 gem;\\n        uint256 quantity;\\n        address[] pools;\\n        uint256[] gems;\\n        uint256[] quantities;\\n        uint256 listingFee;\\n        uint256 acceptFee;\\n        uint256 references;\\n        bool missingTokenPenalty;\\n    }\\n    event GemCreated(uint256 indexed gemCreateUID, GemPool pool, Gem gem);\\n    event LootboxOpened(\\n        address opener,\\n        LootboxFactory factory,\\n        Lootbox lootbox,\\n        Loot[] receivedLoot\\n    );\\n\\n    function indexGem(GemPool memory gemPool, Gem memory gem)\\n        external\\n        returns (bool);\\n\\n    function getOwnedGems(\\n        address gemPool,\\n        address multitoken,\\n        address account,\\n        uint256 page,\\n        uint256 count\\n    ) external view returns (uint256[] memory gems);\\n\\n    function indexGemPool(\\n        address gemPool,\\n        address multitoken,\\n        uint256 page,\\n        uint256 count\\n    ) external returns (Gem[] memory gems);\\n}\\n\",\"keccak256\":\"0x29e56c874bc854adacba98b55aad27f4eb87a0b827d3c48f86d3be2ee038f8f5\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    struct Royalty {\\n        address owner;\\n        uint256 royaltyPermillion;\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function setRoyaltyInfo(\\n        uint256 _tokenId,\\n        address _owner,\\n        uint256 feePermil\\n    ) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0x1d54431d4f990265d8a0c692430e75c5c77870b78f19264069e1cfe86d7464c0\",\"license\":\"MIT\"},\"src/interfaces/ITokenSeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @dev A token seller is a contract that can sell tokens to a token buyer.\\n/// The token buyer can buy tokens from the seller by paying a certain amount\\n/// of base currency to receive a certain amount of erc1155 tokens. the number\\n/// of tokens that can be bought is limited by the seller - the seller can\\n/// specify the maximum number of tokens that can be bought per transaction\\n/// and the maximum number of tokens that can be bought in total for a given\\n/// address. The seller can also specify the price of erc1155 tokens and how\\n/// that price increases per successful transaction. the token seller assumes\\n/// supply of the erc1155 is unlimited and features a request method\\n\\ninterface ITokenSeller {\\n    enum BuyPriceIncreaseRateType {\\n        NONE,\\n        FIXED,\\n        EXPONENTIAL,\\n        INVERSELOG\\n    }\\n\\n    struct TokenSellerInfo {\\n        address multitoken;\\n        address contractAddress;\\n        address owner;\\n        uint256 tokenHash;\\n        uint256 buyPrice;\\n        BuyPriceIncreaseRateType buyPriceIncreaseRateType;\\n        uint256 buyPriceIncreaseRate;\\n        uint256 maxQuantity;\\n        uint256 maxBuyAmount;\\n        uint256 maxTotalBuyAmount;\\n        uint256 saleStartTime;\\n        uint256 saleEndTime;\\n        bool initialized;\\n        bool open;\\n        uint256 totalPurchased;\\n    }\\n\\n    event TokenSellerCreated(address indexed creator, TokenSellerInfo info);\\n\\n    event Sold(\\n        address indexed contractAddress,\\n        address indexed buyer,\\n        uint256 indexed tokenHash,\\n        uint256 price,\\n        uint256 amount\\n    );\\n\\n    event Requested(\\n        address indexed contractAddress,\\n        address indexed seller,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n\\n    event Funded(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n\\n    event FundsCollected(address indexed receiver, uint256 indexed amount);\\n\\n    event TokenSellerMigrated(\\n        address indexed migrator,\\n        address indexed hash,\\n        address indexed oldContractAddress,\\n        address newContractAddress,\\n        TokenSellerInfo data\\n    );\\n\\n    function initialize(address tokenSellerData, TokenSellerInfo memory _info)\\n        external;\\n\\n    function isInitialized() external view returns (bool);\\n\\n    function getInfo() external view returns (TokenSellerInfo memory);\\n\\n    function setInfo(TokenSellerInfo memory _info) external;\\n\\n    /// @dev Buy tokens from the token seller.\\n    /// @param _amount The amount of erc1155 tokens to buy.\\n    /// @return The amount of erc1155 tokens that were bought.\\n    function buy(uint256 _amount) external payable returns (uint256);\\n\\n    /// @dev Request tokens from the token provider.\\n    /// @param _recipient The address of the token receiver.\\n    /// @param _amount The amount of erc1155 tokens to buy.\\n    /// @return The amount of erc1155 tokens that were requested.\\n    function request(address _recipient, uint256 _amount)\\n        external\\n        returns (uint256);\\n\\n    function receivePayout(address payable _recipient) external;\\n}\\n\",\"keccak256\":\"0x8783cfa454e469fc9425161cdc4336a2ea0db1379ad2828de0ab9197c36ea43c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3061001f565b610043565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b612524806100526000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b429afeb1161008c578063d7b20e6b11610066578063d7b20e6b146101fb578063e1c28bef1461021b578063e4cbbc7b14610223578063ef3c4a0514610236576100ea565b8063b429afeb146101b5578063c6e8a9e4146101d5578063d0290656146101e8576100ea565b806360daabda116100c857806360daabda1461015a578063677808aa1461016d5780638c54baf01461018d578063a7fc7a07146101a0576100ea565b80630551f733146100ef5780630f4c5ccf146101205780635890b53a14610133575b600080fd5b6101026100fd366004611ccd565b610249565b60405161011799989796959493929190612321565b60405180910390f35b61010261012e366004611ccd565b6103d7565b610146610141366004611bef565b6103f3565b604051610117989796959493929190612082565b610146610168366004611bef565b6105dc565b61018061017b366004611c2e565b61061a565b6040516101179190612170565b61010261019b366004611ccd565b610923565b6101b36101ae366004611bef565b61093f565b005b6101c86101c3366004611bef565b6109aa565b60405161011791906121b4565b6101c86101e3366004611df8565b6109c8565b6101026101f6366004611f1a565b6109dd565b61020e610209366004611c88565b6109fe565b6040516101179190612110565b6101b3610de0565b610146610231366004611f1a565b610e37565b610102610244366004611ccd565b610e89565b6003602052816000526040600020818154811061026557600080fd5b90600052602060002090600902016000915091505080600001549080600101805461028f90612454565b80601f01602080910402602001604051908101604052809291908181526020018280546102bb90612454565b80156103085780601f106102dd57610100808354040283529160200191610308565b820191906000526020600020905b8154815290600101906020018083116102eb57829003601f168201915b50505050509080600201805461031d90612454565b80601f016020809104026020016040519081016040528092919081815260200182805461034990612454565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505060038301546004840154600585015460068601546007870154600890970154959693956001600160a01b0393841695509183169390831692169089565b6005602052816000526040600020818154811061026557600080fd5b60076020526000908152604090208054600182015460028301546003840180546001600160a01b039485169593851694909216929161043190612454565b80601f016020809104026020016040519081016040528092919081815260200182805461045d90612454565b80156104aa5780601f1061047f576101008083540402835291602001916104aa565b820191906000526020600020905b81548152906001019060200180831161048d57829003601f168201915b5050505050908060040180546104bf90612454565b80601f01602080910402602001604051908101604052809291908181526020018280546104eb90612454565b80156105385780601f1061050d57610100808354040283529160200191610538565b820191906000526020600020905b81548152906001019060200180831161051b57829003601f168201915b50505050509080600501805461054d90612454565b80601f016020809104026020016040519081016040528092919081815260200182805461057990612454565b80156105c65780601f1061059b576101008083540402835291602001916105c6565b820191906000526020600020905b8154815290600101906020018083116105a957829003601f168201915b5050505050908060060154908060070154905088565b60086020526000908152604090208054600182015460028301546003840180546001600160a01b039485169593851694909216929161043190612454565b606060008267ffffffffffffffff81111561064557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561066e578160200160208202803683370190505b509150600061067d8486612405565b90505b8361068b8187612405565b61069591906123ed565b811015610918576040517fd31674db0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038a169063d31674db906106e4908590600401612318565b60206040518083038186803b1580156106fc57600080fd5b505afa92505050801561072c575060408051601f3d908101601f1916820190925261072991810190611f32565b60015b6107365750610906565b90506040517fe6c3b1f60000000000000000000000000000000000000000000000000000000081526000906001600160a01b038b169063e6c3b1f690610780908590600401612318565b60206040518083038186803b15801561079857600080fd5b505afa1580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190611cf8565b90506000896001600160a01b031662fdd58e8a856040518363ffffffff1660e01b81526004016108019291906120f7565b60206040518083038186803b15801561081957600080fd5b505afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190611f32565b9050600282600281111561087557634e487b7160e01b600052602160045260246000fd5b141580610880575080155b80610889575082155b806108945750826001145b156108a157505050610906565b60028260028111156108c357634e487b7160e01b600052602160045260246000fd5b1415610902578286866108d58161248f565b9750815181106108f557634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5050505b806109108161248f565b915050610680565b505095945050505050565b6004602052816000526040600020818154811061026557600080fd5b3360009081526020819052604090205460ff1615156001148061096157503033145b6109865760405162461bcd60e51b815260040161097d906121f6565b60405180910390fd5b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b60006109d48383610ea5565b90505b92915050565b60016020819052600091825260409091208054918101805461028f90612454565b60606000856001600160a01b031663f4fde0d36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3b57600080fd5b505afa158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a739190611f32565b90508083610a818187612405565b610a8b91906123ed565b1115610aa95760405162461bcd60e51b815260040161097d906121bf565b60008367ffffffffffffffff811115610ad257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b0b57816020015b610af8611909565b815260200190600190039081610af05790505b5092506000610b1a8587612405565b90505b84610b288188612405565b610b3291906123ed565b81108015610b3f57508281105b15610dd5576040517fd31674db0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038a169063d31674db90610b8c908590600401612318565b60206040518083038186803b158015610ba457600080fd5b505afa925050508015610bd4575060408051601f3d908101601f19168201909252610bd191810190611f32565b60015b610bde5750610dc3565b90506040517fe6c3b1f60000000000000000000000000000000000000000000000000000000081526000906001600160a01b038b169063e6c3b1f690610c28908590600401612318565b60206040518083038186803b158015610c4057600080fd5b505afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190611cf8565b90506002816002811115610c9c57634e487b7160e01b600052602160045260246000fd5b1415610dc0576040517ff68ee90e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038b169063f68ee90e90610cea908690600401612318565b60206040518083038186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190611f32565b90508015610dbe5760005b81811015610dbc57600080610d5c8d8f8989611617565b91509150610d6a8282610ea5565b15610da757808a89610d7b8161248f565b9a5081518110610d9b57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b50508080610db49061248f565b915050610d45565b505b505b50505b80610dcd8161248f565b915050610b1d565b505050949350505050565b3360009081526020819052604090205460ff16151560011480610e0257503033145b610e1e5760405162461bcd60e51b815260040161097d906121f6565b336000908152602081905260409020805460ff19169055565b60068181548110610e4757600080fd5b600091825260209091206008909102018054600182015460028301546003840180546001600160a01b0394851696509284169493909116929161043190612454565b6002602052816000526040600020818154811061026557600080fd5b600080610eb1836118b2565b60008181526001602052604090205490915015610ed25760009150506109d7565b80835260008181526001602081815260409092208551815582860151805187949293610f0393908501920190611979565b5060408201518051610f1f916002840191602090910190611979565b5060608201516003820155608082015160048201805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161790915560a080850151600585018054841691851691909117905560c0850151600685018054841691851691909117905560e08501516007850180549093169084161790915561010090930151600890920191909155908401511660009081526002602090815260408220805460018181018355918452928290208651600990940201928355818601518051879493610ff6938501920190611979565b5060408201518051611012916002840191602090910190611979565b506060820151600382810191909155608083015160048301805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161790915560a0850151600585018054831691841691909117905560c080860151600686018054841691851691909117905560e086015160078601805490931690841617909155610100909401516008909301929092559185015116600090815260209182526040812080546001818101835591835291839020865160099093020191825582860151805187946110ea938501920190611979565b5060408201518051611106916002840191602090910190611979565b506060820151600382015560808201516004808301805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039485161790915560a0850151600585018054831691851691909117905560c0850151600685018054831691851691909117905560e080860151600786018054909316908516179091556101009094015160089093019290925591850151909116600090815260209182526040812080546001818101835591835291839020865160099093020191825582860151805187946111dd938501920190611979565b50604082015180516111f9916002840191602090910190611979565b506060820151600382015560808083015160048301805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161790915560a08501516005808601805484169285169290921790915560c0860151600686018054841691851691909117905560e0860151600786018054909316908416179091556101009094015160089093019290925585015116600090815260209182526040812080546001818101835591835291839020865160099093020191825582860151805187946112ce938501920190611979565b50604082015180516112ea916002840191602090910190611979565b506060820151600382015560808083015160048301805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161790915560a0850151600585018054831691841691909117905560c0850151600685018054831691841691909117905560e085015160078086018054909316918416919091179091556101009094015160089093019290925585015181166000908152602092909252604090912060010154166115d15760808301516001600160a01b039081166000908152600760209081526040918290208751815490851673ffffffffffffffffffffffffffffffffffffffff19918216178255828901516001830180549187169183169190911790559288015160028201805491909516931692909217909255606086015180518793611428926003850192910190611979565b5060808201518051611444916004840191602090910190611979565b5060a08201518051611460916005840191602090910190611979565b5060c082015160068281019190915560e090920151600790910155805460018101825560009190915284517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f6008909202918201805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161782556020808901517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4086018054841691861691909117905560408901517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d418601805490931694169390931790556060870151805188949293611581937ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4201920190611979565b506080820151805161159d916004840191602090910190611979565b5060a082015180516115b9916005840191602090910190611979565b5060c0820151816006015560e0820151816007015550505b82516040517f8c1ee35fa3a9dd5c4e2bfc4b7d4a9b944abf3f202ed9ec14c95708f08696a00c906116059087908790612253565b60405180910390a25060019392505050565b61161f6119fd565b611627611909565b6040517f740ec99e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0388169063740ec99e90611671908890889060040161238d565b60206040518083038186803b15801561168957600080fd5b505afa15801561169d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c19190611c12565b905060008060008060008a6001600160a01b031663e06174e46040518163ffffffff1660e01b815260040160006040518083038186803b15801561170457600080fd5b505afa158015611718573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117409190810190611d17565b5050505050509450945094509450945060405180610100016040528060006001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b0316815260200186815260200185815260200184815260200183815260200182815250975060008c6001600160a01b031662fdd58e888c6040518363ffffffff1660e01b81526004016117d79291906120f7565b60206040518083038186803b1580156117ef57600080fd5b505afa158015611803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118279190611f32565b905080156118a257604051806101200160405280600081526020018781526020018681526020018b8152602001886001600160a01b031681526020018d6001600160a01b031681526020018e6001600160a01b031681526020018d6001600160a01b0316815260200182815250975061189f886118b2565b88525b5050505050505094509492505050565b600081606001518260a001518360c001518460e0015185608001518661010001516040516020016118e89695949392919061202a565b6040516020818303038152906040528051906020012060001c90505b919050565b6040518061012001604052806000815260200160608152602001606081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081525090565b82805461198590612454565b90600052602060002090601f0160209004810192826119a757600085556119ed565b82601f106119c057805160ff19168380011785556119ed565b828001600101855582156119ed579182015b828111156119ed5782518255916020019190600101906119d2565b506119f9929150611a5d565b5090565b60405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081525090565b5b808211156119f95760008155600101611a5e565b8035611904816124d6565b600082601f830112611a8d578081fd5b8135611aa0611a9b826123c5565b61239b565b818152846020838601011115611ab4578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611ade578081fd5b8151611aec611a9b826123c5565b818152846020838601011115611b00578283fd5b611b11826020830160208701612424565b949350505050565b6000610120808385031215611b2c578182fd5b611b358161239b565b91505081358152602082013567ffffffffffffffff80821115611b5757600080fd5b611b6385838601611a7d565b60208401526040840135915080821115611b7c57600080fd5b50611b8984828501611a7d565b60408301525060608201356060820152611ba560808301611a72565b6080820152611bb660a08301611a72565b60a0820152611bc760c08301611a72565b60c0820152611bd860e08301611a72565b60e082015261010080830135818301525092915050565b600060208284031215611c00578081fd5b8135611c0b816124d6565b9392505050565b600060208284031215611c23578081fd5b8151611c0b816124d6565b600080600080600060a08688031215611c45578081fd5b8535611c50816124d6565b94506020860135611c60816124d6565b93506040860135611c70816124d6565b94979396509394606081013594506080013592915050565b60008060008060808587031215611c9d578384fd5b8435611ca8816124d6565b93506020850135611cb8816124d6565b93969395505050506040820135916060013590565b60008060408385031215611cdf578182fd5b8235611cea816124d6565b946020939093013593505050565b600060208284031215611d09578081fd5b815160038110611c0b578182fd5b60008060008060008060008060008060006101608c8e031215611d38578586fd5b8b5167ffffffffffffffff811115611d4e578687fd5b611d5a8e828f01611ace565b9b505060208c015167ffffffffffffffff811115611d76578687fd5b611d828e828f01611ace565b9a505060408c015167ffffffffffffffff811115611d9e578687fd5b611daa8e828f01611ace565b99505060608c0151975060808c0151965060a08c0151955060c08c0151945060e08c015193506101008c015192506101208c015191506101408c015190509295989b509295989b9093969950565b60008060408385031215611e0a578182fd5b823567ffffffffffffffff80821115611e21578384fd5b8185019150610100808388031215611e37578485fd5b611e408161239b565b9050611e4b83611a72565b8152611e5960208401611a72565b6020820152611e6a60408401611a72565b6040820152606083013582811115611e80578586fd5b611e8c88828601611a7d565b606083015250608083013582811115611ea3578586fd5b611eaf88828601611a7d565b60808301525060a083013582811115611ec6578586fd5b611ed288828601611a7d565b60a08301525060c083013560c082015260e083013560e0820152809450506020850135915080821115611f03578283fd5b50611f1085828601611b19565b9150509250929050565b600060208284031215611f2b578081fd5b5035919050565b600060208284031215611f43578081fd5b5051919050565b6001600160a01b03169052565b60008151808452611f6f816020860160208601612424565b601f01601f19169290920160200192915050565b6000610120825184526020830151816020860152611fa382860182611f57565b91505060408301518482036040860152611fbd8282611f57565b915050606083015160608501526080830151611fdc6080860182611f4a565b5060a0830151611fef60a0860182611f4a565b5060c083015161200260c0860182611f4a565b5060e083015161201560e0860182611f4a565b50610100928301519390920192909252919050565b9586527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b8116602088015293851b8416603487015291841b8316604886015290921b16605c830152607082015260900190565b60006101006001600160a01b03808c168452808b166020850152808a166040850152508060608401526120b781840189611f57565b905082810360808401526120cb8188611f57565b905082810360a08401526120df8187611f57565b60c0840195909552505060e001529695505050505050565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561216357603f19888603018452612151858351611f83565b94509285019290850190600101612135565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156121a85783518352928401929184019160010161218c565b50909695505050505050565b901515815260200190565b6020808252600c908201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b600060408252612267604083018551611f4a565b60208401516122796060840182611f4a565b50604084015161228c6080840182611f4a565b5060608401516101008060a08501526122a9610140850183611f57565b91506080860151603f19808685030160c08701526122c78483611f57565b935060a08801519150808685030160e0870152506122e58382611f57565b92505060c0860151818501525060e0850151610120840152828103602084015261230f8185611f83565b95945050505050565b90815260200190565b60006101208b835280602084015261233b8184018c611f57565b9050828103604084015261234f818b611f57565b606084019990995250506001600160a01b03958616608082015293851660a085015291841660c084015290921660e082015261010001529392505050565b918252602082015260400190565b60405181810167ffffffffffffffff811182821017156123bd576123bd6124c0565b604052919050565b600067ffffffffffffffff8211156123df576123df6124c0565b50601f01601f191660200190565b60008219821115612400576124006124aa565b500190565b600081600019048311821515161561241f5761241f6124aa565b500290565b60005b8381101561243f578181015183820152602001612427565b8381111561244e576000848401525b50505050565b60028104600182168061246857607f821691505b6020821081141561248957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156124a3576124a36124aa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146124eb57600080fd5b5056fea26469706673582212209b3d6a9091f7eb1fc2482f140e9664b63c2a5e1cce8387baebdcd32b92decbdf64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b429afeb1161008c578063d7b20e6b11610066578063d7b20e6b146101fb578063e1c28bef1461021b578063e4cbbc7b14610223578063ef3c4a0514610236576100ea565b8063b429afeb146101b5578063c6e8a9e4146101d5578063d0290656146101e8576100ea565b806360daabda116100c857806360daabda1461015a578063677808aa1461016d5780638c54baf01461018d578063a7fc7a07146101a0576100ea565b80630551f733146100ef5780630f4c5ccf146101205780635890b53a14610133575b600080fd5b6101026100fd366004611ccd565b610249565b60405161011799989796959493929190612321565b60405180910390f35b61010261012e366004611ccd565b6103d7565b610146610141366004611bef565b6103f3565b604051610117989796959493929190612082565b610146610168366004611bef565b6105dc565b61018061017b366004611c2e565b61061a565b6040516101179190612170565b61010261019b366004611ccd565b610923565b6101b36101ae366004611bef565b61093f565b005b6101c86101c3366004611bef565b6109aa565b60405161011791906121b4565b6101c86101e3366004611df8565b6109c8565b6101026101f6366004611f1a565b6109dd565b61020e610209366004611c88565b6109fe565b6040516101179190612110565b6101b3610de0565b610146610231366004611f1a565b610e37565b610102610244366004611ccd565b610e89565b6003602052816000526040600020818154811061026557600080fd5b90600052602060002090600902016000915091505080600001549080600101805461028f90612454565b80601f01602080910402602001604051908101604052809291908181526020018280546102bb90612454565b80156103085780601f106102dd57610100808354040283529160200191610308565b820191906000526020600020905b8154815290600101906020018083116102eb57829003601f168201915b50505050509080600201805461031d90612454565b80601f016020809104026020016040519081016040528092919081815260200182805461034990612454565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505060038301546004840154600585015460068601546007870154600890970154959693956001600160a01b0393841695509183169390831692169089565b6005602052816000526040600020818154811061026557600080fd5b60076020526000908152604090208054600182015460028301546003840180546001600160a01b039485169593851694909216929161043190612454565b80601f016020809104026020016040519081016040528092919081815260200182805461045d90612454565b80156104aa5780601f1061047f576101008083540402835291602001916104aa565b820191906000526020600020905b81548152906001019060200180831161048d57829003601f168201915b5050505050908060040180546104bf90612454565b80601f01602080910402602001604051908101604052809291908181526020018280546104eb90612454565b80156105385780601f1061050d57610100808354040283529160200191610538565b820191906000526020600020905b81548152906001019060200180831161051b57829003601f168201915b50505050509080600501805461054d90612454565b80601f016020809104026020016040519081016040528092919081815260200182805461057990612454565b80156105c65780601f1061059b576101008083540402835291602001916105c6565b820191906000526020600020905b8154815290600101906020018083116105a957829003601f168201915b5050505050908060060154908060070154905088565b60086020526000908152604090208054600182015460028301546003840180546001600160a01b039485169593851694909216929161043190612454565b606060008267ffffffffffffffff81111561064557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561066e578160200160208202803683370190505b509150600061067d8486612405565b90505b8361068b8187612405565b61069591906123ed565b811015610918576040517fd31674db0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038a169063d31674db906106e4908590600401612318565b60206040518083038186803b1580156106fc57600080fd5b505afa92505050801561072c575060408051601f3d908101601f1916820190925261072991810190611f32565b60015b6107365750610906565b90506040517fe6c3b1f60000000000000000000000000000000000000000000000000000000081526000906001600160a01b038b169063e6c3b1f690610780908590600401612318565b60206040518083038186803b15801561079857600080fd5b505afa1580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190611cf8565b90506000896001600160a01b031662fdd58e8a856040518363ffffffff1660e01b81526004016108019291906120f7565b60206040518083038186803b15801561081957600080fd5b505afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190611f32565b9050600282600281111561087557634e487b7160e01b600052602160045260246000fd5b141580610880575080155b80610889575082155b806108945750826001145b156108a157505050610906565b60028260028111156108c357634e487b7160e01b600052602160045260246000fd5b1415610902578286866108d58161248f565b9750815181106108f557634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5050505b806109108161248f565b915050610680565b505095945050505050565b6004602052816000526040600020818154811061026557600080fd5b3360009081526020819052604090205460ff1615156001148061096157503033145b6109865760405162461bcd60e51b815260040161097d906121f6565b60405180910390fd5b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b60006109d48383610ea5565b90505b92915050565b60016020819052600091825260409091208054918101805461028f90612454565b60606000856001600160a01b031663f4fde0d36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3b57600080fd5b505afa158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a739190611f32565b90508083610a818187612405565b610a8b91906123ed565b1115610aa95760405162461bcd60e51b815260040161097d906121bf565b60008367ffffffffffffffff811115610ad257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b0b57816020015b610af8611909565b815260200190600190039081610af05790505b5092506000610b1a8587612405565b90505b84610b288188612405565b610b3291906123ed565b81108015610b3f57508281105b15610dd5576040517fd31674db0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038a169063d31674db90610b8c908590600401612318565b60206040518083038186803b158015610ba457600080fd5b505afa925050508015610bd4575060408051601f3d908101601f19168201909252610bd191810190611f32565b60015b610bde5750610dc3565b90506040517fe6c3b1f60000000000000000000000000000000000000000000000000000000081526000906001600160a01b038b169063e6c3b1f690610c28908590600401612318565b60206040518083038186803b158015610c4057600080fd5b505afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190611cf8565b90506002816002811115610c9c57634e487b7160e01b600052602160045260246000fd5b1415610dc0576040517ff68ee90e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038b169063f68ee90e90610cea908690600401612318565b60206040518083038186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190611f32565b90508015610dbe5760005b81811015610dbc57600080610d5c8d8f8989611617565b91509150610d6a8282610ea5565b15610da757808a89610d7b8161248f565b9a5081518110610d9b57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b50508080610db49061248f565b915050610d45565b505b505b50505b80610dcd8161248f565b915050610b1d565b505050949350505050565b3360009081526020819052604090205460ff16151560011480610e0257503033145b610e1e5760405162461bcd60e51b815260040161097d906121f6565b336000908152602081905260409020805460ff19169055565b60068181548110610e4757600080fd5b600091825260209091206008909102018054600182015460028301546003840180546001600160a01b0394851696509284169493909116929161043190612454565b6002602052816000526040600020818154811061026557600080fd5b600080610eb1836118b2565b60008181526001602052604090205490915015610ed25760009150506109d7565b80835260008181526001602081815260409092208551815582860151805187949293610f0393908501920190611979565b5060408201518051610f1f916002840191602090910190611979565b5060608201516003820155608082015160048201805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161790915560a080850151600585018054841691851691909117905560c0850151600685018054841691851691909117905560e08501516007850180549093169084161790915561010090930151600890920191909155908401511660009081526002602090815260408220805460018181018355918452928290208651600990940201928355818601518051879493610ff6938501920190611979565b5060408201518051611012916002840191602090910190611979565b506060820151600382810191909155608083015160048301805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161790915560a0850151600585018054831691841691909117905560c080860151600686018054841691851691909117905560e086015160078601805490931690841617909155610100909401516008909301929092559185015116600090815260209182526040812080546001818101835591835291839020865160099093020191825582860151805187946110ea938501920190611979565b5060408201518051611106916002840191602090910190611979565b506060820151600382015560808201516004808301805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039485161790915560a0850151600585018054831691851691909117905560c0850151600685018054831691851691909117905560e080860151600786018054909316908516179091556101009094015160089093019290925591850151909116600090815260209182526040812080546001818101835591835291839020865160099093020191825582860151805187946111dd938501920190611979565b50604082015180516111f9916002840191602090910190611979565b506060820151600382015560808083015160048301805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161790915560a08501516005808601805484169285169290921790915560c0860151600686018054841691851691909117905560e0860151600786018054909316908416179091556101009094015160089093019290925585015116600090815260209182526040812080546001818101835591835291839020865160099093020191825582860151805187946112ce938501920190611979565b50604082015180516112ea916002840191602090910190611979565b506060820151600382015560808083015160048301805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161790915560a0850151600585018054831691841691909117905560c0850151600685018054831691841691909117905560e085015160078086018054909316918416919091179091556101009094015160089093019290925585015181166000908152602092909252604090912060010154166115d15760808301516001600160a01b039081166000908152600760209081526040918290208751815490851673ffffffffffffffffffffffffffffffffffffffff19918216178255828901516001830180549187169183169190911790559288015160028201805491909516931692909217909255606086015180518793611428926003850192910190611979565b5060808201518051611444916004840191602090910190611979565b5060a08201518051611460916005840191602090910190611979565b5060c082015160068281019190915560e090920151600790910155805460018101825560009190915284517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f6008909202918201805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161782556020808901517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4086018054841691861691909117905560408901517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d418601805490931694169390931790556060870151805188949293611581937ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4201920190611979565b506080820151805161159d916004840191602090910190611979565b5060a082015180516115b9916005840191602090910190611979565b5060c0820151816006015560e0820151816007015550505b82516040517f8c1ee35fa3a9dd5c4e2bfc4b7d4a9b944abf3f202ed9ec14c95708f08696a00c906116059087908790612253565b60405180910390a25060019392505050565b61161f6119fd565b611627611909565b6040517f740ec99e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0388169063740ec99e90611671908890889060040161238d565b60206040518083038186803b15801561168957600080fd5b505afa15801561169d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c19190611c12565b905060008060008060008a6001600160a01b031663e06174e46040518163ffffffff1660e01b815260040160006040518083038186803b15801561170457600080fd5b505afa158015611718573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117409190810190611d17565b5050505050509450945094509450945060405180610100016040528060006001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b0316815260200186815260200185815260200184815260200183815260200182815250975060008c6001600160a01b031662fdd58e888c6040518363ffffffff1660e01b81526004016117d79291906120f7565b60206040518083038186803b1580156117ef57600080fd5b505afa158015611803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118279190611f32565b905080156118a257604051806101200160405280600081526020018781526020018681526020018b8152602001886001600160a01b031681526020018d6001600160a01b031681526020018e6001600160a01b031681526020018d6001600160a01b0316815260200182815250975061189f886118b2565b88525b5050505050505094509492505050565b600081606001518260a001518360c001518460e0015185608001518661010001516040516020016118e89695949392919061202a565b6040516020818303038152906040528051906020012060001c90505b919050565b6040518061012001604052806000815260200160608152602001606081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081525090565b82805461198590612454565b90600052602060002090601f0160209004810192826119a757600085556119ed565b82601f106119c057805160ff19168380011785556119ed565b828001600101855582156119ed579182015b828111156119ed5782518255916020019190600101906119d2565b506119f9929150611a5d565b5090565b60405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081525090565b5b808211156119f95760008155600101611a5e565b8035611904816124d6565b600082601f830112611a8d578081fd5b8135611aa0611a9b826123c5565b61239b565b818152846020838601011115611ab4578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611ade578081fd5b8151611aec611a9b826123c5565b818152846020838601011115611b00578283fd5b611b11826020830160208701612424565b949350505050565b6000610120808385031215611b2c578182fd5b611b358161239b565b91505081358152602082013567ffffffffffffffff80821115611b5757600080fd5b611b6385838601611a7d565b60208401526040840135915080821115611b7c57600080fd5b50611b8984828501611a7d565b60408301525060608201356060820152611ba560808301611a72565b6080820152611bb660a08301611a72565b60a0820152611bc760c08301611a72565b60c0820152611bd860e08301611a72565b60e082015261010080830135818301525092915050565b600060208284031215611c00578081fd5b8135611c0b816124d6565b9392505050565b600060208284031215611c23578081fd5b8151611c0b816124d6565b600080600080600060a08688031215611c45578081fd5b8535611c50816124d6565b94506020860135611c60816124d6565b93506040860135611c70816124d6565b94979396509394606081013594506080013592915050565b60008060008060808587031215611c9d578384fd5b8435611ca8816124d6565b93506020850135611cb8816124d6565b93969395505050506040820135916060013590565b60008060408385031215611cdf578182fd5b8235611cea816124d6565b946020939093013593505050565b600060208284031215611d09578081fd5b815160038110611c0b578182fd5b60008060008060008060008060008060006101608c8e031215611d38578586fd5b8b5167ffffffffffffffff811115611d4e578687fd5b611d5a8e828f01611ace565b9b505060208c015167ffffffffffffffff811115611d76578687fd5b611d828e828f01611ace565b9a505060408c015167ffffffffffffffff811115611d9e578687fd5b611daa8e828f01611ace565b99505060608c0151975060808c0151965060a08c0151955060c08c0151945060e08c015193506101008c015192506101208c015191506101408c015190509295989b509295989b9093969950565b60008060408385031215611e0a578182fd5b823567ffffffffffffffff80821115611e21578384fd5b8185019150610100808388031215611e37578485fd5b611e408161239b565b9050611e4b83611a72565b8152611e5960208401611a72565b6020820152611e6a60408401611a72565b6040820152606083013582811115611e80578586fd5b611e8c88828601611a7d565b606083015250608083013582811115611ea3578586fd5b611eaf88828601611a7d565b60808301525060a083013582811115611ec6578586fd5b611ed288828601611a7d565b60a08301525060c083013560c082015260e083013560e0820152809450506020850135915080821115611f03578283fd5b50611f1085828601611b19565b9150509250929050565b600060208284031215611f2b578081fd5b5035919050565b600060208284031215611f43578081fd5b5051919050565b6001600160a01b03169052565b60008151808452611f6f816020860160208601612424565b601f01601f19169290920160200192915050565b6000610120825184526020830151816020860152611fa382860182611f57565b91505060408301518482036040860152611fbd8282611f57565b915050606083015160608501526080830151611fdc6080860182611f4a565b5060a0830151611fef60a0860182611f4a565b5060c083015161200260c0860182611f4a565b5060e083015161201560e0860182611f4a565b50610100928301519390920192909252919050565b9586527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b8116602088015293851b8416603487015291841b8316604886015290921b16605c830152607082015260900190565b60006101006001600160a01b03808c168452808b166020850152808a166040850152508060608401526120b781840189611f57565b905082810360808401526120cb8188611f57565b905082810360a08401526120df8187611f57565b60c0840195909552505060e001529695505050505050565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561216357603f19888603018452612151858351611f83565b94509285019290850190600101612135565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156121a85783518352928401929184019160010161218c565b50909695505050505050565b901515815260200190565b6020808252600c908201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b600060408252612267604083018551611f4a565b60208401516122796060840182611f4a565b50604084015161228c6080840182611f4a565b5060608401516101008060a08501526122a9610140850183611f57565b91506080860151603f19808685030160c08701526122c78483611f57565b935060a08801519150808685030160e0870152506122e58382611f57565b92505060c0860151818501525060e0850151610120840152828103602084015261230f8185611f83565b95945050505050565b90815260200190565b60006101208b835280602084015261233b8184018c611f57565b9050828103604084015261234f818b611f57565b606084019990995250506001600160a01b03958616608082015293851660a085015291841660c084015290921660e082015261010001529392505050565b918252602082015260400190565b60405181810167ffffffffffffffff811182821017156123bd576123bd6124c0565b604052919050565b600067ffffffffffffffff8211156123df576123df6124c0565b50601f01601f191660200190565b60008219821115612400576124006124aa565b500190565b600081600019048311821515161561241f5761241f6124aa565b500290565b60005b8381101561243f578181015183820152602001612427565b8381111561244e576000848401525b50505050565b60028104600182168061246857607f821691505b6020821081141561248957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156124a3576124a36124aa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146124eb57600080fd5b5056fea26469706673582212209b3d6a9091f7eb1fc2482f140e9664b63c2a5e1cce8387baebdcd32b92decbdf64736f6c63430008000033",
  "libraries": {
    "Strings": "0x9cd2aa68ecCF27b393E825c6fC844eF4217D4c22",
    "AddressSet": "0x5d3EFF596b76CAaF5F71176D5B8499BDB7fCb639",
    "UInt256Set": "0x0690fedAEc49A5Bd4c2fb723Cf3F0114E57014BC",
    "Create2": "0x931Fd76E170a15918409dBA587F0802da03845AD",
    "WrappedTokenLib": "0x3A00E3758B9B7bcf4E03bf5Aef69fd079aCbd852",
    "ComplexPoolLib": "0xd7203305346B69227e126D7FBfCE20Fc976aE524",
    "LootboxLib": "0x21e2C4b3B71b25cE2FcB1902CB469cf34Fef5402"
  },
  "devdoc": {
    "author": "The name of the author",
    "details": "Explain to a developer any extra details",
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      }
    },
    "title": "A title that should describe the contract/interface",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Explain to an end user what this does",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12920,
        "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15716,
        "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
        "label": "gemMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Gem)16400_storage)"
      },
      {
        "astId": 15722,
        "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
        "label": "gemsByMinter",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(Gem)16400_storage)dyn_storage)"
      },
      {
        "astId": 15728,
        "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
        "label": "gemsByFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(Gem)16400_storage)dyn_storage)"
      },
      {
        "astId": 15734,
        "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
        "label": "gemsByMultitoken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(Gem)16400_storage)dyn_storage)"
      },
      {
        "astId": 15740,
        "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
        "label": "gemsByPool",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(Gem)16400_storage)dyn_storage)"
      },
      {
        "astId": 15744,
        "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
        "label": "gemPools",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(GemPool)16381_storage)dyn_storage"
      },
      {
        "astId": 15749,
        "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
        "label": "gemPoolsMap",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(GemPool)16381_storage)"
      },
      {
        "astId": 15754,
        "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
        "label": "gemPoolFactoriesMap",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(GemPool)16381_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Gem)16400_storage)dyn_storage": {
        "base": "t_struct(Gem)16400_storage",
        "encoding": "dynamic_array",
        "label": "struct IBitgemIndexer.Gem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GemPool)16381_storage)dyn_storage": {
        "base": "t_struct(GemPool)16381_storage",
        "encoding": "dynamic_array",
        "label": "struct IBitgemIndexer.GemPool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Gem)16400_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBitgemIndexer.Gem[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Gem)16400_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(GemPool)16381_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBitgemIndexer.GemPool)",
        "numberOfBytes": "32",
        "value": "t_struct(GemPool)16381_storage"
      },
      "t_mapping(t_uint256,t_struct(Gem)16400_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBitgemIndexer.Gem)",
        "numberOfBytes": "32",
        "value": "t_struct(Gem)16400_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Gem)16400_storage": {
        "encoding": "inplace",
        "label": "struct IBitgemIndexer.Gem",
        "members": [
          {
            "astId": 16383,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16385,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 16387,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 16389,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "gemHash",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16391,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "pool",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 16393,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "minter",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 16395,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "gemPoolFactory",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 16397,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "multitoken",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 16399,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "quantity",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(GemPool)16381_storage": {
        "encoding": "inplace",
        "label": "struct IBitgemIndexer.GemPool",
        "members": [
          {
            "astId": 16366,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "factory",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16368,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "multitoken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16370,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "poolAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16372,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "symbol",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 16374,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "name",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 16376,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "description",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 16378,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "category",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16380,
            "contract": "src/indexer/BitgemIndexer.sol:BitgemIndexer",
            "label": "ethPrice",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}