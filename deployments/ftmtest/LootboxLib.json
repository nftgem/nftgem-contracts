{
  "address": "0x21e2C4b3B71b25cE2FcB1902CB469cf34Fef5402",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Lootbox",
          "name": "addedLootbox",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lootHash",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilityRoll",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxMint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Loot",
          "name": "addedLoot",
          "type": "tuple"
        }
      ],
      "name": "LootAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Lootbox",
          "name": "mintedLootbox",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lootHash",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilityRoll",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxMint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Loot",
          "name": "mintedLoot",
          "type": "tuple"
        }
      ],
      "name": "LootMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Lootbox",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "LootboxCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newContractAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Lootbox",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "LootboxMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "opener",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Lootbox",
          "name": "openedLootbox",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lootHash",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilityRoll",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxMint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Loot[]",
          "name": "receivedLoot",
          "type": "tuple[]"
        }
      ],
      "name": "LootboxOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomFarmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multitoken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lootboxHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "minLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxLootPerOpen",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxOpens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLootGenerated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "probabilitiesSum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ILootbox.Lootbox",
          "name": "mintedLootbox",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        }
      ],
      "name": "LootboxTokensMinted",
      "type": "event"
    }
  ],
  "transactionHash": "0xadd70fb6f6d2b4e317d69fece1b671e349f7ba90d63166684803b337c12b9d21",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x21e2C4b3B71b25cE2FcB1902CB469cf34Fef5402",
    "transactionIndex": 0,
    "gasUsed": "2051028",
    "logsBloom": "0x
    "blockHash": "0x00000d92000005a001be6424211664c8b801d2cc1b92c744d23e5a00236e74a3",
    "transactionHash": "0xadd70fb6f6d2b4e317d69fece1b671e349f7ba90d63166684803b337c12b9d21",
    "logs": [],
    "blockNumber": 1566201,
    "cumulativeGasUsed": "2051028",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b3aca09260278d33fac105eaeaa8855b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"addedLootbox\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lootHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilityRoll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Loot\",\"name\":\"addedLoot\",\"type\":\"tuple\"}],\"name\":\"LootAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"mintedLootbox\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lootHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilityRoll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Loot\",\"name\":\"mintedLoot\",\"type\":\"tuple\"}],\"name\":\"LootMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"LootboxCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"LootboxMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"opener\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"openedLootbox\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lootHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilityRoll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Loot[]\",\"name\":\"receivedLoot\",\"type\":\"tuple[]\"}],\"name\":\"LootboxOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomFarmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"minLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxLootPerOpen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxOpens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLootGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probabilitiesSum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ILootbox.Lootbox\",\"name\":\"mintedLootbox\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"LootboxTokensMinted\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(address,address,ITokenSeller.TokenSellerInfo,ILootbox.Lootbox)\":{\"details\":\"Sets the lootbox data. The lootbox contract can either initialise a new\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lootbox/LootboxLib.sol\":\"LootboxLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa31f752b3b092c788ea06a6dced266db79c4407d69733d78bc15e519f39e1d3f\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/ILootbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ITokenSeller.sol\\\";\\n\\n/// @dev A lootbox is a contract that works with an erc1155 to implement a game lootbox:\\n/// a lootbox is a contract that accepts a single quantity of some erc1155 tokenhash and\\n/// then based on a set of rules goverened by probability, mints one or more outgoing tokens\\n/// as it burns the incoming token. The rules are defined by the lootbox author and are\\n/// stored in the lootbox contract. A newly-created lootbox contract assigns controllership\\n/// to its creator, who can them add other controllers, and can set the rules for the lootbox.\\n/// Each lootbox is configured with some number of Loot items, each of which has deterministic\\n/// tokenhash. These loot items each have names, symboles, and a probability of being minted.\\n/// Users open the lootbox by providing the right gem to the lootbox contract, and then\\n/// the lootbox contract mints the right number of tokens for the user. This contract uses\\n/// a pseudo-random deterministic sieve to determine the number and type of tokens minted\\n\\ninterface ILootbox {\\n    // the lootbox itself\\n    struct Lootbox {\\n        address owner;\\n        address contractAddress;\\n        address randomFarmer;\\n        address multitoken;\\n        uint256 lootboxHash; // identifier and lootbox token hash for the lootbox\\n        string symbol;\\n        string name;\\n        string description;\\n        uint8 minLootPerOpen;\\n        uint8 maxLootPerOpen;\\n        uint256 maxOpens;\\n        uint256 openCount;\\n        uint256 totalLootGenerated;\\n        uint256 probabilitiesSum;\\n        bool initialized;\\n    }\\n\\n    // loot items\\n    struct Loot {\\n        uint256 lootHash;\\n        address owner;\\n        address multitoken;\\n        string symbol;\\n        string name;\\n        uint256 probability;\\n        uint256 probabilityIndex;\\n        uint256 probabilityRoll;\\n        uint256 maxMint;\\n        uint256 minted;\\n    }\\n\\n    event LootboxCreated(\\n        address indexed creator,\\n        uint256 indexed hash,\\n        address indexed contractAddress,\\n        Lootbox data\\n    );\\n\\n    event LootboxMigrated(\\n        address indexed migrator,\\n        uint256 indexed hash,\\n        address indexed oldContractAddress,\\n        address newContractAddress,\\n        Lootbox data\\n    );\\n\\n    event LootboxOpened(\\n        address indexed opener,\\n        uint256 indexed hash,\\n        Lootbox openedLootbox,\\n        Loot[] receivedLoot\\n    );\\n\\n    event LootAdded(\\n        address indexed adder,\\n        uint256 indexed hash,\\n        Lootbox addedLootbox,\\n        Loot addedLoot\\n    );\\n\\n    event LootboxTokensMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        Lootbox mintedLootbox,\\n        uint256 mintedAmount\\n    );\\n\\n    event LootMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        Lootbox mintedLootbox,\\n        Loot mintedLoot\\n    );\\n\\n    function initialize(\\n        address lootboxData,\\n        ITokenSeller.TokenSellerInfo memory tokenSellerInfo,\\n        ILootbox.Lootbox memory lootboxInit\\n    ) external;\\n\\n    function mintLootboxTokens(uint256 amount) external;\\n\\n    function mintLoot(uint8 index, uint256 amount)\\n        external\\n        returns (Loot memory);\\n\\n    function openLootbox() external returns (Loot[] memory);\\n\\n    function allLoot() external view returns (Loot[] memory);\\n\\n    function addLoot(Loot memory _loot) external returns (uint256);\\n\\n    function getLoot(uint256 index) external view returns (Loot memory);\\n}\\n\",\"keccak256\":\"0x7e5d02050a7e3e71d4e4c581991ba7d6e702b9bcde3558a6e1adb18d9e269cde\",\"license\":\"MIT\"},\"src/interfaces/ILootboxData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ILootbox.sol\\\";\\nimport \\\"./ITokenSeller.sol\\\";\\n\\ninterface ILootboxData {\\n    function getFeeManager() external view returns (address);\\n\\n    function setFeeManager(address feeManagerAddress) external;\\n\\n    function addLootbox(ILootbox.Lootbox memory)\\n        external\\n        returns (uint256 lootbox);\\n\\n    function getLootboxByAddress(address lootbox)\\n        external\\n        view\\n        returns (ILootbox.Lootbox memory);\\n\\n    function getLootboxByHash(uint256 lootbox)\\n        external\\n        view\\n        returns (ILootbox.Lootbox memory);\\n\\n    function setLootbox(\\n        ILootbox.Lootbox memory lootboxData\\n    ) external;\\n\\n    function lootboxes() external view returns (ILootbox.Lootbox[] memory);\\n\\n    function allLootboxes(uint256 index)\\n        external\\n        view\\n        returns (ILootbox.Lootbox memory);\\n\\n    function allLootboxesLength() external view returns (uint256);\\n\\n    function getLoot(uint256 lootbox, uint256 index)\\n        external\\n        view\\n        returns (ILootbox.Loot memory);\\n\\n    function addLoot(uint256 lootbox, ILootbox.Loot memory lootboxData)\\n        external\\n        returns (uint256);\\n\\n    function setLoot(\\n        uint256 lootbox,\\n        uint256 index,\\n        ILootbox.Loot memory lootboxData\\n    ) external;\\n\\n    function allLoot(uint256 lootbox)\\n        external\\n        view\\n        returns (ILootbox.Loot[] memory);\\n\\n    function delLoot(uint256 lootbox, uint256 index)\\n        external\\n        returns (ILootbox.Loot memory);\\n\\n    function addTokenSeller(\\n        address tokenSeller,\\n        ITokenSeller.TokenSellerInfo memory\\n    ) external returns (uint256 tokenSellerIndex);\\n\\n    function getTokenSeller(address tokenSeller)\\n        external\\n        view\\n        returns (ITokenSeller.TokenSellerInfo memory);\\n\\n    function setTokenSeller(\\n        address tokenSellerAddress,\\n        ITokenSeller.TokenSellerInfo memory tokenSellerData\\n    ) external;\\n\\n    function tokenSellers()\\n        external\\n        view\\n        returns (ITokenSeller.TokenSellerInfo[] memory);\\n\\n    function allTokenSellers(uint256 index)\\n        external\\n        view\\n        returns (ITokenSeller.TokenSellerInfo memory);\\n\\n    function allTokenSellersLength() external view returns (uint256);\\n\\n    function increaseBuyPrice(address tokenSeller) external view  returns (uint256);\\n}\\n\",\"keccak256\":\"0x8bb32e5de27e125c38a97c75464ca6a6b585228794ffb4d276bd2129f79f92b1\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INFTGemFeeManager {\\n    event FeeChanged(\\n        address indexed operator,\\n        uint256 indexed feeHash,\\n        uint256 value\\n    );\\n\\n    function fee(uint256 feeTypeHash) external view returns (uint256);\\n\\n    function setFee(uint256 feeTypeHash, uint256 _fee) external;\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x073089b45be4de1e2feecfa65d36ea9cb3ec18cec7e3c1e9de18ea8923c016c2\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    struct Royalty {\\n        address owner;\\n        uint256 royaltyPermillion;\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function setRoyaltyInfo(\\n        uint256 _tokenId,\\n        address _owner,\\n        uint256 feePermil\\n    ) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0x1d54431d4f990265d8a0c692430e75c5c77870b78f19264069e1cfe86d7464c0\",\"license\":\"MIT\"},\"src/interfaces/IRandomFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IRandomFarmer {\\n    function getRandomBytes(uint8 amount) external returns (bytes32[] memory);\\n\\n    function getRandomUints(uint8 amount) external returns (uint256[] memory);\\n\\n    function getRandomNumber(uint256 min, uint256 max)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IRandomFarm is IRandomFarmer {\\n    function initialize(uint256 seed) external;\\n\\n    function addRandomness(uint256 randomness) external;\\n}\\n\",\"keccak256\":\"0x30c47bb1d97367da45f911bfb8c63b0af671e1dae3d5faac65a6203af6717cf6\",\"license\":\"MIT\"},\"src/interfaces/ITokenSeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @dev A token seller is a contract that can sell tokens to a token buyer.\\n/// The token buyer can buy tokens from the seller by paying a certain amount\\n/// of base currency to receive a certain amount of erc1155 tokens. the number\\n/// of tokens that can be bought is limited by the seller - the seller can\\n/// specify the maximum number of tokens that can be bought per transaction\\n/// and the maximum number of tokens that can be bought in total for a given\\n/// address. The seller can also specify the price of erc1155 tokens and how\\n/// that price increases per successful transaction. the token seller assumes\\n/// supply of the erc1155 is unlimited and features a request method\\n\\ninterface ITokenSeller {\\n    enum BuyPriceIncreaseRateType {\\n        NONE,\\n        FIXED,\\n        EXPONENTIAL,\\n        INVERSELOG\\n    }\\n\\n    struct TokenSellerInfo {\\n        address multitoken;\\n        address contractAddress;\\n        address owner;\\n        uint256 tokenHash;\\n        uint256 buyPrice;\\n        BuyPriceIncreaseRateType buyPriceIncreaseRateType;\\n        uint256 buyPriceIncreaseRate;\\n        uint256 maxQuantity;\\n        uint256 maxBuyAmount;\\n        uint256 maxTotalBuyAmount;\\n        uint256 saleStartTime;\\n        uint256 saleEndTime;\\n        bool initialized;\\n        bool open;\\n        uint256 totalPurchased;\\n    }\\n\\n    event TokenSellerCreated(address indexed creator, TokenSellerInfo info);\\n\\n    event Sold(\\n        address indexed contractAddress,\\n        address indexed buyer,\\n        uint256 indexed tokenHash,\\n        uint256 price,\\n        uint256 amount\\n    );\\n\\n    event Requested(\\n        address indexed contractAddress,\\n        address indexed seller,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n\\n    event Funded(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n\\n    event FundsCollected(address indexed receiver, uint256 indexed amount);\\n\\n    event TokenSellerMigrated(\\n        address indexed migrator,\\n        address indexed hash,\\n        address indexed oldContractAddress,\\n        address newContractAddress,\\n        TokenSellerInfo data\\n    );\\n\\n    function initialize(address tokenSellerData, TokenSellerInfo memory _info)\\n        external;\\n\\n    function isInitialized() external view returns (bool);\\n\\n    function getInfo() external view returns (TokenSellerInfo memory);\\n\\n    function setInfo(TokenSellerInfo memory _info) external;\\n\\n    /// @dev Buy tokens from the token seller.\\n    /// @param _amount The amount of erc1155 tokens to buy.\\n    /// @return The amount of erc1155 tokens that were bought.\\n    function buy(uint256 _amount) external payable returns (uint256);\\n\\n    /// @dev Request tokens from the token provider.\\n    /// @param _recipient The address of the token receiver.\\n    /// @param _amount The amount of erc1155 tokens to buy.\\n    /// @return The amount of erc1155 tokens that were requested.\\n    function request(address _recipient, uint256 _amount)\\n        external\\n        returns (uint256);\\n\\n    function receivePayout(address payable _recipient) external;\\n}\\n\",\"keccak256\":\"0x8783cfa454e469fc9425161cdc4336a2ea0db1379ad2828de0ab9197c36ea43c\",\"license\":\"MIT\"},\"src/lootbox/LootboxLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/ILootbox.sol\\\";\\nimport \\\"../interfaces/IRandomFarm.sol\\\";\\nimport \\\"../interfaces/ILootboxData.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"./TokenSeller.sol\\\";\\n\\nlibrary LootboxLib {\\n    event LootboxCreated(\\n        address indexed creator,\\n        uint256 indexed hash,\\n        address indexed contractAddress,\\n        ILootbox.Lootbox data\\n    );\\n\\n    event LootboxMigrated(\\n        address indexed migrator,\\n        uint256 indexed hash,\\n        address indexed oldContractAddress,\\n        address newContractAddress,\\n        ILootbox.Lootbox data\\n    );\\n\\n    event LootboxOpened(\\n        address indexed opener,\\n        uint256 indexed hash,\\n        ILootbox.Lootbox openedLootbox,\\n        ILootbox.Loot[] receivedLoot\\n    );\\n\\n    event LootAdded(\\n        address indexed adder,\\n        uint256 indexed hash,\\n        ILootbox.Lootbox addedLootbox,\\n        ILootbox.Loot addedLoot\\n    );\\n\\n    event LootboxTokensMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        ILootbox.Lootbox mintedLootbox,\\n        uint256 mintedAmount\\n    );\\n\\n    event LootMinted(\\n        address indexed minter,\\n        uint256 indexed hash,\\n        ILootbox.Lootbox mintedLootbox,\\n        ILootbox.Loot mintedLoot\\n    );\\n\\n    /// @dev Sets the lootbox data. The lootbox contract can either initialise a new\\n    // lootbox struct or it can load and update an existing lootbox struct.\\n    function initialize(\\n        address contractAddress,\\n        address lootboxData,\\n        ITokenSeller.TokenSellerInfo memory tokenSellerInfo,\\n        ILootbox.Lootbox memory lootboxInit\\n    )\\n        external\\n        returns (\\n            ILootboxData _lootboxData,\\n            bool _isNew,\\n            ILootbox.Lootbox memory _lootbox,\\n            ITokenSeller.TokenSellerInfo memory tokenSellerInfo_\\n        )\\n    {\\n        require(\\n            IControllable(lootboxData).isController(address(this)) == true,\\n            \\\"Lootbox data must be controlled by this lootbox\\\"\\n        );\\n        tokenSellerInfo_ = tokenSellerInfo;\\n        _lootboxData = ILootboxData(lootboxData);\\n        _isNew = lootboxInit.lootboxHash == 0;\\n        if (lootboxInit.lootboxHash == 0) {\\n            require(\\n                lootboxInit.multitoken != address(0),\\n                \\\"Multitoken address must be set\\\"\\n            );\\n            require(bytes(lootboxInit.name).length != 0, \\\"Name must be set\\\");\\n            require(\\n                bytes(lootboxInit.symbol).length != 0,\\n                \\\"Symbol must be set\\\"\\n            );\\n            require(lootboxInit.minLootPerOpen != 0, \\\"Min loot must be set\\\");\\n            require(lootboxInit.maxLootPerOpen != 0, \\\"Max loot must be set\\\");\\n            // TODO: additional validity checks would not hurt here\\n            _lootbox = lootboxInit;\\n            _lootbox.lootboxHash = uint256(\\n                keccak256(abi.encodePacked(lootboxInit.symbol))\\n            );\\n            _lootbox.initialized = true;\\n        }\\n        _lootbox.contractAddress = contractAddress;\\n        tokenSellerInfo_.tokenHash = _lootbox.lootboxHash;\\n        _lootboxData.setTokenSeller(contractAddress, tokenSellerInfo);\\n        if (_isNew) {\\n            _lootboxData.addLootbox(_lootbox);\\n        } else {\\n            // load the lootbox struct\\n            _lootbox = _lootboxData.getLootboxByHash(lootboxInit.lootboxHash);\\n            _lootbox.contractAddress = contractAddress;\\n            _lootboxData.setLootbox(_lootbox);\\n            require(\\n                _lootbox.owner == msg.sender,\\n                \\\"Lootbox must be owned by the caller to uppgrade contract\\\"\\n            );\\n        }\\n    }\\n\\n    function openLootbox(\\n        ILootbox.Lootbox memory _lootbox,\\n        ILootbox.Loot[] memory _loot\\n    ) external returns (ILootbox.Loot[] memory _lootOut) {\\n        // make sure that the caller has at least one lootbox token\\n        require(\\n            IERC1155(_lootbox.multitoken).balanceOf(\\n                msg.sender,\\n                _lootbox.lootboxHash\\n            ) > 0,\\n            \\\"Insufficient lootbox token balance\\\"\\n        );\\n\\n        // no need to transfer the lootbox token anywhere, we can just burn it in place\\n        INFTGemMultiToken(_lootbox.multitoken).burn(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            1\\n        );\\n\\n        // first we need to determine the number of loot items to mint\\n        // if min == max, then we mint that exact number of items. Otherwise,\\n        // we use a random number between min and max to determine the number\\n        // of loot items to mint\\n        uint8 lootCount = _lootbox.minLootPerOpen;\\n        if (_lootbox.minLootPerOpen != _lootbox.maxLootPerOpen) {\\n            lootCount = uint8(\\n                IRandomFarmer(_lootbox.randomFarmer).getRandomNumber(\\n                    uint256(_lootbox.minLootPerOpen),\\n                    uint256(_lootbox.maxLootPerOpen)\\n                )\\n            );\\n        } else lootCount = _lootbox.minLootPerOpen;\\n\\n        // now that we know how much we need to mint, we can create the\\n        // loot roll array that will hold our results and create some loot\\n        _lootOut = new ILootbox.Loot[](lootCount);\\n\\n        // now we need some randomness to determine which loot items we win\\n        // we use a pseudo-random deterministic sieve to determine the number\\n        // and type of tokens minted\\n        uint256[] memory _lootRoll = IRandomFarmer(_lootbox.randomFarmer)\\n            .getRandomUints(lootCount);\\n\\n        // mint the loot items\\n        for (uint256 i = 0; i < lootCount; i++) {\\n            // generate a loot item given a random seed\\n            (uint8 winIndex, uint256 winRoll) = _generateLoot(\\n                _loot,\\n                _lootRoll[i],\\n                _lootbox.probabilitiesSum\\n            );\\n\\n            // assign the loot item to the loot array\\n            _lootOut[i] = _loot[winIndex];\\n            _lootOut[i].probabilityRoll = winRoll;\\n\\n            // mint the loot item to the multitoken\\n            INFTGemMultiToken(_lootbox.multitoken).mint(\\n                msg.sender,\\n                _lootOut[i].lootHash,\\n                1\\n            );\\n        }\\n\\n        /// generate an event reporting on the loot that was found\\n        emit LootboxOpened(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            _lootbox,\\n            _lootOut\\n        );\\n    }\\n\\n    function mintLoot(\\n        ILootbox.Lootbox memory _lootbox,\\n        ILootbox.Loot[] memory _allLoot,\\n        uint8 index,\\n        uint256 amount\\n    ) external returns (ILootbox.Loot memory) {\\n        require(index < _allLoot.length, \\\"Loot index out of bounds\\\");\\n        // mint the loot item to the minter\\n        INFTGemMultiToken(_lootbox.multitoken).mint(\\n            msg.sender,\\n            _allLoot[index].lootHash,\\n            amount\\n        );\\n        // forced to use GOVERNANCE here as a token type because\\n        // someone decided to 'clean up' what they didn't understand.\\n        // there was a very good reason for this, that being that an\\n        // int type rather than an enum allows us to easily add new\\n        // token types. Noe I have to figure out how to handle this\\n        // in some other way. Thanks, Justin\\n        INFTGemMultiToken(_lootbox.multitoken).setTokenData(\\n            _allLoot[index].lootHash,\\n            INFTGemMultiToken.TokenType.GOVERNANCE,\\n            address(this)\\n        );\\n\\n        // emit a message about it\\n        emit LootMinted(\\n            msg.sender,\\n            _lootbox.lootboxHash,\\n            _lootbox,\\n            _allLoot[index]\\n        );\\n        // return the loot item we minted\\n        return _allLoot[index];\\n    }\\n\\n    function _generateLoot(\\n        ILootbox.Loot[] memory _loot,\\n        uint256 dice,\\n        uint256 _probabilitiesSum\\n    ) internal pure returns (uint8 winnerIndex, uint256 winnerRoll) {\\n        // validate the dice roll is in the proper range\\n        require(\\n            dice < _probabilitiesSum,\\n            \\\"Dice roll must be less than total probability\\\"\\n        );\\n        uint256 floor = 0;\\n        // get all the loot there is to award\\n\\n        // iterate through the loot items\\n        for (uint256 i = 0; i < _loot.length; i++) {\\n            // if the dice roll is between the floor and the probability index\\n            // then this is the item we will award\\n            if (floor <= dice && dice < _loot[i].probabilityIndex) {\\n                winnerIndex = uint8(i);\\n                winnerRoll = dice;\\n                break;\\n            }\\n            // increment the floor to the next probability index\\n            floor = _loot[i].probabilityIndex;\\n        }\\n        return (winnerIndex, winnerRoll);\\n    }\\n\\n    function recalculateProbabilities(address lootboxData, uint256 _lootboxHash)\\n        public\\n        returns (ILootbox.Loot[] memory _allLootOut)\\n    {\\n        uint256 floor = 0;\\n        // iterate through the loot items\\n        ILootbox.Loot[] memory _allLoot = ILootboxData(lootboxData).allLoot(\\n            _lootboxHash\\n        );\\n        for (uint256 i = 0; i < _allLoot.length; i++) {\\n            // set the probability index to the floor\\n            _allLoot[i].probabilityIndex = floor + _allLoot[i].probability;\\n            floor += _allLoot[i].probability;\\n            ILootboxData(lootboxData).setLoot(_lootboxHash, i, _allLoot[i]);\\n        }\\n        _allLootOut = _allLoot;\\n    }\\n}\\n\",\"keccak256\":\"0xe7596cc7a23921f42369d8933136503fc0d964281f20b2ac729dfc53aa4cbcf8\",\"license\":\"MIT\"},\"src/lootbox/TokenSeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/ITokenSeller.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/ILootboxData.sol\\\";\\nimport \\\"../access/Controllable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract TokenSeller is ITokenSeller, Controllable, Initializable {\\n    ILootboxData internal _tokenSellerData;\\n    ITokenSeller.TokenSellerInfo internal _tokenSeller;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /// @dev contract must be initilized for modified method to be called\\n    modifier initialized() virtual {\\n        require(\\n            _tokenSeller.multitoken != address(0) &&\\n                _tokenSeller.initialized == true,\\n            \\\"Token seller is not initialized\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Sets the lootbox data. The lootbox contract can either initialise a new\\n    // lootbox struct or it can load and update an existing lootbox struct.\\n    function initialize(\\n        address tokenSellerData,\\n        ITokenSeller.TokenSellerInfo memory tokenSellerInit\\n    ) external override initializer {\\n        require(\\n            IControllable(tokenSellerData).isController(address(this)) == true,\\n            \\\"Token seller data must be controlled by this token seller\\\"\\n        );\\n        _tokenSellerData = ILootboxData(tokenSellerData);\\n        if (tokenSellerInit.contractAddress == address(0)) {\\n            require(\\n                tokenSellerInit.multitoken != address(0),\\n                \\\"Multitoken address must be set\\\"\\n            );\\n            require(tokenSellerInit.tokenHash != 0, \\\"token hash must be set\\\");\\n            require(tokenSellerInit.buyPrice != 0, \\\"Price must be set\\\");\\n            _tokenSeller = tokenSellerInit;\\n            _tokenSeller.contractAddress = address(this);\\n            _tokenSeller.initialized = true;\\n            _tokenSellerData.addTokenSeller(address(this), _tokenSeller);\\n            emit TokenSellerCreated(msg.sender, _tokenSeller);\\n        } else {\\n            // load the lootbox struct\\n            _tokenSeller = _tokenSellerData.getTokenSeller(address(this));\\n            _tokenSeller.contractAddress = address(this);\\n            _tokenSellerData.setTokenSeller(address(this), _tokenSeller);\\n            require(\\n                _tokenSeller.owner == msg.sender,\\n                \\\"Lootbox must be owned by the caller to uppgrade contract\\\"\\n            );\\n            emit TokenSellerMigrated(\\n                msg.sender,\\n                address(this),\\n                _tokenSeller.contractAddress,\\n                address(this),\\n                _tokenSeller\\n            );\\n        }\\n    }\\n\\n    function isInitialized() external view override returns (bool) {\\n        return _tokenSeller.initialized;\\n    }\\n\\n    function getInfo() external view override returns (TokenSellerInfo memory) {\\n        return _tokenSeller;\\n    }\\n\\n    function setInfo(TokenSellerInfo memory _info)\\n        external\\n        override\\n        onlyController\\n    {\\n        _tokenSeller.buyPrice = _info.buyPrice;\\n        _tokenSeller.buyPriceIncreaseRateType = _info.buyPriceIncreaseRateType;\\n        _tokenSeller.buyPriceIncreaseRate = _info.buyPriceIncreaseRate;\\n        _tokenSeller.maxQuantity = _info.maxQuantity;\\n        _tokenSeller.maxBuyAmount = _info.maxBuyAmount;\\n        _tokenSeller.maxTotalBuyAmount = _info.maxTotalBuyAmount;\\n        _tokenSeller.saleStartTime = _info.saleStartTime;\\n        _tokenSeller.saleEndTime = _info.saleEndTime;\\n        _tokenSeller.open = _info.open;\\n        _tokenSeller.maxTotalBuyAmount = _info.maxTotalBuyAmount;\\n        _tokenSellerData.setTokenSeller(address(this), _tokenSeller);\\n    }\\n\\n    function _request(\\n        address _recipient,\\n        uint256 _token,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        // mint the target token directly into the user's account\\n        INFTGemMultiToken(_tokenSeller.multitoken).mint(\\n            _recipient,\\n            _token,\\n            _amount\\n        );\\n        // set the token data - it's not a claim or gem and it was minted here\\n        INFTGemMultiToken(_tokenSeller.multitoken).setTokenData(\\n            _token,\\n            INFTGemMultiToken.TokenType.GOVERNANCE,\\n            address(this)\\n        );\\n        return _amount;\\n    }\\n\\n    /// @dev Buy tokens from the token seller.\\n    /// @param _amount The amount of erc1155 tokens to buy.\\n    /// @return The amount of erc1155 tokens that were bought.\\n    function buy(uint256 _amount) external payable override returns (uint256) {\\n        require(_tokenSeller.open == true, \\\"The token seller is closed\\\");\\n        require(\\n            _tokenSeller.totalPurchased < _tokenSeller.maxQuantity,\\n            \\\"The maximum amount of tokens has been bought.\\\"\\n        );\\n        require(\\n            msg.value >= _tokenSeller.buyPrice * _amount,\\n            \\\"Insufficient base currency\\\"\\n        );\\n        require(\\n            _amount <= _tokenSeller.maxBuyAmount,\\n            \\\"Amount exceeds maximum buy amount\\\"\\n        );\\n        require(\\n            _amount <=\\n                _tokenSeller.maxTotalBuyAmount -\\n                    IERC1155(_tokenSeller.multitoken).balanceOf(\\n                        msg.sender,\\n                        _tokenSeller.tokenHash\\n                    ),\\n            \\\"Amount exceeds maximum buy total\\\"\\n        );\\n        require(\\n            block.timestamp >= _tokenSeller.saleStartTime ||\\n                _tokenSeller.saleStartTime == 0,\\n            \\\"The sale has not started yet\\\"\\n        );\\n        require(\\n            block.timestamp <= _tokenSeller.saleEndTime ||\\n                _tokenSeller.saleEndTime == 0,\\n            \\\"The sale has ended\\\"\\n        );\\n        // request (mint) the tokens\\n        _request(msg.sender, _tokenSeller.tokenHash, _amount);\\n        // increase total bought\\n        _tokenSeller.totalPurchased += _amount;\\n        // emit a message about the purchase\\n        emit Sold(\\n            address(this),\\n            msg.sender,\\n            _tokenSeller.tokenHash,\\n            _tokenSeller.buyPrice,\\n            _amount\\n        );\\n        // increase the purchase price if it's not fixed\\n        _tokenSeller.buyPrice = _tokenSellerData.increaseBuyPrice(address(this));\\n        _tokenSellerData.setTokenSeller(address(this), _tokenSeller);\\n        // return the amount of tokens that were bought\\n        return _amount;\\n    }\\n\\n    /// @dev Request tokens from the token provider.\\n    /// @param _recipient The address of the token receiver.\\n    /// @param _amount The amount of erc1155 tokens to buy.\\n    /// @return The amount of erc1155 tokens that were requested.\\n    function request(address _recipient, uint256 _amount)\\n        external\\n        override\\n        onlyController\\n        returns (uint256)\\n    {\\n        require(\\n            _tokenSeller.totalPurchased < _tokenSeller.maxQuantity,\\n            \\\"The maximum amount of tokens has been bought.\\\"\\n        );\\n        return _request(_recipient, _tokenSeller.tokenHash, _amount);\\n    }\\n\\n    function migrate_TokenSeller(address migrateTo, bool bDestroy) external initialized onlyController {\\n        IControllable(address(_tokenSellerData)).addController(migrateTo);\\n        ITokenSeller(migrateTo).initialize(\\n            address(_tokenSellerData),\\n            _tokenSeller\\n        );\\n         if(bDestroy == true) {\\n             selfdestruct(payable(migrateTo));\\n         }\\n    }\\n\\n    function receivePayout(address payable _recipient) external override {\\n        require(\\n            this.isController(msg.sender) || msg.sender == _tokenSeller.owner,\\n            \\\"Only the token seller can receive payouts\\\"\\n        );\\n        uint256 balance = payable(address(this)).balance;\\n        if (balance == 0) {\\n            return;\\n        }\\n        address feeManager = _tokenSellerData.getFeeManager();\\n        require(\\n            feeManager != address(this),\\n            \\\"The token seller has no fee manager\\\"\\n        );\\n        uint256 fee = INFTGemFeeManager(feeManager).fee(\\n            uint256(keccak256(abi.encodePacked(\\\"lootbox\\\")))\\n        );\\n        _recipient = _recipient != address(0)\\n            ? _recipient\\n            : payable(msg.sender);\\n        fee = fee != 0 ? fee : 333;\\n        uint256 feeAmount = balance / fee;\\n        uint256 userPortion = balance - feeAmount;\\n        require(payable(_recipient).send(userPortion), \\\"Failed to send\\\");\\n        require(\\n            payable(feeManager).send(feeAmount),\\n            \\\"Failed to send to fee manager\\\"\\n        );\\n        emit FundsCollected(_recipient, userPortion);\\n    }\\n}\\n\",\"keccak256\":\"0x63d972d4ae1a13464856cf319d7cef477f9179e406fa3971ad08fda8b0d46be4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61243461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80631f45ce2e1461005b57806369dac381146100915780638bf455a2146100b1578063a1ed5e8f146100e1575b600080fd5b81801561006757600080fd5b5061007b6100763660046114e1565b61010e565b6040516100889190611cd8565b60405180910390f35b81801561009d57600080fd5b5061007b6100ac36600461187d565b6102e6565b8180156100bd57600080fd5b506100d16100cc36600461138e565b61078d565b6040516100889493929190611d38565b8180156100ed57600080fd5b506101016100fc3660046118de565b610be3565b604051610088919061216c565b6060600080846001600160a01b0316639b73a6fb856040518263ffffffff1660e01b815260040161013f9190612218565b60006040518083038186803b15801561015757600080fd5b505afa15801561016b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610193919081019061150c565b905060005b81518110156102dd578181815181106101c157634e487b7160e01b600052603260045260246000fd5b602002602001015160a00151836101d89190612306565b8282815181106101f857634e487b7160e01b600052603260045260246000fd5b602002602001015160c001818152505081818151811061022857634e487b7160e01b600052603260045260246000fd5b602002602001015160a001518361023f9190612306565b9250856001600160a01b03166308197e14868385858151811061027257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b815260040161029893929190612263565b600060405180830381600087803b1580156102b257600080fd5b505af11580156102c6573d6000803e3d6000fd5b5050505080806102d59061234e565b915050610198565b50949350505050565b60608281015160808401516040517efdd58e0000000000000000000000000000000000000000000000000000000081526000926001600160a01b03169162fdd58e91610336913391600401611c9e565b60206040518083038186803b15801561034e57600080fd5b505afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190611959565b116103ac5760405162461bcd60e51b81526004016103a390611fe7565b60405180910390fd5b82606001516001600160a01b031663f5298aca33856080015160016040518463ffffffff1660e01b81526004016103e593929190611cb7565b600060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b5050505061010083015161012084015160ff8083169116146104ca5783604001516001600160a01b0316636e68fc0a85610100015160ff1686610120015160ff166040518363ffffffff1660e01b8152600401610471929190612255565b602060405180830381600087803b15801561048b57600080fd5b505af115801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c39190611959565b90506104d2565b506101008301515b8060ff1667ffffffffffffffff8111156104fc57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561053557816020015b610522610ea2565b81526020019060019003908161051a5790505b509150600084604001516001600160a01b03166382da649a836040518263ffffffff1660e01b815260040161056a9190612282565b600060405180830381600087803b15801561058457600080fd5b505af1158015610598573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105c0919081019061165b565b905060005b8260ff1681101561073c5760008061060a878585815181106105f757634e487b7160e01b600052603260045260246000fd5b60200260200101518a6101a00151610dde565b91509150868260ff168151811061063157634e487b7160e01b600052603260045260246000fd5b602002602001015186848151811061065957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508086848151811061068557634e487b7160e01b600052603260045260246000fd5b602002602001015160e001818152505087606001516001600160a01b031663156e29f6338886815181106106c957634e487b7160e01b600052603260045260246000fd5b60200260200101516000015160016040518463ffffffff1660e01b81526004016106f593929190611cb7565b600060405180830381600087803b15801561070f57600080fd5b505af1158015610723573d6000803e3d6000fd5b50505050505080806107349061234e565b9150506105c5565b508460800151336001600160a01b03167f717772adf4a2431d4709bd4569689688606f8e214f6e2188f6b1b65405aa25ea878660405161077d929190612192565b60405180910390a3505092915050565b600080610798610f07565b6107a0610fa9565b6040517fb429afeb0000000000000000000000000000000000000000000000000000000081526001600160a01b0388169063b429afeb906107e5903090600401611c6c565b60206040518083038186803b1580156107fd57600080fd5b505afa158015610811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083591906116eb565b15156001146108565760405162461bcd60e51b81526004016103a3906120a1565b50608084015186935015915084821561095f5760608501516001600160a01b03166108935760405162461bcd60e51b81526004016103a3906120fe565b60c0850151516108b55760405162461bcd60e51b81526004016103a390611f0b565b60a0850151516108d75760405162461bcd60e51b81526004016103a390611fb0565b61010085015160ff166108fc5760405162461bcd60e51b81526004016103a390611f42565b61012085015160ff166109215760405162461bcd60e51b81526004016103a390611f79565b8491508460a001516040516020016109399190611c50565b60408051601f198184030181529190528051602090910120608083015260016101c08301525b6001600160a01b038089166020840152608083015160608301526040517fd8ba59030000000000000000000000000000000000000000000000000000000081529085169063d8ba5903906109b9908b908a90600401611c80565b600060405180830381600087803b1580156109d357600080fd5b505af11580156109e7573d6000803e3d6000fd5b505050508215610a8e576040517fe01c8b250000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063e01c8b2590610a3690859060040161217f565b602060405180830381600087803b158015610a5057600080fd5b505af1158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a889190611959565b50610bd8565b60808501516040517f0f09b13e0000000000000000000000000000000000000000000000000000000081526001600160a01b03861691630f09b13e91610ad79190600401612218565b60006040518083038186803b158015610aef57600080fd5b505afa158015610b03573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b2b919081019061170e565b6001600160a01b03808a1660208301526040517f29962c5e0000000000000000000000000000000000000000000000000000000081529193508516906329962c5e90610b7b90859060040161217f565b600060405180830381600087803b158015610b9557600080fd5b505af1158015610ba9573d6000803e3d6000fd5b505083516001600160a01b031633149150610bd890505760405162461bcd60e51b81526004016103a390611eae565b945094509450949050565b610beb610ea2565b83518360ff1610610c0e5760405162461bcd60e51b81526004016103a390612135565b84606001516001600160a01b031663156e29f633868660ff1681518110610c4557634e487b7160e01b600052603260045260246000fd5b602002602001015160000151856040518463ffffffff1660e01b8152600401610c7093929190611cb7565b600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b5050505084606001516001600160a01b0316637c881076858560ff1681518110610cd857634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516000306040518463ffffffff1660e01b8152600401610d0593929190612221565b600060405180830381600087803b158015610d1f57600080fd5b505af1158015610d33573d6000803e3d6000fd5b505050508460800151336001600160a01b03167f63697e2260b880409a8187357cee6ca473b32e0fe2f858fc0e14142696ca847087878760ff1681518110610d8b57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051610da19291906121f3565b60405180910390a3838360ff1681518110610dcc57634e487b7160e01b600052603260045260246000fd5b60200260200101519050949350505050565b600080828410610e005760405162461bcd60e51b81526004016103a390612044565b6000805b8651811015610e9857858211158015610e475750868181518110610e3857634e487b7160e01b600052603260045260246000fd5b602002602001015160c0015186105b15610e5757809350859250610e98565b868181518110610e7757634e487b7160e01b600052603260045260246000fd5b602002602001015160c0015191508080610e909061234e565b915050610e04565b5050935093915050565b6040518061014001604052806000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081526020016060815260200160608152602001600060ff168152602001600060ff168152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604080516101e08101825260008082526020820181905291810182905260608101829052608081018290529060a08201908152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600081525090565b803561102e816123c9565b919050565b805161102e816123c9565b600082601f83011261104e578081fd5b8135602061106361105e836122ba565b612290565b82815281810190858301855b85811015611168578135880161014080601f19838d03011215611090578889fd5b61109981612290565b87830135815260406110ac818501611023565b8983015260606110bd818601611023565b828401526080850135915067ffffffffffffffff808311156110dd578c8dfd5b6110eb8f8c8589010161119a565b8285015260a0860135925080831115611102578c8dfd5b50506111128d8a8387010161119a565b60808301525060c083013560a082015260e083013560c08201526101008084013560e08301526101208085013582840152838501358184015250508087525050508484019350848201915060018101905061106f565b5090979650505050505050565b803561102e816123e1565b805161102e816123e1565b80356004811061102e57600080fd5b600082601f8301126111aa578081fd5b81356111b861105e826122de565b8181528460208386010111156111cc578283fd5b816020850160208301379081016020019190915292915050565b600082601f8301126111f6578081fd5b815161120461105e826122de565b818152846020838601011115611218578283fd5b61122982602083016020870161231e565b949350505050565b60006101e0808385031215611244578182fd5b61124d81612290565b91505061125982611023565b815261126760208301611023565b602082015261127860408301611023565b604082015261128960608301611023565b60608201526080820135608082015260a082013567ffffffffffffffff808211156112b357600080fd5b6112bf8583860161119a565b60a084015260c08401359150808211156112d857600080fd5b6112e48583860161119a565b60c084015260e08401359150808211156112fd57600080fd5b5061130a8482850161119a565b60e08301525061010061131e818401611378565b90820152610120611330838201611378565b908201526101408281013590820152610160808301359082015261018080830135908201526101a080830135908201526101c061136e818401611175565b9082015292915050565b803561102e816123ef565b805161102e816123ef565b6000806000808486036102408112156113a5578485fd5b85356113b0816123c9565b945060208601356113c0816123c9565b93506101e0603f1982018113156113d5578384fd5b6113de81612290565b91506113ec60408801611023565b82526113fa60608801611023565b602083015261140b60808801611023565b604083015260a0870135606083015260c0870135608083015261143060e0880161118b565b60a08301526101008088013560c08401526101208089013560e0850152610140808a0135838601526101609250828a0135828601526101809150818a013581860152506101a0808a0135838601526101c0925061148e838b01611175565b8286015261149d848b01611175565b90850152506102008801359083015250915061022085013567ffffffffffffffff8111156114c9578182fd5b6114d587828801611231565b91505092959194509250565b600080604083850312156114f3578182fd5b82356114fe816123c9565b946020939093013593505050565b6000602080838503121561151e578182fd5b825167ffffffffffffffff80821115611535578384fd5b818501915085601f830112611548578384fd5b815161155661105e826122ba565b81815284810190848601875b8481101561164c578151870161014080601f19838f03011215611583578a8bfd5b61158c81612290565b8a830151815261159e60408401611033565b8b8201526115ae60608401611033565b60408201526080830151898111156115c4578c8dfd5b6115d28f8d838701016111e6565b60608301525060a0830151898111156115e9578c8dfd5b6115f78f8d838701016111e6565b60808301525060c08381015160a083015260e080850151918301919091526101008085015191830191909152610120808501519183019190915291909201519082015284529287019290870190600101611562565b50909998505050505050505050565b6000602080838503121561166d578182fd5b825167ffffffffffffffff811115611683578283fd5b8301601f81018513611693578283fd5b80516116a161105e826122ba565b81815283810190838501858402850186018910156116bd578687fd5b8694505b838510156116df5780518352600194909401939185019185016116c1565b50979650505050505050565b6000602082840312156116fc578081fd5b8151611707816123e1565b9392505050565b60006020828403121561171f578081fd5b815167ffffffffffffffff80821115611736578283fd5b81840191506101e080838703121561174c578384fd5b61175581612290565b905061176083611033565b815261176e60208401611033565b602082015261177f60408401611033565b604082015261179060608401611033565b60608201526080830151608082015260a0830151828111156117b0578485fd5b6117bc878286016111e6565b60a08301525060c0830151828111156117d3578485fd5b6117df878286016111e6565b60c08301525060e0830151828111156117f6578485fd5b611802878286016111e6565b60e0830152506101009150611818828401611383565b82820152610120915061182c828401611383565b918101919091526101408281015190820152610160808301519082015261018080830151908201526101a080830151908201526101c09061186e828401611180565b91810191909152949350505050565b6000806040838503121561188f578182fd5b823567ffffffffffffffff808211156118a6578384fd5b6118b286838701611231565b935060208501359150808211156118c7578283fd5b506118d48582860161103e565b9150509250929050565b600080600080608085870312156118f3578182fd5b843567ffffffffffffffff8082111561190a578384fd5b61191688838901611231565b9550602087013591508082111561192b578384fd5b506119388782880161103e565b9350506040850135611949816123ef565b9396929550929360600135925050565b60006020828403121561196a578081fd5b5051919050565b6001600160a01b03169052565b15159052565b600481106119945761199461239d565b9052565b600081518084526119b081602086016020860161231e565b601f01601f19169290920160200192915050565b60006101408251845260208301516119df6020860182611971565b5060408301516119f26040860182611971565b506060830151816060860152611a0a82860182611998565b91505060808301518482036080860152611a248282611998565b91505060a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152508091505092915050565b60006101e0611a77848451611971565b6020830151611a896020860182611971565b506040830151611a9c6040860182611971565b506060830151611aaf6060860182611971565b506080830151608085015260a08301518160a0860152611ad182860182611998565b91505060c083015184820360c0860152611aeb8282611998565b91505060e083015184820360e0860152611b058282611998565b91505061010080840151611b1b82870182611c49565b505061012080840151611b3082870182611c49565b50506101408381015190850152610160808401519085015261018080840151908501526101a080840151908501526101c080840151611b718287018261197e565b5090949350505050565b611b86828251611971565b6020810151611b986020840182611971565b506040810151611bab6040840182611971565b50606081015160608301526080810151608083015260a0810151611bd260a0840182611984565b5060c0818101519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151611c268285018261197e565b50506101a080820151611c3b8285018261197e565b50506101c090810151910152565b60ff169052565b60008251611c6281846020870161231e565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038316815261020081016117076020830184611b7b565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611d2b57603f19888603018452611d198583516119c4565b94509285019290850190600101611cfd565b5092979650505050505050565b60006102406001600160a01b03871683528515156020840152806040840152611d648184018651611971565b506020840151611d78610260840182611971565b506040840151611d8c610280840182611971565b506060840151611da06102a0840182611971565b5060808401516102c083015260a08401516101e06102e0840152611dc8610420840182611998565b905060c08501517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc08085840301610300860152611e058383611998565b925060e08701519150808584030161032086015250611e248282611998565b915050610100850151611e3b610340850182611c49565b50610120850151611e50610360850182611c49565b506101408501516103808401526101608501516103a08401526101808501516103c08401526101a08501516103e08401526101c0850151611e9561040085018261197e565b509050611ea56060830184611b7b565b95945050505050565b60208082526038908201527f4c6f6f74626f78206d757374206265206f776e6564206279207468652063616c60408201527f6c657220746f20757070677261646520636f6e74726163740000000000000000606082015260800190565b60208082526010908201527f4e616d65206d7573742062652073657400000000000000000000000000000000604082015260600190565b60208082526014908201527f4d696e206c6f6f74206d75737420626520736574000000000000000000000000604082015260600190565b60208082526014908201527f4d6178206c6f6f74206d75737420626520736574000000000000000000000000604082015260600190565b60208082526012908201527f53796d626f6c206d757374206265207365740000000000000000000000000000604082015260600190565b60208082526022908201527f496e73756666696369656e74206c6f6f74626f7820746f6b656e2062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f4469636520726f6c6c206d757374206265206c657373207468616e20746f746160408201527f6c2070726f626162696c69747900000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4c6f6f74626f782064617461206d75737420626520636f6e74726f6c6c65642060408201527f62792074686973206c6f6f74626f780000000000000000000000000000000000606082015260800190565b6020808252601e908201527f4d756c7469746f6b656e2061646472657373206d757374206265207365740000604082015260600190565b60208082526018908201527f4c6f6f7420696e646578206f7574206f6620626f756e64730000000000000000604082015260600190565b60006020825261170760208301846119c4565b6000602082526117076020830184611a67565b6000604082526121a56040830185611a67565b602083820381850152818551808452828401915082838202850101838801865b8381101561164c57601f198784030185526121e18383516119c4565b948601949250908501906001016121c5565b6000604082526122066040830185611a67565b8281036020840152611ea581856119c4565b90815260200190565b83815260608101600384106122385761223861239d565b8360208301526001600160a01b0383166040830152949350505050565b918252602082015260400190565b600084825283602083015260606040830152611ea560608301846119c4565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156122b2576122b26123b3565b604052919050565b600067ffffffffffffffff8211156122d4576122d46123b3565b5060209081020190565b600067ffffffffffffffff8211156122f8576122f86123b3565b50601f01601f191660200190565b6000821982111561231957612319612387565b500190565b60005b83811015612339578181015183820152602001612321565b83811115612348576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561238057612380612387565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123de57600080fd5b50565b80151581146123de57600080fd5b60ff811681146123de57600080fdfea26469706673582212201c9c987196e9a2202bef704286db149e3cbca569ee73a1cfaf570951f5b5dacd64736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(address,address,ITokenSeller.TokenSellerInfo,ILootbox.Lootbox)": {
        "details": "Sets the lootbox data. The lootbox contract can either initialise a new"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}