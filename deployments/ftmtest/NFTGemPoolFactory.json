{
  "address": "0x49eE2Db3bca556F401C0cBbbf6100fF863ba2526",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        }
      ],
      "name": "CustomNFTGemPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "NFTGemPoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "allNFTGemPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allNFTGemPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "bytecode",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        }
      ],
      "name": "createCustomNFTGemPool",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "createNFTGemPool",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_symbolHash",
          "type": "uint256"
        }
      ],
      "name": "getNFTGemPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x80d5cb577a8eb815c1aef19c2bd21c58f1d9d045ff92df5126eca128f58810ef",
  "receipt": {
    "to": null,
    "from": "0x80EBffD553601340B688f246FD20a57BAab17AaD",
    "contractAddress": "0x49eE2Db3bca556F401C0cBbbf6100fF863ba2526",
    "transactionIndex": 0,
    "gasUsed": "4590417",
    "logsBloom": "0x
    "blockHash": "0x00000a40000000a1b6aae69d2e06370fb212525cf8ca2c39630e381c76398a1b",
    "transactionHash": "0x80d5cb577a8eb815c1aef19c2bd21c58f1d9d045ff92df5126eca128f58810ef",
    "logs": [],
    "blockNumber": 616156,
    "cumulativeGasUsed": "4590417",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "df7fa6ede225d4ffc5f822e50380fb11",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"}],\"name\":\"CustomNFTGemPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"NFTGemPoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"allNFTGemPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allNFTGemPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"}],\"name\":\"createCustomNFTGemPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"createNFTGemPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_symbolHash\",\"type\":\"uint256\"}],\"name\":\"getNFTGemPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"allNFTGemPools(uint256)\":{\"details\":\"get the quantized token for this\"},\"allNFTGemPoolsLength()\":{\"details\":\"number of quantized addresses\"},\"createCustomNFTGemPool(bytes,string,string)\":{\"details\":\"deploy a new erc20 token using create2\"},\"createNFTGemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"deploy a new erc20 token using create2\"},\"getNFTGemPool(uint256)\":{\"details\":\"get the quantized token for this\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Check if this address is a controller\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/factories/NFTGemPoolFactory.sol\":\"NFTGemPoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller) external override onlyController {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address) external view override returns (bool allowed) {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function relinquishControl() external view override onlyController {\\n        _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0x3d92a7bc3f11d16541a85a0af7494d0ed57b34875b6d8567d3771d9e65de2573\",\"license\":\"MIT\"},\"src/factories/NFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"../pool/NFTGemPool.sol\\\";\\nimport \\\"../libs/Create2.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\n\\ncontract NFTGemPoolFactory is Controllable, INFTGemPoolFactory {\\n    address private operator;\\n\\n    mapping(uint256 => address) private _getNFTGemPool;\\n    address[] private _allNFTGemPools;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function getNFTGemPool(uint256 _symbolHash) external view override returns (address gemPool) {\\n        gemPool = _getNFTGemPool[_symbolHash];\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function allNFTGemPools(uint256 idx) external view override returns (address gemPool) {\\n        gemPool = _allNFTGemPools[idx];\\n    }\\n\\n    /**\\n     * @dev number of quantized addresses\\n     */\\n    function allNFTGemPoolsLength() external view override returns (uint256) {\\n        return _allNFTGemPools.length;\\n    }\\n\\n    /**\\n     * @dev deploy a new erc20 token using create2\\n     */\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external override onlyController returns (address payable gemPool) {\\n        bytes32 salt = keccak256(abi.encodePacked(gemSymbol));\\n        require(_getNFTGemPool[uint256(salt)] == address(0), \\\"GEMPOOL_EXISTS\\\"); // single check is sufficient\\n\\n        // validation checks to make sure values are sane\\n        require(ethPrice != 0, \\\"INVALID_PRICE\\\");\\n        require(minTime != 0, \\\"INVALID_MIN_TIME\\\");\\n        require(diffstep != 0, \\\"INVALID_DIFFICULTY_STEP\\\");\\n\\n        // create the quantized erc20 token using create2, which lets us determine the\\n        // quantized erc20 address of a token without interacting with the contract itself\\n        bytes memory bytecode = type(NFTGemPool).creationCode;\\n\\n        // use create2 to deploy the quantized erc20 contract\\n        gemPool = payable(Create2.deploy(0, salt, bytecode));\\n\\n        // initialize the erc20 contract with the relevant addresses which it proxies\\n        NFTGemPool(gemPool).initialize(gemSymbol, gemName, ethPrice, minTime, maxTime, diffstep, maxMint, allowedToken);\\n\\n        // insert the erc20 contract address into lists - one that maps source to quantized,\\n        _getNFTGemPool[uint256(salt)] = gemPool;\\n        _allNFTGemPools.push(gemPool);\\n\\n        // emit an event about the new pool being created\\n        emit NFTGemPoolCreated(gemSymbol, gemName, ethPrice, minTime, maxTime, diffstep, maxMint, allowedToken);\\n    }\\n\\n    /**\\n     * @dev deploy a new erc20 token using create2\\n     */\\n    function createCustomNFTGemPool(\\n        bytes memory bytecode,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external override onlyController returns (address payable gemPool) {\\n        bytes32 salt = keccak256(abi.encodePacked(gemSymbol));\\n        require(_getNFTGemPool[uint256(salt)] == address(0), \\\"GEMPOOL_EXISTS\\\"); // single check is sufficient\\n\\n       // use create2 to deploy the quantized erc20 contract\\n        gemPool = payable(Create2.deploy(0, salt, bytecode));\\n\\n        // insert the erc20 contract address into lists - one that maps source to quantized,\\n        _getNFTGemPool[uint256(salt)] = gemPool;\\n        _allNFTGemPools.push(gemPool);\\n\\n        // emit an event about the new pool being created\\n        emit CustomNFTGemPoolCreated(gemSymbol, gemName);\\n    }\\n}\\n\",\"keccak256\":\"0x145e360097d1e4dfab1db3cc04e8afb764f9bcd564ae657f7ae9e32fb8185404\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2f2d8600b126c9f7e41c2d3f94d9cf833ccd0312b74a9563c769743a192f81ca\",\"license\":\"MIT\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6be5c98231ba90ad43bcf7dad027c1a1e7787220565aa3bb24becace05825664\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemFeeManager {\\n\\n    event DefaultFeeDivisorChanged(address indexed operator, uint256 oldValue, uint256 value);\\n    event FeeDivisorChanged(address indexed operator, address indexed token, uint256 oldValue, uint256 value);\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n    event LiquidityChanged(address indexed manager, uint256 oldValue, uint256 value);\\n\\n    function liquidity(address token) external view returns (uint256);\\n\\n    function defaultLiquidity() external view returns (uint256);\\n\\n    function setDefaultLiquidity(uint256 _liquidityMult) external returns (uint256);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor) external returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor) external returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOF(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0xc1beb3a7410a4a0f6f8c47a8901fe81207199ff243704e79e2be60d5ed1bd305\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory,\\n        address _swapHelper\\n    ) external;\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external;\\n\\n    function issueInitialGovernanceTokens(address receiver) external returns (uint256);\\n\\n    function maybeIssueGovernanceToken(address receiver) external returns (uint256);\\n\\n    function issueFuelToken(address receiver, uint256 amount) external returns (uint256);\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createNewPoolProposal(\\n        address,\\n        string memory,\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x1b50c9b3cace4c06f4c147759a6a349402c66b6ab453198553b9159e81a64ce6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9f0c9d0f1d70f965bac24c4b70bb8df227e598228a86ab7f526382f14887b1a6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPool {\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(address account, address pool, uint256 claimHash, uint256 length, uint256 quantity, uint256 amountPaid);\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(address erc20token, uint256 tokenAmount, uint256 count) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function transferFunds(address token, address receiver, uint256 amount) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x06b6b31fdb96175df2aa0e0b129389004522ace6297f3f7573d300c47ada0809\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemPoolData {\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function ethPrice() external view returns (uint256);\\n    function minTime() external view returns (uint256);\\n    function maxTime() external view returns (uint256);\\n    function difficultyStep() external view returns (uint256);\\n    function maxClaims() external view returns (uint256);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n    function mintedCount() external view returns (uint256);\\n    function totalStakedEth() external view returns (uint256);\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n    function allTokenHashesLength() external view returns (uint256);\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n    function nextClaimHash() external view returns (uint256);\\n    function nextGemHash() external view returns (uint256);\\n    function nextGemId() external view returns (uint256);\\n    function nextClaimId() external view returns (uint256);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n    function allowedTokens(uint256 idx) external view returns (address);\\n    function isTokenAllowed(address token) external view returns (bool);\\n    function addAllowedToken(address token) external;\\n    function removeAllowedToken(address token) external;\\n}\\n\",\"keccak256\":\"0x411684c640c8989ab6f079b4f74c2661ad103538aa80370fd066e79f95e60820\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 mintTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    /**\\n     * @dev emitted when a new custom gem pool has been added to the system\\n     */\\n    event CustomNFTGemPoolCreated(\\n        string gemSymbol,\\n        string gemName\\n    );\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n\\n    function createCustomNFTGemPool(\\n        bytes memory bytecode,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n\\n\\n}\\n\",\"keccak256\":\"0xf1eb93628926136712b7a878febf27fe3aba104c0c08095ce1784aea0a15b4ec\",\"license\":\"MIT\"},\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ISwapQueryHelper {\\n\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external pure returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(\\n        address pair\\n    ) external view returns (uint256, uint256);\\n\\n    function pairFor(\\n        address tokenA,\\n        address tokenB\\n    ) external pure returns (address);\\n\\n    function getPathForCoinToToken(address token) external pure returns (address[] memory);\\n\\n}\\n\",\"keccak256\":\"0x65783cec8fdaa119bb293d14881c0c6a2be3105f69490a6c86f311acaa2dad8b\",\"license\":\"MIT\"},\"src/libs/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x5ba9948f2d0fa1e5c4ecd4fbd3cdc836e6c26e07375c4d0482593291e649a072\",\"license\":\"MIT\"},\"src/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x688b57d8a4d5b6221b74de43b603ac03191e89f278c361ea7ceb257268882c4b\",\"license\":\"MIT\"},\"src/pool/NFTGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/ISwapQueryHelper.sol\\\";\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"./NFTGemPoolData.sol\\\";\\n\\ncontract NFTGemPool is Initializable, NFTGemPoolData, INFTGemPool {\\n    using SafeMath for uint256;\\n\\n    // governor and multitoken target\\n    address private _multitoken;\\n    address private _governor;\\n    address private _feeTracker;\\n    address private _swapHelper;\\n\\n    /**\\n     * @dev initializer called when contract is deployed\\n     */\\n    function initialize (\\n        string memory __symbol,\\n        string memory __name,\\n        uint256 __ethPrice,\\n        uint256 __minTime,\\n        uint256 __maxTime,\\n        uint256 __diffstep,\\n        uint256 __maxClaims,\\n        address __allowedToken\\n    ) external override initializer {\\n        _symbol = __symbol;\\n        _name = __name;\\n        _ethPrice = __ethPrice;\\n        _minTime = __minTime;\\n        _maxTime = __maxTime;\\n        _diffstep = __diffstep;\\n        _maxClaims = __maxClaims;\\n\\n        if(__allowedToken != address(0)) {\\n            _allowedTokens.push(__allowedToken);\\n            _isAllowedMap[__allowedToken] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev set the governor. pool uses the governor to issue gov token issuance requests\\n     */\\n    function setGovernor(address addr) external override {\\n        require(_governor == address(0), \\\"IMMUTABLE\\\");\\n        _governor = addr;\\n    }\\n\\n    /**\\n     * @dev set the fee tracker that the pool uses to determine what fees to charge\\n     */\\n    function setFeeTracker(address addr) external override {\\n        require(_feeTracker == address(0), \\\"IMMUTABLE\\\");\\n        _feeTracker = addr;\\n    }\\n\\n    /**\\n     * @dev set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken\\n     */\\n    function setMultiToken(address token) external override {\\n        require(_multitoken == address(0), \\\"IMMUTABLE\\\");\\n        _multitoken = token;\\n    }\\n\\n    /**\\n     * @dev set the swap helper that this pool will mint new tokens on. Must be a controller of the multitoken\\n     */\\n    function setSwapHelper(address helper) external override {\\n        require(_swapHelper == address(0), \\\"IMMUTABLE\\\");\\n        _swapHelper = helper;\\n    }\\n\\n    /**\\n     * @dev mint the genesis gems earned by the pools creator and funder\\n     */\\n    function mintGenesisGems(address creator, address funder) external override {\\n        require(_multitoken != address(0), \\\"NO_MULTITOKEN\\\");\\n        require(creator != address(0) && funder != address(0), \\\"ZERO_DESTINATION\\\");\\n        require(_nextGemId == 0, \\\"ALREADY_MINTED\\\");\\n\\n        uint256 gemHash = _nextGemHash();\\n        INFTGemMultiToken(_multitoken).mint(creator, gemHash, 1);\\n        _addToken(gemHash, 2);\\n\\n        gemHash = _nextGemHash();\\n        INFTGemMultiToken(_multitoken).mint(creator, gemHash, 1);\\n        _addToken(gemHash, 2);\\n    }\\n\\n    /**\\n     * @dev the external version of creating a claim\\n     */\\n    function createClaim(uint256 timeframe) external payable override {\\n        _createClaim(timeframe);\\n    }\\n\\n    /**\\n     * @dev the external version of creating multiple claims\\n     */\\n    function createClaims(uint256 timeframe, uint256 count) external payable override {\\n        _createClaims(timeframe, count);\\n    }\\n\\n    /**\\n     * @dev create a claim using a erc20 token\\n     */\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external override {\\n        _createERC20Claim(erc20token, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev create claims using a erc20 token\\n     */\\n    function createERC20Claims(address erc20token, uint256 tokenAmount, uint256 count) external override {\\n        _createERC20Claims(erc20token, tokenAmount, count);\\n    }\\n\\n\\n    /**\\n     * @dev default receive. tries to issue a claim given the received ETH or revert\\n     */\\n    receive() external payable {\\n        uint256 incomingEth = msg.value;\\n\\n        // compute the mimimum cost of a claim and revert if not enough sent\\n        uint256 minClaimCost = _ethPrice.div(_maxTime).mul(_minTime);\\n        require(incomingEth >= minClaimCost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // compute the minimum actual claim time\\n        uint256 actualClaimTime = _minTime;\\n\\n        // refund ETH above max claim cost\\n        if (incomingEth <= _ethPrice)  {\\n            actualClaimTime = _ethPrice.div(incomingEth).mul(_minTime);\\n        }\\n\\n        // create the claim using minimum possible claim time\\n        _createClaim(actualClaimTime);\\n    }\\n\\n    /**\\n     * @dev attempt to create a claim using the given timeframe\\n     */\\n    function _createClaim(uint256 timeframe) internal {\\n        // minimum timeframe\\n        require(timeframe >= _minTime, \\\"TIMEFRAME_TOO_SHORT\\\");\\n\\n        // maximum timeframe\\n        require((_maxTime != 0 && timeframe <= _maxTime) || _maxTime == 0, \\\"TIMEFRAME_TOO_LONG\\\");\\n\\n        // cost given this timeframe\\n        uint256 cost = _ethPrice.mul(_minTime).div(timeframe);\\n        require(msg.value > cost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // get the nest claim hash, revert if no more claims\\n        uint256 claimHash = _nextClaimHash();\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, claimHash, 1);\\n        _addToken(claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 _claimUnlockTime = block.timestamp.add(timeframe);\\n        claimLockTimestamps[claimHash] = _claimUnlockTime;\\n        claimAmountPaid[claimHash] = cost;\\n        claimQuant[claimHash] = 1;\\n\\n        // increase the staked eth balance\\n        _totalStakedEth = _totalStakedEth.add(cost);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, cost);\\n\\n        emit NFTGemClaimCreated(msg.sender, address(this), claimHash, timeframe, 1, cost);\\n\\n        // refund any overpaid amount\\n        if (msg.value > cost) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value.sub(cost)}(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev attempt to create a claim using the given timeframe, for the given count of tokens\\n     */\\n    function _createClaims(uint256 timeframe, uint256 count) internal {\\n        // minimum timeframe\\n        require(timeframe >= _minTime, \\\"TIMEFRAME_TOO_SHORT\\\");\\n        // no ETH\\n        require(msg.value != 0, \\\"ZERO_BALANCE\\\");\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n        // maximum timeframe\\n        require((_maxTime != 0 && timeframe <= _maxTime) || _maxTime == 0, \\\"TIMEFRAME_TOO_LONG\\\");\\n\\n        // adjusted balance - we just need to figure out if portion given for one will work for all\\n        uint256 adjustedBalance = msg.value.div(count);\\n\\n        // cost given this timeframe\\n        uint256 cost = _ethPrice.mul(_minTime).div(timeframe);\\n        require(adjustedBalance >= cost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // get the nest claim hash, revert if no more claims\\n        uint256 claimHash = _nextClaimHash();\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, claimHash, 1);\\n        _addToken(claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 _claimUnlockTime = block.timestamp.add(timeframe);\\n        claimLockTimestamps[claimHash] = _claimUnlockTime;\\n        claimAmountPaid[claimHash] = cost.mul(count);\\n        claimQuant[claimHash] = count;\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, cost);\\n\\n        emit NFTGemClaimCreated(msg.sender, address(this), claimHash, timeframe, count, cost);\\n\\n        // increase the staked eth balance\\n        _totalStakedEth = _totalStakedEth.add(cost.mul(count));\\n\\n        if (msg.value > cost.mul(count)) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value.sub(cost.mul(count))}(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev crate a gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\\n     */\\n    function _createERC20Claim(address erc20token, uint256 tokenAmount) internal {\\n        // must be a valid address\\n        require(erc20token != address(0), \\\"INVALID_ERC20_TOKEN\\\");\\n\\n        // token is allowed\\n        require((_allowedTokens.length > 0 && _isAllowedMap[erc20token]) || _allowedTokens.length == 0, \\\"TOKEN_DISALLOWED\\\");\\n\\n        // Uniswap pool must exist\\n        require(ISwapQueryHelper(_swapHelper).hasPool(erc20token) == true, \\\"NO_UNISWAP_POOL\\\");\\n\\n        // must have an amount specified\\n        require(tokenAmount >= 0, \\\"NO_PAYMENT_INCLUDED\\\");\\n\\n        // get a quote in ETH for the given token.\\n        (uint256 ethereum, uint256 tokenReserve, uint256 ethReserve) = ISwapQueryHelper(_swapHelper).coinQuote(erc20token, tokenAmount);\\n\\n        // get the min liquidity from fee tracker\\n        uint256 liquidity = INFTGemFeeManager(_feeTracker).liquidity(erc20token);\\n\\n        // make sure the convertible amount is has reserves > 100x the token\\n        require(ethReserve >= ethereum.mul(liquidity), \\\"INSUFFICIENT_ETH_LIQUIDITY\\\");\\n\\n        // make sure the convertible amount is has reserves > 100x the token\\n        require(tokenReserve >= tokenAmount.mul(liquidity), \\\"INSUFFICIENT_TOKEN_LIQUIDITY\\\");\\n\\n        // make sure the convertible amount is less than max price\\n        require(ethereum <= _ethPrice, \\\"OVERPAYMENT\\\");\\n\\n        // calculate the maturity time given the converted eth\\n        uint256 maturityTime = _ethPrice.mul(_minTime).div(ethereum);\\n\\n        // make sure the convertible amount is less than max price\\n        require(maturityTime >= _minTime, \\\"INSUFFICIENT_TIME\\\");\\n\\n        // get the next claim hash, revert if no more claims\\n        uint256 claimHash = _nextClaimHash();\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // transfer the caller's ERC20 tokens into the pool\\n        IERC20(erc20token).transferFrom(msg.sender, address(this), tokenAmount);\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, claimHash, 1);\\n        _addToken(claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 _claimUnlockTime = block.timestamp.add(maturityTime);\\n        claimLockTimestamps[claimHash] = _claimUnlockTime;\\n        claimAmountPaid[claimHash] = ethereum;\\n        claimLockToken[claimHash] = erc20token;\\n        claimTokenAmountPaid[claimHash] = tokenAmount;\\n        claimQuant[claimHash] = 1;\\n\\n        _totalStakedEth = _totalStakedEth.add(ethereum);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, ethereum);\\n\\n        // emit a message indicating that an erc20 claim has been created\\n        emit NFTGemERC20ClaimCreated(msg.sender, address(this), claimHash, maturityTime, erc20token, 1, ethereum);\\n    }\\n\\n    /**\\n     * @dev crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\\n     */\\n    function _createERC20Claims(address erc20token, uint256 tokenAmount, uint256 count) internal {\\n        // must be a valid address\\n        require(erc20token != address(0), \\\"INVALID_ERC20_TOKEN\\\");\\n\\n        // token is allowed\\n        require((_allowedTokens.length > 0 && _isAllowedMap[erc20token]) || _allowedTokens.length == 0, \\\"TOKEN_DISALLOWED\\\");\\n\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n\\n        // Uniswap pool must exist\\n        require(ISwapQueryHelper(_swapHelper).hasPool(erc20token) == true, \\\"NO_UNISWAP_POOL\\\");\\n\\n        // must have an amount specified\\n        require(tokenAmount >= 0, \\\"NO_PAYMENT_INCLUDED\\\");\\n\\n        // get a quote in ETH for the given token.\\n        (uint256 ethereum, uint256 tokenReserve, uint256 ethReserve) = ISwapQueryHelper(_swapHelper).coinQuote(\\n            erc20token,\\n            tokenAmount.div(count)\\n        );\\n\\n        // make sure the convertible amount is has reserves > 100x the token\\n        require(ethReserve >= ethereum.mul(100).mul(count), \\\"INSUFFICIENT_ETH_LIQUIDITY\\\");\\n\\n        // make sure the convertible amount is has reserves > 100x the token\\n        require(tokenReserve >= tokenAmount.mul(100).mul(count), \\\"INSUFFICIENT_TOKEN_LIQUIDITY\\\");\\n\\n        // make sure the convertible amount is less than max price\\n        require(ethereum <= _ethPrice, \\\"OVERPAYMENT\\\");\\n\\n        // calculate the maturity time given the converted eth\\n        uint256 maturityTime = _ethPrice.mul(_minTime).div(ethereum);\\n\\n        // make sure the convertible amount is less than max price\\n        require(maturityTime >= _minTime, \\\"INSUFFICIENT_TIME\\\");\\n\\n        // get the next claim hash, revert if no more claims\\n        uint256 claimHash = _nextClaimHash();\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, claimHash, 1);\\n        _addToken(claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 _claimUnlockTime = block.timestamp.add(maturityTime);\\n        claimLockTimestamps[claimHash] = _claimUnlockTime;\\n        claimAmountPaid[claimHash] = ethereum;\\n        claimLockToken[claimHash] = erc20token;\\n        claimTokenAmountPaid[claimHash] = tokenAmount;\\n        claimQuant[claimHash] = count;\\n\\n        // increase staked eth amount\\n        _totalStakedEth = _totalStakedEth.add(ethereum);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, ethereum);\\n\\n        // emit a message indicating that an erc20 claim has been created\\n        emit NFTGemERC20ClaimCreated(msg.sender, address(this), claimHash, maturityTime, erc20token, count, ethereum);\\n\\n        // transfer the caller's ERC20 tokens into the pool\\n        IERC20(erc20token).transferFrom(msg.sender, address(this), tokenAmount);\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function collectClaim(uint256 claimHash) external override {\\n        // validation checks - disallow if not owner (holds coin with claimHash)\\n        // or if the unlockTime amd unlockPaid data is in an invalid state\\n        require(IERC1155(_multitoken).balanceOf(msg.sender, claimHash) == 1, \\\"NOT_CLAIM_OWNER\\\");\\n        uint256 unlockTime = claimLockTimestamps[claimHash];\\n        uint256 unlockPaid = claimAmountPaid[claimHash];\\n        require(unlockTime != 0 && unlockPaid > 0, \\\"INVALID_CLAIM\\\");\\n\\n        // grab the erc20 token info if there is any\\n        address tokenUsed = claimLockToken[claimHash];\\n        uint256 unlockTokenPaid = claimTokenAmountPaid[claimHash];\\n\\n        // check the maturity of the claim - only issue gem if mature\\n        bool isMature = unlockTime < block.timestamp;\\n\\n        //  burn claim and transfer money back to user\\n        INFTGemMultiToken(_multitoken).burn(msg.sender, claimHash, 1);\\n\\n        // if they used erc20 tokens stake their claim, return their tokens\\n        if (tokenUsed != address(0)) {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 poolDiv = INFTGemFeeManager(_feeTracker).feeDivisor(address(this));\\n                uint256 divisor = INFTGemFeeManager(_feeTracker).feeDivisor(tokenUsed);\\n                uint256 feeNum = poolDiv != divisor ? divisor : poolDiv;\\n                feePortion = unlockTokenPaid.div(feeNum);\\n            }\\n            // assess a fee for minting the NFT. Fee is collectec in fee tracker\\n            IERC20(tokenUsed).transferFrom(address(this), _feeTracker, feePortion);\\n            // send the principal minus fees to the caller\\n            IERC20(tokenUsed).transferFrom(address(this), msg.sender, unlockTokenPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ERC20\\n            emit NFTGemERC20ClaimRedeemed(\\n                msg.sender,\\n                address(this),\\n                claimHash,\\n                tokenUsed,\\n                unlockPaid,\\n                unlockTokenPaid,\\n                feePortion\\n            );\\n        } else {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 divisor = INFTGemFeeManager(_feeTracker).feeDivisor(address(0));\\n                feePortion = unlockPaid.div(divisor);\\n            }\\n            // transfer the ETH fee to fee tracker\\n            payable(_feeTracker).transfer(feePortion);\\n            // transfer the ETH back to user\\n            payable(msg.sender).transfer(unlockPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ETH\\n            emit NFTGemClaimRedeemed(msg.sender, address(this), claimHash, unlockPaid, feePortion);\\n        }\\n\\n        // deduct the total staked ETH balance of the pool\\n        _totalStakedEth = _totalStakedEth.sub(unlockPaid);\\n\\n        // if all this is happening before the unlocktime then we exit\\n        // without minting a gem because the user is withdrawing early\\n        if (!isMature) {\\n            return;\\n        }\\n\\n        // get the next gem hash, increase the staking sifficulty\\n        // for the pool, and mint a gem token back to account\\n        uint256 nextHash = this.nextGemHash();\\n\\n        // mint the gem\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, nextHash, claimQuant[claimHash]);\\n        _addToken(nextHash, 2);\\n\\n        // maybe mint a governance token\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, unlockPaid);\\n\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(msg.sender, address(this), claimHash, nextHash, claimQuant[claimHash]);\\n    }\\n\\n    /**\\n     * @dev governance-driven\\n     */\\n    function transferFunds(address token, address receiver, uint256 amount) external override {\\n\\n        require(msg.sender == _governor, \\\"UNAUTHORIZED_NAUGHTY\\\");\\n        require(token != address(0), \\\"LOL_MINT_NO\\\");\\n        require(receiver != address(0), \\\"NOT_UR_MONEY_2_BURN\\\");\\n        require(amount != 0, \\\"CANNOT_SEND_ZERO_THINGS_GENIUS\\\");\\n\\n        if(token == address(0)) {\\n            // transfer the ETH  to the receiver\\n            payable(receiver).transfer(amount);\\n        } else {\\n            // transfer the tokens  to the receiver\\n            IERC20(token).transfer(receiver, amount);\\n        }\\n\\n    }\\n}\\n\",\"keccak256\":\"0x3281a081fa1c4707d6f99b6f7600a37ffdeec1d2d39610d55e10042ec2c59f6b\",\"license\":\"MIT\"},\"src/pool/NFTGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolData.sol\\\";\\n\\n\\ncontract NFTGemPoolData is INFTGemPoolData, Initializable {\\n    using SafeMath for uint256;\\n\\n    // it all starts with a symbol and a nams\\n    string internal _symbol;\\n    string internal _name;\\n\\n    // magic economy numbers\\n    uint256 internal _ethPrice;\\n    uint256 internal _minTime;\\n    uint256 internal _maxTime;\\n    uint256 internal _diffstep;\\n    uint256 internal _maxClaims;\\n\\n    mapping(uint256 => uint8) internal _tokenTypes;\\n    mapping(uint256 => uint256) internal _tokenIds;\\n    uint256[] internal _tokenHashes;\\n\\n    // next ids of things\\n    uint256 internal _nextGemId;\\n    uint256 internal _nextClaimId;\\n    uint256 internal _totalStakedEth;\\n\\n    // records claim timestamp / ETH value / ERC token and amount sent\\n    mapping(uint256 => uint256) internal claimLockTimestamps;\\n    mapping(uint256 => address) internal claimLockToken;\\n    mapping(uint256 => uint256) internal claimAmountPaid;\\n    mapping(uint256 => uint256) internal claimQuant;\\n    mapping(uint256 => uint256) internal claimTokenAmountPaid;\\n\\n    address[] internal _allowedTokens;\\n    mapping(address => bool) internal _isAllowedMap;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev The symbol for this pool / NFT\\n     */\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev The name for this pool / NFT\\n     */\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The ether price for this pool / NFT\\n     */\\n    function ethPrice() external view override returns (uint256) {\\n        return _ethPrice;\\n    }\\n\\n    /**\\n     * @dev min time to stake in this pool to earn an NFT\\n     */\\n    function minTime() external view override returns (uint256) {\\n        return _minTime;\\n    }\\n\\n    /**\\n     * @dev max time to stake in this pool to earn an NFT\\n     */\\n    function maxTime() external view override returns (uint256) {\\n        return _maxTime;\\n    }\\n\\n    /**\\n     * @dev difficulty step increase for this pool.\\n     */\\n    function difficultyStep() external view override returns (uint256) {\\n        return _diffstep;\\n    }\\n\\n    /**\\n     * @dev max claims that can be made on this NFT\\n     */\\n    function maxClaims() external view override returns (uint256) {\\n        return _maxClaims;\\n    }\\n\\n    /**\\n     * @dev number of claims made thus far\\n     */\\n    function claimedCount() external view override returns (uint256) {\\n        return _nextClaimId;\\n    }\\n\\n    /**\\n     * @dev the number of gems minted in this\\n     */\\n    function mintedCount() external view override returns (uint256) {\\n        return _nextGemId;\\n    }\\n\\n    /**\\n     * @dev the number of gems minted in this\\n     */\\n    function totalStakedEth() external view override returns (uint256) {\\n        return _totalStakedEth;\\n    }\\n\\n    /**\\n     * @dev get token type of hash - 1 is for claim, 2 is for gem\\n     */\\n    function tokenType(uint256 tokenHash) external view override returns (uint8) {\\n        return _tokenTypes[tokenHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function tokenId(uint256 tokenHash) external view override returns (uint256) {\\n        return _tokenIds[tokenHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashesLength() external view override returns (uint256) {\\n        return _tokenHashes.length;\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashes(uint256 ndx) external view override returns (uint256) {\\n        return _tokenHashes[ndx];\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextClaimHash() external view override returns (uint256) {\\n        return _nextClaimHash();\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextGemHash() external view override returns (uint256) {\\n        return _nextGemHash();\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextClaimId() external view override returns (uint256) {\\n        return _nextClaimId;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextGemId() external view override returns (uint256) {\\n        return _nextGemId;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function allowedTokensLength() external view override returns (uint256) {\\n        return _allowedTokens.length;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function allowedTokens(uint256 idx) external view override returns (address) {\\n        return _allowedTokens[idx];\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function isTokenAllowed(address token) external view override returns (bool) {\\n        return _isAllowedMap[token];\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function addAllowedToken(address token) external override {\\n        if(!_isAllowedMap[token]) {\\n            _allowedTokens.push(token);\\n            _isAllowedMap[token] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function removeAllowedToken(address token) external override {\\n        if(_isAllowedMap[token]) {\\n            for(uint256 i = 0; i < _allowedTokens.length; i++) {\\n                if(_allowedTokens[i] == token) {\\n                   _allowedTokens[i] = _allowedTokens[_allowedTokens.length - 1];\\n                    delete _allowedTokens[_allowedTokens.length - 1];\\n                    _isAllowedMap[token] = false;\\n                    return;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev the claim amount for the given claim id\\n     */\\n    function claimAmount(uint256 claimHash) external view override returns (uint256) {\\n        return claimAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the claim quantity (count of gems staked) for the given claim id\\n     */\\n    function claimQuantity(uint256 claimHash) external view override returns (uint256) {\\n        return claimQuant[claimHash];\\n    }\\n\\n    /**\\n     * @dev the lock time for this claim. once past lock time a gema is minted\\n     */\\n    function claimUnlockTime(uint256 claimHash) external view override returns (uint256) {\\n        return claimLockTimestamps[claimHash];\\n    }\\n\\n    /**\\n     * @dev claim token amount if paid using erc20\\n     */\\n    function claimTokenAmount(uint256 claimHash) external view override returns (uint256) {\\n        return claimTokenAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the staked token if staking with erc20\\n     */\\n    function stakedToken(uint256 claimHash) external view override returns (address) {\\n        return claimLockToken[claimHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function _addToken(uint256 tokenHash, uint8 tt) internal {\\n        require(tt == 1 || tt == 2, \\\"INVALID_TOKENTYPE\\\");\\n        _tokenHashes.push(tokenHash);\\n        _tokenTypes[tokenHash] = tt;\\n        _tokenIds[tokenHash] = tt == 1 ? __nextClaimId() : __nextGemId();\\n        if(tt == 2) {\\n            _increaseDifficulty();\\n        }\\n    }\\n\\n    /**\\n     * @dev get the next claim id\\n     */\\n    function __nextClaimId() private returns (uint256) {\\n        uint256 ncId = _nextClaimId;\\n        _nextClaimId = _nextClaimId.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev get the next gem id\\n     */\\n    function __nextGemId() private returns (uint256) {\\n        uint256 ncId = _nextGemId;\\n        _nextGemId = _nextGemId.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\\n     */\\n    function _increaseDifficulty() private {\\n        uint256 diffIncrease = _ethPrice.div(_diffstep);\\n        _ethPrice = _ethPrice.add(diffIncrease);\\n    }\\n\\n    /**\\n     * @dev the hash of the next gem to be minted\\n     */\\n    function _nextGemHash() internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\\"gem\\\", address(this), _nextGemId)));\\n    }\\n\\n    /**\\n     * @dev the hash of the next claim to be minted\\n     */\\n    function _nextClaimHash() internal view returns (uint256) {\\n        return\\n            (_maxClaims != 0 && _nextClaimId <= _maxClaims) || _maxClaims == 0\\n                ? uint256(keccak256(abi.encodePacked(\\\"claim\\\", address(this), _nextClaimId)))\\n                : 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2032f4f485420732475991c1619e92fcf3f84f13557a9187deba04b20ad53a87\",\"license\":\"MIT\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x449514510d4ad1b6d147c8e25e9c9e2f7652ead618c4ed1b8021ce128778fad1\",\"license\":\"MIT\"},\"src/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xdda65747b0bb97e8f0cf0e3bb767d4de43420edf302dd11008536ba2aecf46a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610043565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b615216806100526000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a7fc7a071161005b578063a7fc7a071461026b578063b429afeb146102a0578063e1c28bef146102e7578063e4aa923d146102ef57610088565b80631ff77f161461008d5780634ff8f07e146100d35780635e6fe72a1461023457806367275aed1461024e575b600080fd5b6100aa600480360360208110156100a357600080fd5b50356104a3565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100aa60048036036101008110156100ea57600080fd5b81019060208101813564010000000081111561010557600080fd5b82018360208201111561011757600080fd5b8035906020019184600183028401116401000000008311171561013957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561018c57600080fd5b82018360208201111561019e57600080fd5b803590602001918460018302840111640100000000831117156101c057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff166104da565b61023c610abb565b60408051918252519081900360200190f35b6100aa6004803603602081101561026457600080fd5b5035610ac1565b61029e6004803603602081101561028157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ae9565b005b6102d3600480360360208110156102b657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b95565b604080519115158252519081900360200190f35b61029e610bc0565b6100aa6004803603606081101561030557600080fd5b81019060208101813564010000000081111561032057600080fd5b82018360208201111561033257600080fd5b8035906020019184600183028401116401000000008311171561035457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156103a757600080fd5b8201836020820111156103b957600080fd5b803590602001918460018302840111640100000000831117156103db57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561042e57600080fd5b82018360208201111561044057600080fd5b8035906020019184600183028401116401000000008311171561046257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c28945050505050565b6000600382815481106104b257fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b3360009081526020819052604081205460ff161515600114806104fc57503033145b6105375760405162461bcd60e51b81526004018080602001828103825260288152602001806151b96028913960400191505060405180910390fd5b6000896040516020018082805190602001908083835b6020831061056c5780518252601f19909201916020918201910161054d565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790526040805192909401828103601f19018352845281519181019190912060008181526002909252929020549194505073ffffffffffffffffffffffffffffffffffffffff1615915061063e9050576040805162461bcd60e51b815260206004820152600e60248201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604482015290519081900360640190fd5b87610690576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f505249434500000000000000000000000000000000000000604482015290519081900360640190fd5b866106e2576040805162461bcd60e51b815260206004820152601060248201527f494e56414c49445f4d494e5f54494d4500000000000000000000000000000000604482015290519081900360640190fd5b84610734576040805162461bcd60e51b815260206004820152601760248201527f494e56414c49445f444946464943554c54595f53544550000000000000000000604482015290519081900360640190fd5b60606040518060200161074690611055565b601f1982820381018352601f90910116604052905061076760008383610f2f565b92508273ffffffffffffffffffffffffffffffffffffffff1663d9a3f9bb8c8c8c8c8c8c8c8c6040518963ffffffff1660e01b81526004018080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b838110156108175781810151838201526020016107ff565b50505050905090810190601f1680156108445780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b8381101561087757818101518382015260200161085f565b50505050905090810190601f1680156108a45780820380516001836020036101000a031916815260200191505b509a5050505050505050505050600060405180830381600087803b1580156108cb57600080fd5b505af11580156108df573d6000803e3d6000fd5b505050600083815260026020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8a8116918217909355600380546001810182559087527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805490921617905581519182018e9052606082018d9052608082018c905260a082018b905260c082018a9052881660e08201526101008082528f51908201528e517fd5dd03a462020e8d5d777d0957fbf19067fc095f932d026bb0f23e384522f2a694508f938f938f938f938f938f938f938f939092839283810192610120850192918e01918190849084905b83811015610a0b5781810151838201526020016109f3565b50505050905090810190601f168015610a385780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b83811015610a6b578181015183820152602001610a53565b50505050905090810190601f168015610a985780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a1505098975050505050505050565b60035490565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b3360009081526020819052604090205460ff16151560011480610b0b57503033145b610b465760405162461bcd60e51b81526004018080602001828103825260288152602001806151b96028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b3360009081526020819052604090205460ff16151560011480610be257503033145b610c1d5760405162461bcd60e51b81526004018080602001828103825260288152602001806151b96028913960400191505060405180910390fd5b336000908152602052565b3360009081526020819052604081205460ff16151560011480610c4a57503033145b610c855760405162461bcd60e51b81526004018080602001828103825260288152602001806151b96028913960400191505060405180910390fd5b6000836040516020018082805190602001908083835b60208310610cba5780518252601f199092019160209182019101610c9b565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790526040805192909401828103601f19018352845281519181019190912060008181526002909252929020549194505073ffffffffffffffffffffffffffffffffffffffff16159150610d8c9050576040805162461bcd60e51b815260206004820152600e60248201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604482015290519081900360640190fd5b610d9860008287610f2f565b6000828152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff86167fffffffffffffffffffffffff00000000000000000000000000000000000000009182168117909255600380546001810182559086527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180549091169091179055805181815288519181019190915287519395507f89087d44119cf78c7cc1dfb971ca45b6aa9fde12ab6feedacc1fb42c3487862c93889388938392838201926060850192880191908190849084905b83811015610e8b578181015183820152602001610e73565b50505050905090810190601f168015610eb85780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610eeb578181015183820152602001610ed3565b50505050905090810190601f168015610f185780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1509392505050565b60008084471015610f87576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b8251610fda576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff811661104d576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b949350505050565b614156806110638339019056fe608060405234801561001057600080fd5b50614136806100206000396000f3fe6080604052600436106102bf5760003560e01c806395d89b411161016e578063cf721b15116100cb578063e6c3b1f61161007f578063f4fde0d311610064578063f4fde0d314610a9d578063f9eaee0d14610ab2578063ff186b2e14610af957610374565b8063e6c3b1f614610a24578063edcf2d5714610a6457610374565b8063d31674db116100b0578063d31674db14610866578063d73cd47f14610890578063d9a3f9bb146108c357610374565b8063cf721b1514610809578063d104f8f51461083357610374565b8063c08fa1a411610122578063c5e01a5c11610107578063c5e01a5c146107df578063c80c061314610809578063cf5380b41461081e57610374565b8063c08fa1a414610743578063c42cf535146107ac57610374565b8063a901c47411610153578063a901c47414610758578063b788e4e914610782578063bf86999b1461079757610374565b806395d89b411461072e578063a0021cf11461074357610374565b80635e5f2e261161021c5780637f2e8f0c116101d057806390469a9d116101b557806390469a9d1461069e5780639277a185146106d1578063959355601461070457610374565b80637f2e8f0c1461065f5780638a09871b1461068957610374565b80636b6201da116102015780636b6201da146105ee5780637c5d643e1461060b5780637dcb0e5f1461063557610374565b80635e5f2e26146105695780636100c343146105af57610374565b80632449ef51116102735780634178617f116102585780634178617f1461050c5780634565e5ef1461053f578063504cdacf1461055457610374565b80632449ef51146104ae578063392732b1146104e957610374565b80631aa43078116102a45780631aa430781461044857806322e67e711461046f57806323b221a01461048457610374565b806306fdde03146103795780631501bf031461040357610374565b366103745760045460055460035434926000926102e5926102df91610b0e565b90610b77565b90508082101561033c576040805162461bcd60e51b815260206004820152601060248201527f494e53554646494349454e545f45544800000000000000000000000000000000604482015290519081900360640190fd5b6004546003548311610366576103636004546102df85600354610b0e90919063ffffffff16565b90505b61036f81610bd7565b505050005b600080fd5b34801561038557600080fd5b5061038e611085565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103c85781810151838201526020016103b0565b50505050905090810190601f1680156103f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040f57600080fd5b506104466004803603606081101561042657600080fd5b506001600160a01b03813581169160208101359091169060400135611136565b005b34801561045457600080fd5b5061045d61136d565b60408051918252519081900360200190f35b34801561047b57600080fd5b5061045d611373565b34801561049057600080fd5b5061045d600480360360208110156104a757600080fd5b5035611379565b3480156104ba57600080fd5b50610446600480360360408110156104d157600080fd5b506001600160a01b038135811691602001351661138b565b610446600480360360408110156104ff57600080fd5b50803590602001356115f4565b34801561051857600080fd5b506104466004803603602081101561052f57600080fd5b50356001600160a01b0316611602565b34801561054b57600080fd5b5061045d6116a1565b34801561056057600080fd5b5061045d6116a7565b34801561057557600080fd5b506105936004803603602081101561058c57600080fd5b50356116ad565b604080516001600160a01b039092168252519081900360200190f35b3480156105bb57600080fd5b50610446600480360360608110156105d257600080fd5b506001600160a01b0381351690602081013590604001356116d7565b6104466004803603602081101561060457600080fd5b50356116e2565b34801561061757600080fd5b506104466004803603602081101561062e57600080fd5b50356116eb565b34801561064157600080fd5b5061045d6004803603602081101561065857600080fd5b5035612035565b34801561066b57600080fd5b5061045d6004803603602081101561068257600080fd5b5035612047565b34801561069557600080fd5b5061045d612059565b3480156106aa57600080fd5b50610446600480360360208110156106c157600080fd5b50356001600160a01b0316612068565b3480156106dd57600080fd5b50610446600480360360208110156106f457600080fd5b50356001600160a01b03166121ec565b34801561071057600080fd5b5061045d6004803603602081101561072757600080fd5b5035612284565b34801561073a57600080fd5b5061038e612296565b34801561074f57600080fd5b5061045d612314565b34801561076457600080fd5b5061045d6004803603602081101561077b57600080fd5b503561231a565b34801561078e57600080fd5b5061045d61232c565b3480156107a357600080fd5b5061045d612336565b3480156107b857600080fd5b50610446600480360360208110156107cf57600080fd5b50356001600160a01b031661233c565b3480156107eb57600080fd5b506105936004803603602081101561080257600080fd5b50356123d4565b34801561081557600080fd5b5061045d6123ef565b34801561082a57600080fd5b5061045d6123f5565b34801561083f57600080fd5b506104466004803603602081101561085657600080fd5b50356001600160a01b03166123fb565b34801561087257600080fd5b5061045d6004803603602081101561088957600080fd5b5035612493565b34801561089c57600080fd5b50610446600480360360208110156108b357600080fd5b50356001600160a01b03166124b4565b3480156108cf57600080fd5b5061044660048036036101008110156108e757600080fd5b81019060208101813564010000000081111561090257600080fd5b82018360208201111561091457600080fd5b8035906020019184600183028401116401000000008311171561093657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561098957600080fd5b82018360208201111561099b57600080fd5b803590602001918460018302840111640100000000831117156109bd57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a001356001600160a01b031661254c565b348015610a3057600080fd5b50610a4e60048036036020811015610a4757600080fd5b50356126fc565b6040805160ff9092168252519081900360200190f35b348015610a7057600080fd5b5061044660048036036040811015610a8757600080fd5b506001600160a01b038135169060200135612711565b348015610aa957600080fd5b5061045d61271b565b348015610abe57600080fd5b50610ae560048036036020811015610ad557600080fd5b50356001600160a01b0316612721565b604080519115158252519081900360200190f35b348015610b0557600080fd5b5061045d61273f565b6000808211610b64576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610b6d57fe5b0490505b92915050565b600082610b8657506000610b71565b82820282848281610b9357fe5b0414610bd05760405162461bcd60e51b81526004018080602001828103825260218152602001806140e06021913960400191505060405180910390fd5b9392505050565b600454811015610c2e576040805162461bcd60e51b815260206004820152601360248201527f54494d454652414d455f544f4f5f53484f525400000000000000000000000000604482015290519081900360640190fd5b60055415801590610c4157506005548111155b80610c4c5750600554155b610c9d576040805162461bcd60e51b815260206004820152601260248201527f54494d454652414d455f544f4f5f4c4f4e470000000000000000000000000000604482015290519081900360640190fd5b6000610cc082610cba600454600354610b7790919063ffffffff16565b90610b0e565b9050803411610d16576040805162461bcd60e51b815260206004820152601060248201527f494e53554646494349454e545f45544800000000000000000000000000000000604482015290519081900360640190fd5b6000610d20612745565b905080610d74576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b601554604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b158015610de757600080fd5b505af1158015610dfb573d6000803e3d6000fd5b50505050610e0a8160016127d2565b6000610e1642856128c4565b6000838152600e60209081526040808320849055601082528083208790556011909152902060019055600d54909150610e4f90846128c4565b600d55601654604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015610eb857600080fd5b505af1158015610ecc573d6000803e3d6000fd5b505050506040513d6020811015610ee257600080fd5b5050601654604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810186905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015610f5157600080fd5b505af1158015610f65573d6000803e3d6000fd5b505050506040513d6020811015610f7b57600080fd5b505060408051338152306020820152808201849052606081018690526001608082015260a0810185905290517f7772d56f71cb2b982c42f148cad4839ce0736b201b032c93233f428ba93817749181900360c00190a18234111561107f57600033610fe6348661291e565b604051600081818185875af1925050503d8060008114611022576040519150601f19603f3d011682016040523d82523d6000602084013e611027565b606091505b505090508061107d576040805162461bcd60e51b815260206004820152600d60248201527f524546554e445f4641494c454400000000000000000000000000000000000000604482015290519081900360640190fd5b505b50505050565b60028054604080516020601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600187161502019094168590049384018190048102820181019092528281526060939092909183018282801561112c5780601f106111015761010080835404028352916020019161112c565b820191906000526020600020905b81548152906001019060200180831161110f57829003601f168201915b5050505050905090565b6016546001600160a01b03163314611195576040805162461bcd60e51b815260206004820152601460248201527f554e415554484f52495a45445f4e415547485459000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0383166111f0576040805162461bcd60e51b815260206004820152600b60248201527f4c4f4c5f4d494e545f4e4f000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821661124b576040805162461bcd60e51b815260206004820152601360248201527f4e4f545f55525f4d4f4e45595f325f4255524e00000000000000000000000000604482015290519081900360640190fd5b8061129d576040805162461bcd60e51b815260206004820152601e60248201527f43414e4e4f545f53454e445f5a45524f5f5448494e47535f47454e4955530000604482015290519081900360640190fd5b6001600160a01b0383166112e7576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156112e1573d6000803e3d6000fd5b50611368565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561133e57600080fd5b505af1158015611352573d6000803e3d6000fd5b505050506040513d602081101561107d57600080fd5b505050565b60045490565b60055490565b60009081526010602052604090205490565b6015546001600160a01b03166113e8576040805162461bcd60e51b815260206004820152600d60248201527f4e4f5f4d554c5449544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382161580159061140857506001600160a01b03811615155b611459576040805162461bcd60e51b815260206004820152601060248201527f5a45524f5f44455354494e4154494f4e00000000000000000000000000000000604482015290519081900360640190fd5b600b54156114ae576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f4d494e544544000000000000000000000000000000000000604482015290519081900360640190fd5b60006114b861297b565b601554604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526024820185905260016044830152915193945091169163156e29f69160648082019260009290919082900301818387803b15801561152f57600080fd5b505af1158015611543573d6000803e3d6000fd5b505050506115528160026127d2565b61155a61297b565b601554604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526024820185905260016044830152915193945091169163156e29f69160648082019260009290919082900301818387803b1580156115d157600080fd5b505af11580156115e5573d6000803e3d6000fd5b505050506113688160026127d2565b6115fe82826129d8565b5050565b6001600160a01b03811660009081526014602052604090205460ff1661169e576013805460018082019092557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091556000908152601460205260409020805460ff191690911790555b50565b60135490565b600d5490565b6000601382815481106116bc57fe5b6000918252602090912001546001600160a01b031692915050565b611368838383612f5b565b61169e81610bd7565b601554604080517efdd58e0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b039092169162fdd58e91604480820192602092909190829003018186803b15801561175457600080fd5b505afa158015611768573d6000803e3d6000fd5b505050506040513d602081101561177e57600080fd5b50516001146117d4576040805162461bcd60e51b815260206004820152600f60248201527f4e4f545f434c41494d5f4f574e45520000000000000000000000000000000000604482015290519081900360640190fd5b6000818152600e602090815260408083205460109092529091205481158015906117fe5750600081115b61184f576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f434c41494d00000000000000000000000000000000000000604482015290519081900360640190fd5b6000838152600f602090815260408083205460129092528083205460155482517ff5298aca000000000000000000000000000000000000000000000000000000008152336004820152602481018990526001604482015292516001600160a01b039485169592944289109492169263f5298aca926064808201939182900301818387803b1580156118df57600080fd5b505af11580156118f3573d6000803e3d6000fd5b505050506001600160a01b03831615611c0857600060018215151415611a6157601754604080517feee1ad8000000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b03169163eee1ad80916024808301926020929190829003018186803b15801561197757600080fd5b505afa15801561198b573d6000803e3d6000fd5b505050506040513d60208110156119a157600080fd5b5051601754604080517feee1ad800000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529151939450600093919092169163eee1ad80916024808301926020929190829003018186803b158015611a0f57600080fd5b505afa158015611a23573d6000803e3d6000fd5b505050506040513d6020811015611a3957600080fd5b50519050600082821415611a4d5782611a4f565b815b9050611a5b8682610b0e565b93505050505b601754604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039283166024820152604481018490529051918616916323b872dd916064808201926020929091908290030181600087803b158015611ad657600080fd5b505af1158015611aea573d6000803e3d6000fd5b505050506040513d6020811015611b0057600080fd5b50506001600160a01b0384166323b872dd3033611b1d878661291e565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015611b7357600080fd5b505af1158015611b87573d6000803e3d6000fd5b505050506040513d6020811015611b9d57600080fd5b5050604080513381523060208201528082018990526001600160a01b03861660608201526080810187905260a0810185905260c0810183905290517fe0433fa1170f3ff4cf72fbeb1ae5f139a41b9457ab29e5ac480cb34ed271912a9181900360e00190a150611d79565b600060018215151415611cb857601754604080517feee1ad80000000000000000000000000000000000000000000000000000000008152600060048201819052915191926001600160a01b03169163eee1ad8091602480820192602092909190829003018186803b158015611c7c57600080fd5b505afa158015611c90573d6000803e3d6000fd5b505050506040513d6020811015611ca657600080fd5b50519050611cb48682610b0e565b9150505b6017546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611cf2573d6000803e3d6000fd5b50336108fc611d01878461291e565b6040518115909202916000818181858888f19350505050158015611d29573d6000803e3d6000fd5b5060408051338152306020820152808201899052606081018790526080810183905290517f414b0454a52507c753948f2002246a3358eaea8464b41c2143f88b100306eee69181900360a00190a1505b600d54611d86908561291e565b600d5580611d9857505050505061169e565b6000306001600160a01b031663b788e4e96040518163ffffffff1660e01b815260040160206040518083038186803b158015611dd357600080fd5b505afa158015611de7573d6000803e3d6000fd5b505050506040513d6020811015611dfd57600080fd5b50516015546000898152601160205260408082205481517f156e29f600000000000000000000000000000000000000000000000000000000815233600482015260248101869052604481019190915290519394506001600160a01b039092169263156e29f692606480820193929182900301818387803b158015611e8057600080fd5b505af1158015611e94573d6000803e3d6000fd5b50505050611ea38160026127d2565b601654604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015611f0957600080fd5b505af1158015611f1d573d6000803e3d6000fd5b505050506040513d6020811015611f3357600080fd5b5050601654604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015611fa257600080fd5b505af1158015611fb6573d6000803e3d6000fd5b505050506040513d6020811015611fcc57600080fd5b505060008781526011602090815260409182902054825133815230928101929092528183018a905260608201849052608082015290517fa684ef88136a415ed987c0b39bc528a16b3e83b511c414590bbe613f38f1a0729181900360a00190a150505050505050565b60009081526009602052604090205490565b60009081526011602052604090205490565b6000612063612745565b905090565b6001600160a01b03811660009081526014602052604090205460ff161561169e5760005b6013548110156115fe57816001600160a01b0316601382815481106120ad57fe5b6000918252602090912001546001600160a01b031614156121e457601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106120f857fe5b600091825260209091200154601380546001600160a01b03909216918390811061211e57fe5b600091825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061218f57fe5b6000918252602080832090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556001600160a01b03841682526014905260409020805460ff191690555061169e565b60010161208c565b6017546001600160a01b03161561224a576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b601780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60009081526012602052604090205490565b60018054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100878916150201909516949094049384018190048102820181019092528281526060939092909183018282801561112c5780601f106111015761010080835404028352916020019161112c565b600c5490565b6000908152600e602052604090205490565b600061206361297b565b60065490565b6016546001600160a01b03161561239a576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b601680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000908152600f60205260409020546001600160a01b031690565b600b5490565b60075490565b6015546001600160a01b031615612459576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b601580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000600a82815481106124a257fe5b90600052602060002001549050919050565b6018546001600160a01b031615612512576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b601880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600054610100900460ff1680612565575061256561375f565b80612573575060005460ff16155b6125ae5760405162461bcd60e51b815260040180806020018281038252602e8152602001806140b2602e913960400191505060405180910390fd5b600054610100900460ff161580156125f6576000805460ff197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b88516126099060019060208c019061401e565b50875161261d9060029060208b019061401e565b50600387905560048690556005859055600684905560078390556001600160a01b038216156126c2576013805460018082019092557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0385169081179091556000908152601460205260409020805460ff191690911790555b80156126f157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050505050505050565b60009081526008602052604090205460ff1690565b6115fe8282613770565b600a5490565b6001600160a01b031660009081526014602052604090205460ff1690565b60035490565b600060075460001415801561275e5750600754600c5411155b806127695750600754155b612774576000612063565b50600c54604080517f636c61696d0000000000000000000000000000000000000000000000000000006020808301919091523060601b6025830152603980830194909452825180830390940184526059909101909152815191012090565b8060ff16600114806127e757508060ff166002145b612838576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b600a805460018082019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018390556000838152600860205260409020805460ff191660ff84169081179091551461289957612894613fb7565b6128a1565b6128a1613fd0565b600083815260096020526040902055600260ff821614156115fe576115fe613fe9565b600082820183811015610bd0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115612975576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600b54604080517f67656d00000000000000000000000000000000000000000000000000000000006020808301919091523060601b6023830152603780830194909452825180830390940184526057909101909152815191012090565b600454821015612a2f576040805162461bcd60e51b815260206004820152601360248201527f54494d454652414d455f544f4f5f53484f525400000000000000000000000000604482015290519081900360640190fd5b34612a81576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f42414c414e43450000000000000000000000000000000000000000604482015290519081900360640190fd5b80612ad3576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b60055415801590612ae657506005548211155b80612af15750600554155b612b42576040805162461bcd60e51b815260206004820152601260248201527f54494d454652414d455f544f4f5f4c4f4e470000000000000000000000000000604482015290519081900360640190fd5b6000612b4e3483610b0e565b90506000612b6d84610cba600454600354610b7790919063ffffffff16565b905080821015612bc4576040805162461bcd60e51b815260206004820152601060248201527f494e53554646494349454e545f45544800000000000000000000000000000000604482015290519081900360640190fd5b6000612bce612745565b905080612c22576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b601554604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b158015612c9557600080fd5b505af1158015612ca9573d6000803e3d6000fd5b50505050612cb88160016127d2565b6000612cc442876128c4565b6000838152600e602052604090208190559050612ce18386610b77565b6000838152601060209081526040808320939093556011815282822088905560165483517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015293516001600160a01b039091169363634b5b7d9360248083019493928390030190829087803b158015612d6057600080fd5b505af1158015612d74573d6000803e3d6000fd5b505050506040513d6020811015612d8a57600080fd5b5050601654604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810186905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015612df957600080fd5b505af1158015612e0d573d6000803e3d6000fd5b505050506040513d6020811015612e2357600080fd5b505060408051338152306020820152808201849052606081018890526080810187905260a0810185905290517f7772d56f71cb2b982c42f148cad4839ce0736b201b032c93233f428ba93817749181900360c00190a1612e8f612e868487610b77565b600d54906128c4565b600d55612e9c8386610b77565b341115612f5357600033612eba612eb38689610b77565b349061291e565b604051600081818185875af1925050503d8060008114612ef6576040519150601f19603f3d011682016040523d82523d6000602084013e612efb565b606091505b5050905080612f51576040805162461bcd60e51b815260206004820152600d60248201527f524546554e445f4641494c454400000000000000000000000000000000000000604482015290519081900360640190fd5b505b505050505050565b6001600160a01b038316612fb6576040805162461bcd60e51b815260206004820152601360248201527f494e56414c49445f45524332305f544f4b454e00000000000000000000000000604482015290519081900360640190fd5b60135415801590612fdf57506001600160a01b03831660009081526014602052604090205460ff165b80612fea5750601354155b61303b576040805162461bcd60e51b815260206004820152601060248201527f544f4b454e5f444953414c4c4f57454400000000000000000000000000000000604482015290519081900360640190fd5b8061308d576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b601854604080517f1246dbf50000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015291519190921691631246dbf5916024808301926020929190829003018186803b1580156130f357600080fd5b505afa158015613107573d6000803e3d6000fd5b505050506040513d602081101561311d57600080fd5b50511515600114613175576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5f554e49535741505f504f4f4c0000000000000000000000000000000000604482015290519081900360640190fd5b601854600090819081906001600160a01b031663868d2d1e876131988888610b0e565b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060606040518083038186803b1580156131dc57600080fd5b505afa1580156131f0573d6000803e3d6000fd5b505050506040513d606081101561320657600080fd5b5080516020820151604090920151909450909250905061322b846102df856064610b77565b81101561327f576040805162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4554485f4c4951554944495459000000000000604482015290519081900360640190fd5b61328e846102df876064610b77565b8210156132e2576040805162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f544f4b454e5f4c495155494449545900000000604482015290519081900360640190fd5b600354831115613339576040805162461bcd60e51b815260206004820152600b60248201527f4f5645525041594d454e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061335684610cba600454600354610b7790919063ffffffff16565b90506004548110156133af576040805162461bcd60e51b815260206004820152601160248201527f494e53554646494349454e545f54494d45000000000000000000000000000000604482015290519081900360640190fd5b60006133b9612745565b90508061340d576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b601554604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b15801561348057600080fd5b505af1158015613494573d6000803e3d6000fd5b505050506134a38160016127d2565b60006134af42846128c4565b6000838152600e60209081526040808320849055601082528083208a9055600f825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038f16179055601282528083208c905560119091529020889055600d5490915061352990876128c4565b600d55601654604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b15801561359257600080fd5b505af11580156135a6573d6000803e3d6000fd5b505050506040513d60208110156135bc57600080fd5b5050601654604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810189905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b15801561362b57600080fd5b505af115801561363f573d6000803e3d6000fd5b505050506040513d602081101561365557600080fd5b505060408051338152306020820152808201849052606081018590526001600160a01b038b16608082015260a0810189905260c0810188905290517fe583bcc9acfcc0488165ba03e5e6613c9cb6a8cc97fd72a3d28b402b0a1830fc9181900360e00190a1604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a905290516001600160a01b038b16916323b872dd9160648083019260209291908290030181600087803b15801561372857600080fd5b505af115801561373c573d6000803e3d6000fd5b505050506040513d602081101561375257600080fd5b5050505050505050505050565b600061376a30614018565b15905090565b6001600160a01b0382166137cb576040805162461bcd60e51b815260206004820152601360248201527f494e56414c49445f45524332305f544f4b454e00000000000000000000000000604482015290519081900360640190fd5b601354158015906137f457506001600160a01b03821660009081526014602052604090205460ff165b806137ff5750601354155b613850576040805162461bcd60e51b815260206004820152601060248201527f544f4b454e5f444953414c4c4f57454400000000000000000000000000000000604482015290519081900360640190fd5b601854604080517f1246dbf50000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291519190921691631246dbf5916024808301926020929190829003018186803b1580156138b657600080fd5b505afa1580156138ca573d6000803e3d6000fd5b505050506040513d60208110156138e057600080fd5b50511515600114613938576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5f554e49535741505f504f4f4c0000000000000000000000000000000000604482015290519081900360640190fd5b601854604080517f868d2d1e0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820185905291516000938493849391169163868d2d1e91604480820192606092909190829003018186803b1580156139ab57600080fd5b505afa1580156139bf573d6000803e3d6000fd5b505050506040513d60608110156139d557600080fd5b50805160208083015160409384015160175485517fb8c876b10000000000000000000000000000000000000000000000000000000081526001600160a01b038c811660048301529651959950929750909550600094169263b8c876b192602480840193919291829003018186803b158015613a4f57600080fd5b505afa158015613a63573d6000803e3d6000fd5b505050506040513d6020811015613a7957600080fd5b50519050613a878482610b77565b821015613adb576040805162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4554485f4c4951554944495459000000000000604482015290519081900360640190fd5b613ae58582610b77565b831015613b39576040805162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f544f4b454e5f4c495155494449545900000000604482015290519081900360640190fd5b600354841115613b90576040805162461bcd60e51b815260206004820152600b60248201527f4f5645525041594d454e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000613bad85610cba600454600354610b7790919063ffffffff16565b9050600454811015613c06576040805162461bcd60e51b815260206004820152601160248201527f494e53554646494349454e545f54494d45000000000000000000000000000000604482015290519081900360640190fd5b6000613c10612745565b905080613c64576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810189905290516001600160a01b038a16916323b872dd9160648083019260209291908290030181600087803b158015613cd257600080fd5b505af1158015613ce6573d6000803e3d6000fd5b505050506040513d6020811015613cfc57600080fd5b5050601554604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b158015613d7157600080fd5b505af1158015613d85573d6000803e3d6000fd5b50505050613d948160016127d2565b6000613da042846128c4565b6000838152600e60209081526040808320849055601082528083208b9055600f825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038f16179055601282528083208c90556011909152902060019055600d54909150613e1b90886128c4565b600d55601654604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015613e8457600080fd5b505af1158015613e98573d6000803e3d6000fd5b505050506040513d6020811015613eae57600080fd5b5050601654604080517fea40a7a4000000000000000000000000000000000000000000000000000000008152336004820152602481018a905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015613f1d57600080fd5b505af1158015613f31573d6000803e3d6000fd5b505050506040513d6020811015613f4757600080fd5b505060408051338152306020820152808201849052606081018590526001600160a01b038b166080820152600160a082015260c0810189905290517fe583bcc9acfcc0488165ba03e5e6613c9cb6a8cc97fd72a3d28b402b0a1830fc9181900360e00190a1505050505050505050565b600b54600090613fc88160016128c4565b600b55905090565b600c54600090613fe18160016128c4565b600c55905090565b6000614002600654600354610b0e90919063ffffffff16565b60035490915061401290826128c4565b60035550565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061405f57805160ff191683800117855561408c565b8280016001018555821561408c579182015b8281111561408c578251825591602001919060010190614071565b5061409892915061409c565b5090565b5b80821115614098576000815560010161409d56fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220eedd772a51d89859ca9670d33896e153cf715edbc346be9da32eb62c3e42d86764736f6c63430007030033436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a26469706673582212204b13c10e0097e75d66e684188bba648497a072cba5380cbf1972307066d731c464736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a7fc7a071161005b578063a7fc7a071461026b578063b429afeb146102a0578063e1c28bef146102e7578063e4aa923d146102ef57610088565b80631ff77f161461008d5780634ff8f07e146100d35780635e6fe72a1461023457806367275aed1461024e575b600080fd5b6100aa600480360360208110156100a357600080fd5b50356104a3565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100aa60048036036101008110156100ea57600080fd5b81019060208101813564010000000081111561010557600080fd5b82018360208201111561011757600080fd5b8035906020019184600183028401116401000000008311171561013957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561018c57600080fd5b82018360208201111561019e57600080fd5b803590602001918460018302840111640100000000831117156101c057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff166104da565b61023c610abb565b60408051918252519081900360200190f35b6100aa6004803603602081101561026457600080fd5b5035610ac1565b61029e6004803603602081101561028157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ae9565b005b6102d3600480360360208110156102b657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b95565b604080519115158252519081900360200190f35b61029e610bc0565b6100aa6004803603606081101561030557600080fd5b81019060208101813564010000000081111561032057600080fd5b82018360208201111561033257600080fd5b8035906020019184600183028401116401000000008311171561035457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156103a757600080fd5b8201836020820111156103b957600080fd5b803590602001918460018302840111640100000000831117156103db57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561042e57600080fd5b82018360208201111561044057600080fd5b8035906020019184600183028401116401000000008311171561046257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c28945050505050565b6000600382815481106104b257fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b3360009081526020819052604081205460ff161515600114806104fc57503033145b6105375760405162461bcd60e51b81526004018080602001828103825260288152602001806151b96028913960400191505060405180910390fd5b6000896040516020018082805190602001908083835b6020831061056c5780518252601f19909201916020918201910161054d565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790526040805192909401828103601f19018352845281519181019190912060008181526002909252929020549194505073ffffffffffffffffffffffffffffffffffffffff1615915061063e9050576040805162461bcd60e51b815260206004820152600e60248201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604482015290519081900360640190fd5b87610690576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f505249434500000000000000000000000000000000000000604482015290519081900360640190fd5b866106e2576040805162461bcd60e51b815260206004820152601060248201527f494e56414c49445f4d494e5f54494d4500000000000000000000000000000000604482015290519081900360640190fd5b84610734576040805162461bcd60e51b815260206004820152601760248201527f494e56414c49445f444946464943554c54595f53544550000000000000000000604482015290519081900360640190fd5b60606040518060200161074690611055565b601f1982820381018352601f90910116604052905061076760008383610f2f565b92508273ffffffffffffffffffffffffffffffffffffffff1663d9a3f9bb8c8c8c8c8c8c8c8c6040518963ffffffff1660e01b81526004018080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b838110156108175781810151838201526020016107ff565b50505050905090810190601f1680156108445780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b8381101561087757818101518382015260200161085f565b50505050905090810190601f1680156108a45780820380516001836020036101000a031916815260200191505b509a5050505050505050505050600060405180830381600087803b1580156108cb57600080fd5b505af11580156108df573d6000803e3d6000fd5b505050600083815260026020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8a8116918217909355600380546001810182559087527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805490921617905581519182018e9052606082018d9052608082018c905260a082018b905260c082018a9052881660e08201526101008082528f51908201528e517fd5dd03a462020e8d5d777d0957fbf19067fc095f932d026bb0f23e384522f2a694508f938f938f938f938f938f938f938f939092839283810192610120850192918e01918190849084905b83811015610a0b5781810151838201526020016109f3565b50505050905090810190601f168015610a385780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b83811015610a6b578181015183820152602001610a53565b50505050905090810190601f168015610a985780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a1505098975050505050505050565b60035490565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b3360009081526020819052604090205460ff16151560011480610b0b57503033145b610b465760405162461bcd60e51b81526004018080602001828103825260288152602001806151b96028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b3360009081526020819052604090205460ff16151560011480610be257503033145b610c1d5760405162461bcd60e51b81526004018080602001828103825260288152602001806151b96028913960400191505060405180910390fd5b336000908152602052565b3360009081526020819052604081205460ff16151560011480610c4a57503033145b610c855760405162461bcd60e51b81526004018080602001828103825260288152602001806151b96028913960400191505060405180910390fd5b6000836040516020018082805190602001908083835b60208310610cba5780518252601f199092019160209182019101610c9b565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790526040805192909401828103601f19018352845281519181019190912060008181526002909252929020549194505073ffffffffffffffffffffffffffffffffffffffff16159150610d8c9050576040805162461bcd60e51b815260206004820152600e60248201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604482015290519081900360640190fd5b610d9860008287610f2f565b6000828152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff86167fffffffffffffffffffffffff00000000000000000000000000000000000000009182168117909255600380546001810182559086527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180549091169091179055805181815288519181019190915287519395507f89087d44119cf78c7cc1dfb971ca45b6aa9fde12ab6feedacc1fb42c3487862c93889388938392838201926060850192880191908190849084905b83811015610e8b578181015183820152602001610e73565b50505050905090810190601f168015610eb85780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610eeb578181015183820152602001610ed3565b50505050905090810190601f168015610f185780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1509392505050565b60008084471015610f87576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b8251610fda576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff811661104d576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b949350505050565b614156806110638339019056fe608060405234801561001057600080fd5b50614136806100206000396000f3fe6080604052600436106102bf5760003560e01c806395d89b411161016e578063cf721b15116100cb578063e6c3b1f61161007f578063f4fde0d311610064578063f4fde0d314610a9d578063f9eaee0d14610ab2578063ff186b2e14610af957610374565b8063e6c3b1f614610a24578063edcf2d5714610a6457610374565b8063d31674db116100b0578063d31674db14610866578063d73cd47f14610890578063d9a3f9bb146108c357610374565b8063cf721b1514610809578063d104f8f51461083357610374565b8063c08fa1a411610122578063c5e01a5c11610107578063c5e01a5c146107df578063c80c061314610809578063cf5380b41461081e57610374565b8063c08fa1a414610743578063c42cf535146107ac57610374565b8063a901c47411610153578063a901c47414610758578063b788e4e914610782578063bf86999b1461079757610374565b806395d89b411461072e578063a0021cf11461074357610374565b80635e5f2e261161021c5780637f2e8f0c116101d057806390469a9d116101b557806390469a9d1461069e5780639277a185146106d1578063959355601461070457610374565b80637f2e8f0c1461065f5780638a09871b1461068957610374565b80636b6201da116102015780636b6201da146105ee5780637c5d643e1461060b5780637dcb0e5f1461063557610374565b80635e5f2e26146105695780636100c343146105af57610374565b80632449ef51116102735780634178617f116102585780634178617f1461050c5780634565e5ef1461053f578063504cdacf1461055457610374565b80632449ef51146104ae578063392732b1146104e957610374565b80631aa43078116102a45780631aa430781461044857806322e67e711461046f57806323b221a01461048457610374565b806306fdde03146103795780631501bf031461040357610374565b366103745760045460055460035434926000926102e5926102df91610b0e565b90610b77565b90508082101561033c576040805162461bcd60e51b815260206004820152601060248201527f494e53554646494349454e545f45544800000000000000000000000000000000604482015290519081900360640190fd5b6004546003548311610366576103636004546102df85600354610b0e90919063ffffffff16565b90505b61036f81610bd7565b505050005b600080fd5b34801561038557600080fd5b5061038e611085565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103c85781810151838201526020016103b0565b50505050905090810190601f1680156103f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040f57600080fd5b506104466004803603606081101561042657600080fd5b506001600160a01b03813581169160208101359091169060400135611136565b005b34801561045457600080fd5b5061045d61136d565b60408051918252519081900360200190f35b34801561047b57600080fd5b5061045d611373565b34801561049057600080fd5b5061045d600480360360208110156104a757600080fd5b5035611379565b3480156104ba57600080fd5b50610446600480360360408110156104d157600080fd5b506001600160a01b038135811691602001351661138b565b610446600480360360408110156104ff57600080fd5b50803590602001356115f4565b34801561051857600080fd5b506104466004803603602081101561052f57600080fd5b50356001600160a01b0316611602565b34801561054b57600080fd5b5061045d6116a1565b34801561056057600080fd5b5061045d6116a7565b34801561057557600080fd5b506105936004803603602081101561058c57600080fd5b50356116ad565b604080516001600160a01b039092168252519081900360200190f35b3480156105bb57600080fd5b50610446600480360360608110156105d257600080fd5b506001600160a01b0381351690602081013590604001356116d7565b6104466004803603602081101561060457600080fd5b50356116e2565b34801561061757600080fd5b506104466004803603602081101561062e57600080fd5b50356116eb565b34801561064157600080fd5b5061045d6004803603602081101561065857600080fd5b5035612035565b34801561066b57600080fd5b5061045d6004803603602081101561068257600080fd5b5035612047565b34801561069557600080fd5b5061045d612059565b3480156106aa57600080fd5b50610446600480360360208110156106c157600080fd5b50356001600160a01b0316612068565b3480156106dd57600080fd5b50610446600480360360208110156106f457600080fd5b50356001600160a01b03166121ec565b34801561071057600080fd5b5061045d6004803603602081101561072757600080fd5b5035612284565b34801561073a57600080fd5b5061038e612296565b34801561074f57600080fd5b5061045d612314565b34801561076457600080fd5b5061045d6004803603602081101561077b57600080fd5b503561231a565b34801561078e57600080fd5b5061045d61232c565b3480156107a357600080fd5b5061045d612336565b3480156107b857600080fd5b50610446600480360360208110156107cf57600080fd5b50356001600160a01b031661233c565b3480156107eb57600080fd5b506105936004803603602081101561080257600080fd5b50356123d4565b34801561081557600080fd5b5061045d6123ef565b34801561082a57600080fd5b5061045d6123f5565b34801561083f57600080fd5b506104466004803603602081101561085657600080fd5b50356001600160a01b03166123fb565b34801561087257600080fd5b5061045d6004803603602081101561088957600080fd5b5035612493565b34801561089c57600080fd5b50610446600480360360208110156108b357600080fd5b50356001600160a01b03166124b4565b3480156108cf57600080fd5b5061044660048036036101008110156108e757600080fd5b81019060208101813564010000000081111561090257600080fd5b82018360208201111561091457600080fd5b8035906020019184600183028401116401000000008311171561093657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561098957600080fd5b82018360208201111561099b57600080fd5b803590602001918460018302840111640100000000831117156109bd57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a001356001600160a01b031661254c565b348015610a3057600080fd5b50610a4e60048036036020811015610a4757600080fd5b50356126fc565b6040805160ff9092168252519081900360200190f35b348015610a7057600080fd5b5061044660048036036040811015610a8757600080fd5b506001600160a01b038135169060200135612711565b348015610aa957600080fd5b5061045d61271b565b348015610abe57600080fd5b50610ae560048036036020811015610ad557600080fd5b50356001600160a01b0316612721565b604080519115158252519081900360200190f35b348015610b0557600080fd5b5061045d61273f565b6000808211610b64576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610b6d57fe5b0490505b92915050565b600082610b8657506000610b71565b82820282848281610b9357fe5b0414610bd05760405162461bcd60e51b81526004018080602001828103825260218152602001806140e06021913960400191505060405180910390fd5b9392505050565b600454811015610c2e576040805162461bcd60e51b815260206004820152601360248201527f54494d454652414d455f544f4f5f53484f525400000000000000000000000000604482015290519081900360640190fd5b60055415801590610c4157506005548111155b80610c4c5750600554155b610c9d576040805162461bcd60e51b815260206004820152601260248201527f54494d454652414d455f544f4f5f4c4f4e470000000000000000000000000000604482015290519081900360640190fd5b6000610cc082610cba600454600354610b7790919063ffffffff16565b90610b0e565b9050803411610d16576040805162461bcd60e51b815260206004820152601060248201527f494e53554646494349454e545f45544800000000000000000000000000000000604482015290519081900360640190fd5b6000610d20612745565b905080610d74576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b601554604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b158015610de757600080fd5b505af1158015610dfb573d6000803e3d6000fd5b50505050610e0a8160016127d2565b6000610e1642856128c4565b6000838152600e60209081526040808320849055601082528083208790556011909152902060019055600d54909150610e4f90846128c4565b600d55601654604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015610eb857600080fd5b505af1158015610ecc573d6000803e3d6000fd5b505050506040513d6020811015610ee257600080fd5b5050601654604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810186905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015610f5157600080fd5b505af1158015610f65573d6000803e3d6000fd5b505050506040513d6020811015610f7b57600080fd5b505060408051338152306020820152808201849052606081018690526001608082015260a0810185905290517f7772d56f71cb2b982c42f148cad4839ce0736b201b032c93233f428ba93817749181900360c00190a18234111561107f57600033610fe6348661291e565b604051600081818185875af1925050503d8060008114611022576040519150601f19603f3d011682016040523d82523d6000602084013e611027565b606091505b505090508061107d576040805162461bcd60e51b815260206004820152600d60248201527f524546554e445f4641494c454400000000000000000000000000000000000000604482015290519081900360640190fd5b505b50505050565b60028054604080516020601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600187161502019094168590049384018190048102820181019092528281526060939092909183018282801561112c5780601f106111015761010080835404028352916020019161112c565b820191906000526020600020905b81548152906001019060200180831161110f57829003601f168201915b5050505050905090565b6016546001600160a01b03163314611195576040805162461bcd60e51b815260206004820152601460248201527f554e415554484f52495a45445f4e415547485459000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0383166111f0576040805162461bcd60e51b815260206004820152600b60248201527f4c4f4c5f4d494e545f4e4f000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821661124b576040805162461bcd60e51b815260206004820152601360248201527f4e4f545f55525f4d4f4e45595f325f4255524e00000000000000000000000000604482015290519081900360640190fd5b8061129d576040805162461bcd60e51b815260206004820152601e60248201527f43414e4e4f545f53454e445f5a45524f5f5448494e47535f47454e4955530000604482015290519081900360640190fd5b6001600160a01b0383166112e7576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156112e1573d6000803e3d6000fd5b50611368565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561133e57600080fd5b505af1158015611352573d6000803e3d6000fd5b505050506040513d602081101561107d57600080fd5b505050565b60045490565b60055490565b60009081526010602052604090205490565b6015546001600160a01b03166113e8576040805162461bcd60e51b815260206004820152600d60248201527f4e4f5f4d554c5449544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382161580159061140857506001600160a01b03811615155b611459576040805162461bcd60e51b815260206004820152601060248201527f5a45524f5f44455354494e4154494f4e00000000000000000000000000000000604482015290519081900360640190fd5b600b54156114ae576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f4d494e544544000000000000000000000000000000000000604482015290519081900360640190fd5b60006114b861297b565b601554604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526024820185905260016044830152915193945091169163156e29f69160648082019260009290919082900301818387803b15801561152f57600080fd5b505af1158015611543573d6000803e3d6000fd5b505050506115528160026127d2565b61155a61297b565b601554604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526024820185905260016044830152915193945091169163156e29f69160648082019260009290919082900301818387803b1580156115d157600080fd5b505af11580156115e5573d6000803e3d6000fd5b505050506113688160026127d2565b6115fe82826129d8565b5050565b6001600160a01b03811660009081526014602052604090205460ff1661169e576013805460018082019092557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091556000908152601460205260409020805460ff191690911790555b50565b60135490565b600d5490565b6000601382815481106116bc57fe5b6000918252602090912001546001600160a01b031692915050565b611368838383612f5b565b61169e81610bd7565b601554604080517efdd58e0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b039092169162fdd58e91604480820192602092909190829003018186803b15801561175457600080fd5b505afa158015611768573d6000803e3d6000fd5b505050506040513d602081101561177e57600080fd5b50516001146117d4576040805162461bcd60e51b815260206004820152600f60248201527f4e4f545f434c41494d5f4f574e45520000000000000000000000000000000000604482015290519081900360640190fd5b6000818152600e602090815260408083205460109092529091205481158015906117fe5750600081115b61184f576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f434c41494d00000000000000000000000000000000000000604482015290519081900360640190fd5b6000838152600f602090815260408083205460129092528083205460155482517ff5298aca000000000000000000000000000000000000000000000000000000008152336004820152602481018990526001604482015292516001600160a01b039485169592944289109492169263f5298aca926064808201939182900301818387803b1580156118df57600080fd5b505af11580156118f3573d6000803e3d6000fd5b505050506001600160a01b03831615611c0857600060018215151415611a6157601754604080517feee1ad8000000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b03169163eee1ad80916024808301926020929190829003018186803b15801561197757600080fd5b505afa15801561198b573d6000803e3d6000fd5b505050506040513d60208110156119a157600080fd5b5051601754604080517feee1ad800000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529151939450600093919092169163eee1ad80916024808301926020929190829003018186803b158015611a0f57600080fd5b505afa158015611a23573d6000803e3d6000fd5b505050506040513d6020811015611a3957600080fd5b50519050600082821415611a4d5782611a4f565b815b9050611a5b8682610b0e565b93505050505b601754604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039283166024820152604481018490529051918616916323b872dd916064808201926020929091908290030181600087803b158015611ad657600080fd5b505af1158015611aea573d6000803e3d6000fd5b505050506040513d6020811015611b0057600080fd5b50506001600160a01b0384166323b872dd3033611b1d878661291e565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015611b7357600080fd5b505af1158015611b87573d6000803e3d6000fd5b505050506040513d6020811015611b9d57600080fd5b5050604080513381523060208201528082018990526001600160a01b03861660608201526080810187905260a0810185905260c0810183905290517fe0433fa1170f3ff4cf72fbeb1ae5f139a41b9457ab29e5ac480cb34ed271912a9181900360e00190a150611d79565b600060018215151415611cb857601754604080517feee1ad80000000000000000000000000000000000000000000000000000000008152600060048201819052915191926001600160a01b03169163eee1ad8091602480820192602092909190829003018186803b158015611c7c57600080fd5b505afa158015611c90573d6000803e3d6000fd5b505050506040513d6020811015611ca657600080fd5b50519050611cb48682610b0e565b9150505b6017546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611cf2573d6000803e3d6000fd5b50336108fc611d01878461291e565b6040518115909202916000818181858888f19350505050158015611d29573d6000803e3d6000fd5b5060408051338152306020820152808201899052606081018790526080810183905290517f414b0454a52507c753948f2002246a3358eaea8464b41c2143f88b100306eee69181900360a00190a1505b600d54611d86908561291e565b600d5580611d9857505050505061169e565b6000306001600160a01b031663b788e4e96040518163ffffffff1660e01b815260040160206040518083038186803b158015611dd357600080fd5b505afa158015611de7573d6000803e3d6000fd5b505050506040513d6020811015611dfd57600080fd5b50516015546000898152601160205260408082205481517f156e29f600000000000000000000000000000000000000000000000000000000815233600482015260248101869052604481019190915290519394506001600160a01b039092169263156e29f692606480820193929182900301818387803b158015611e8057600080fd5b505af1158015611e94573d6000803e3d6000fd5b50505050611ea38160026127d2565b601654604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015611f0957600080fd5b505af1158015611f1d573d6000803e3d6000fd5b505050506040513d6020811015611f3357600080fd5b5050601654604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015611fa257600080fd5b505af1158015611fb6573d6000803e3d6000fd5b505050506040513d6020811015611fcc57600080fd5b505060008781526011602090815260409182902054825133815230928101929092528183018a905260608201849052608082015290517fa684ef88136a415ed987c0b39bc528a16b3e83b511c414590bbe613f38f1a0729181900360a00190a150505050505050565b60009081526009602052604090205490565b60009081526011602052604090205490565b6000612063612745565b905090565b6001600160a01b03811660009081526014602052604090205460ff161561169e5760005b6013548110156115fe57816001600160a01b0316601382815481106120ad57fe5b6000918252602090912001546001600160a01b031614156121e457601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106120f857fe5b600091825260209091200154601380546001600160a01b03909216918390811061211e57fe5b600091825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061218f57fe5b6000918252602080832090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556001600160a01b03841682526014905260409020805460ff191690555061169e565b60010161208c565b6017546001600160a01b03161561224a576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b601780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60009081526012602052604090205490565b60018054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100878916150201909516949094049384018190048102820181019092528281526060939092909183018282801561112c5780601f106111015761010080835404028352916020019161112c565b600c5490565b6000908152600e602052604090205490565b600061206361297b565b60065490565b6016546001600160a01b03161561239a576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b601680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000908152600f60205260409020546001600160a01b031690565b600b5490565b60075490565b6015546001600160a01b031615612459576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b601580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000600a82815481106124a257fe5b90600052602060002001549050919050565b6018546001600160a01b031615612512576040805162461bcd60e51b815260206004820152600960248201527f494d4d555441424c450000000000000000000000000000000000000000000000604482015290519081900360640190fd5b601880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600054610100900460ff1680612565575061256561375f565b80612573575060005460ff16155b6125ae5760405162461bcd60e51b815260040180806020018281038252602e8152602001806140b2602e913960400191505060405180910390fd5b600054610100900460ff161580156125f6576000805460ff197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b88516126099060019060208c019061401e565b50875161261d9060029060208b019061401e565b50600387905560048690556005859055600684905560078390556001600160a01b038216156126c2576013805460018082019092557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0385169081179091556000908152601460205260409020805460ff191690911790555b80156126f157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050505050505050565b60009081526008602052604090205460ff1690565b6115fe8282613770565b600a5490565b6001600160a01b031660009081526014602052604090205460ff1690565b60035490565b600060075460001415801561275e5750600754600c5411155b806127695750600754155b612774576000612063565b50600c54604080517f636c61696d0000000000000000000000000000000000000000000000000000006020808301919091523060601b6025830152603980830194909452825180830390940184526059909101909152815191012090565b8060ff16600114806127e757508060ff166002145b612838576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b600a805460018082019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018390556000838152600860205260409020805460ff191660ff84169081179091551461289957612894613fb7565b6128a1565b6128a1613fd0565b600083815260096020526040902055600260ff821614156115fe576115fe613fe9565b600082820183811015610bd0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115612975576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600b54604080517f67656d00000000000000000000000000000000000000000000000000000000006020808301919091523060601b6023830152603780830194909452825180830390940184526057909101909152815191012090565b600454821015612a2f576040805162461bcd60e51b815260206004820152601360248201527f54494d454652414d455f544f4f5f53484f525400000000000000000000000000604482015290519081900360640190fd5b34612a81576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f42414c414e43450000000000000000000000000000000000000000604482015290519081900360640190fd5b80612ad3576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b60055415801590612ae657506005548211155b80612af15750600554155b612b42576040805162461bcd60e51b815260206004820152601260248201527f54494d454652414d455f544f4f5f4c4f4e470000000000000000000000000000604482015290519081900360640190fd5b6000612b4e3483610b0e565b90506000612b6d84610cba600454600354610b7790919063ffffffff16565b905080821015612bc4576040805162461bcd60e51b815260206004820152601060248201527f494e53554646494349454e545f45544800000000000000000000000000000000604482015290519081900360640190fd5b6000612bce612745565b905080612c22576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b601554604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b158015612c9557600080fd5b505af1158015612ca9573d6000803e3d6000fd5b50505050612cb88160016127d2565b6000612cc442876128c4565b6000838152600e602052604090208190559050612ce18386610b77565b6000838152601060209081526040808320939093556011815282822088905560165483517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015293516001600160a01b039091169363634b5b7d9360248083019493928390030190829087803b158015612d6057600080fd5b505af1158015612d74573d6000803e3d6000fd5b505050506040513d6020811015612d8a57600080fd5b5050601654604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810186905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015612df957600080fd5b505af1158015612e0d573d6000803e3d6000fd5b505050506040513d6020811015612e2357600080fd5b505060408051338152306020820152808201849052606081018890526080810187905260a0810185905290517f7772d56f71cb2b982c42f148cad4839ce0736b201b032c93233f428ba93817749181900360c00190a1612e8f612e868487610b77565b600d54906128c4565b600d55612e9c8386610b77565b341115612f5357600033612eba612eb38689610b77565b349061291e565b604051600081818185875af1925050503d8060008114612ef6576040519150601f19603f3d011682016040523d82523d6000602084013e612efb565b606091505b5050905080612f51576040805162461bcd60e51b815260206004820152600d60248201527f524546554e445f4641494c454400000000000000000000000000000000000000604482015290519081900360640190fd5b505b505050505050565b6001600160a01b038316612fb6576040805162461bcd60e51b815260206004820152601360248201527f494e56414c49445f45524332305f544f4b454e00000000000000000000000000604482015290519081900360640190fd5b60135415801590612fdf57506001600160a01b03831660009081526014602052604090205460ff165b80612fea5750601354155b61303b576040805162461bcd60e51b815260206004820152601060248201527f544f4b454e5f444953414c4c4f57454400000000000000000000000000000000604482015290519081900360640190fd5b8061308d576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b601854604080517f1246dbf50000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015291519190921691631246dbf5916024808301926020929190829003018186803b1580156130f357600080fd5b505afa158015613107573d6000803e3d6000fd5b505050506040513d602081101561311d57600080fd5b50511515600114613175576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5f554e49535741505f504f4f4c0000000000000000000000000000000000604482015290519081900360640190fd5b601854600090819081906001600160a01b031663868d2d1e876131988888610b0e565b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060606040518083038186803b1580156131dc57600080fd5b505afa1580156131f0573d6000803e3d6000fd5b505050506040513d606081101561320657600080fd5b5080516020820151604090920151909450909250905061322b846102df856064610b77565b81101561327f576040805162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4554485f4c4951554944495459000000000000604482015290519081900360640190fd5b61328e846102df876064610b77565b8210156132e2576040805162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f544f4b454e5f4c495155494449545900000000604482015290519081900360640190fd5b600354831115613339576040805162461bcd60e51b815260206004820152600b60248201527f4f5645525041594d454e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061335684610cba600454600354610b7790919063ffffffff16565b90506004548110156133af576040805162461bcd60e51b815260206004820152601160248201527f494e53554646494349454e545f54494d45000000000000000000000000000000604482015290519081900360640190fd5b60006133b9612745565b90508061340d576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b601554604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b15801561348057600080fd5b505af1158015613494573d6000803e3d6000fd5b505050506134a38160016127d2565b60006134af42846128c4565b6000838152600e60209081526040808320849055601082528083208a9055600f825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038f16179055601282528083208c905560119091529020889055600d5490915061352990876128c4565b600d55601654604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b15801561359257600080fd5b505af11580156135a6573d6000803e3d6000fd5b505050506040513d60208110156135bc57600080fd5b5050601654604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810189905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b15801561362b57600080fd5b505af115801561363f573d6000803e3d6000fd5b505050506040513d602081101561365557600080fd5b505060408051338152306020820152808201849052606081018590526001600160a01b038b16608082015260a0810189905260c0810188905290517fe583bcc9acfcc0488165ba03e5e6613c9cb6a8cc97fd72a3d28b402b0a1830fc9181900360e00190a1604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a905290516001600160a01b038b16916323b872dd9160648083019260209291908290030181600087803b15801561372857600080fd5b505af115801561373c573d6000803e3d6000fd5b505050506040513d602081101561375257600080fd5b5050505050505050505050565b600061376a30614018565b15905090565b6001600160a01b0382166137cb576040805162461bcd60e51b815260206004820152601360248201527f494e56414c49445f45524332305f544f4b454e00000000000000000000000000604482015290519081900360640190fd5b601354158015906137f457506001600160a01b03821660009081526014602052604090205460ff165b806137ff5750601354155b613850576040805162461bcd60e51b815260206004820152601060248201527f544f4b454e5f444953414c4c4f57454400000000000000000000000000000000604482015290519081900360640190fd5b601854604080517f1246dbf50000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291519190921691631246dbf5916024808301926020929190829003018186803b1580156138b657600080fd5b505afa1580156138ca573d6000803e3d6000fd5b505050506040513d60208110156138e057600080fd5b50511515600114613938576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5f554e49535741505f504f4f4c0000000000000000000000000000000000604482015290519081900360640190fd5b601854604080517f868d2d1e0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820185905291516000938493849391169163868d2d1e91604480820192606092909190829003018186803b1580156139ab57600080fd5b505afa1580156139bf573d6000803e3d6000fd5b505050506040513d60608110156139d557600080fd5b50805160208083015160409384015160175485517fb8c876b10000000000000000000000000000000000000000000000000000000081526001600160a01b038c811660048301529651959950929750909550600094169263b8c876b192602480840193919291829003018186803b158015613a4f57600080fd5b505afa158015613a63573d6000803e3d6000fd5b505050506040513d6020811015613a7957600080fd5b50519050613a878482610b77565b821015613adb576040805162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4554485f4c4951554944495459000000000000604482015290519081900360640190fd5b613ae58582610b77565b831015613b39576040805162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f544f4b454e5f4c495155494449545900000000604482015290519081900360640190fd5b600354841115613b90576040805162461bcd60e51b815260206004820152600b60248201527f4f5645525041594d454e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000613bad85610cba600454600354610b7790919063ffffffff16565b9050600454811015613c06576040805162461bcd60e51b815260206004820152601160248201527f494e53554646494349454e545f54494d45000000000000000000000000000000604482015290519081900360640190fd5b6000613c10612745565b905080613c64576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810189905290516001600160a01b038a16916323b872dd9160648083019260209291908290030181600087803b158015613cd257600080fd5b505af1158015613ce6573d6000803e3d6000fd5b505050506040513d6020811015613cfc57600080fd5b5050601554604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b158015613d7157600080fd5b505af1158015613d85573d6000803e3d6000fd5b50505050613d948160016127d2565b6000613da042846128c4565b6000838152600e60209081526040808320849055601082528083208b9055600f825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038f16179055601282528083208c90556011909152902060019055600d54909150613e1b90886128c4565b600d55601654604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015613e8457600080fd5b505af1158015613e98573d6000803e3d6000fd5b505050506040513d6020811015613eae57600080fd5b5050601654604080517fea40a7a4000000000000000000000000000000000000000000000000000000008152336004820152602481018a905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015613f1d57600080fd5b505af1158015613f31573d6000803e3d6000fd5b505050506040513d6020811015613f4757600080fd5b505060408051338152306020820152808201849052606081018590526001600160a01b038b166080820152600160a082015260c0810189905290517fe583bcc9acfcc0488165ba03e5e6613c9cb6a8cc97fd72a3d28b402b0a1830fc9181900360e00190a1505050505050505050565b600b54600090613fc88160016128c4565b600b55905090565b600c54600090613fe18160016128c4565b600c55905090565b6000614002600654600354610b0e90919063ffffffff16565b60035490915061401290826128c4565b60035550565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061405f57805160ff191683800117855561408c565b8280016001018555821561408c579182015b8281111561408c578251825591602001919060010190614071565b5061409892915061409c565b5090565b5b80821115614098576000815560010161409d56fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220eedd772a51d89859ca9670d33896e153cf715edbc346be9da32eb62c3e42d86764736f6c63430007030033436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a26469706673582212204b13c10e0097e75d66e684188bba648497a072cba5380cbf1972307066d731c464736f6c63430007030033",
  "libraries": {
    "GovernanceLib": "0xBc8357132DFdCd2c65DAc10445d3674c628390Dd",
    "Strings": "0x915c3fEFB85D1937d5fF555CEFaB4B738a834C60",
    "SafeMath": "0x034fC597bB6E1D3bCC37b2E29eFc7FF0b736503d",
    "ProposalsLib": "0x198E00c8f39bF3Fb753D4568c68505535107C11A",
    "Create2": "0x1D97c8E0996Fd004cE9DB020570FaE3114F50389"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "allNFTGemPools(uint256)": {
        "details": "get the quantized token for this"
      },
      "allNFTGemPoolsLength()": {
        "details": "number of quantized addresses"
      },
      "createCustomNFTGemPool(bytes,string,string)": {
        "details": "deploy a new erc20 token using create2"
      },
      "createNFTGemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "deploy a new erc20 token using create2"
      },
      "getNFTGemPool(uint256)": {
        "details": "get the quantized token for this"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Check if this address is a controller"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10169,
        "contract": "src/factories/NFTGemPoolFactory.sol:NFTGemPoolFactory",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10373,
        "contract": "src/factories/NFTGemPoolFactory.sol:NFTGemPoolFactory",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10377,
        "contract": "src/factories/NFTGemPoolFactory.sol:NFTGemPoolFactory",
        "label": "_getNFTGemPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10380,
        "contract": "src/factories/NFTGemPoolFactory.sol:NFTGemPoolFactory",
        "label": "_allNFTGemPools",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}