{
  "address": "0xcEDE781e6AA1b6d9Eafcc6390350237775a9EcD7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        }
      ],
      "name": "addressOfPropoal",
      "outputs": [
        {
          "internalType": "address",
          "name": "govAddress",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d0c7a2176f7f3f34f8ce6649dfd51adf498bbe467e6b648356480577cf243a1",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xcEDE781e6AA1b6d9Eafcc6390350237775a9EcD7",
    "transactionIndex": 127,
    "gasUsed": "862943",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x67221400bb536b6bdcbd58a228c35172f51f776550118aeb07141d9639a2eb67",
    "transactionHash": "0x9d0c7a2176f7f3f34f8ce6649dfd51adf498bbe467e6b648356480577cf243a1",
    "logs": [],
    "blockNumber": 7207288,
    "cumulativeGasUsed": "23848131",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "dcf241f080366d569af28ea25529f741",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"addressOfPropoal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"govAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createPool(address,string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"create a new pool\"},\"createProposalVoteTokens(address,uint256)\":{\"details\":\"create vote tokens to vote on given proposal\"},\"destroyProposalVoteTokens(address,uint256)\":{\"details\":\"destroy the vote tokens for the given proposal\"},\"execute(address,address)\":{\"details\":\"execute craete pool proposal\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/governance/GovernanceLib.sol\":\"GovernanceLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/governance/GovernanceLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/INFTGemPool.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\n\\nlibrary GovernanceLib {\\n\\n    // calculates the CREATE2 address for the quantized erc20 without making any external calls\\n    function addressOfPropoal(\\n        address factory,\\n        address submitter,\\n        string memory title\\n    ) public pure returns (address govAddress) {\\n        govAddress = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(submitter, title)),\\n                        hex\\\"74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev create vote tokens to vote on given proposal\\n     */\\n    function createProposalVoteTokens(address multitoken, uint256 proposalHash) external {\\n        for (uint256 i = 0; i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0); i++) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(0, i);\\n            INFTGemMultiToken(multitoken).mint(holder, proposalHash,\\n                IERC1155(multitoken).balanceOf(holder, 0)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev destroy the vote tokens for the given proposal\\n     */\\n    function destroyProposalVoteTokens(address multitoken, uint256 proposalHash) external {\\n        for (uint256 i = 0; i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0); i++) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(0, i);\\n            INFTGemMultiToken(multitoken).burn(holder, proposalHash,\\n                IERC1155(multitoken).balanceOf(holder, proposalHash)\\n            );\\n        }\\n    }\\n\\n        /**\\n     * @dev execute craete pool proposal\\n     */\\n    function execute(\\n        address factory,\\n        address proposalAddress) public returns (address newPool) {\\n\\n        // get the data for the new pool from the proposal\\n        address proposalData = IProposal(proposalAddress).proposalData();\\n\\n        (\\n            string memory symbol,\\n            string memory name,\\n\\n            uint256 ethPrice,\\n            uint256 minTime,\\n            uint256 maxTime,\\n            uint256 diffStep,\\n            uint256 maxClaims,\\n\\n            address allowedToken\\n        ) = ICreatePoolProposalData(proposalData).data();\\n\\n        // create the new pool\\n        newPool = createPool(\\n            factory,\\n\\n            symbol,\\n            name,\\n\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffStep,\\n            maxClaims,\\n\\n            allowedToken\\n        );\\n    }\\n\\n    /**\\n     * @dev create a new pool\\n     */\\n    function createPool(\\n        address factory,\\n\\n        string memory symbol,\\n        string memory name,\\n\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n\\n        address allowedToken\\n    ) public returns (address pool) {\\n        pool = INFTGemPoolFactory(factory).createNFTGemPool(\\n            symbol,\\n            name,\\n\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n\\n            allowedToken\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2090eda57fb9d6c1b61d3c819a546322b652c354d3f466e61a00ad94fcfca88f\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2f2d8600b126c9f7e41c2d3f94d9cf833ccd0312b74a9563c769743a192f81ca\",\"license\":\"MIT\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9f0c9d0f1d70f965bac24c4b70bb8df227e598228a86ab7f526382f14887b1a6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPool {\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function setVisible(bool visible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 category) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function rescue(address erc20token, uint256 tokenAmount) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6c2ba95bb3c2eafbc9d7bf749cafc943f7d2476a89b5a03744f3fc53b64cde96\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 mintTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event CustomNFTGemPoolCreated(\\n        string gemSymbol,\\n        string gemName\\n    );\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createCustomNFTGemPool(\\n         bytes memory bytecode,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0x1a7ffd0ade35f877601bf7b496b1a03635538362bb45604e38f2d0f74ceecb9c\",\"license\":\"MIT\"},\"src/interfaces/IProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposal {\\n    enum ProposalType {CREATE_POOL, FUND_PROJECT, CHANGE_FEE, UPDATE_ALLOWLIST}\\n\\n    enum ProposalStatus {NOT_FUNDED, ACTIVE, PASSED, FAILED, EXECUTED, CLOSED}\\n\\n    event ProposalCreated(address creator, address pool, uint256 proposalHash);\\n\\n    event ProposalExecuted(uint256 proposalHash);\\n\\n    event ProposalClosed(uint256 proposalHash);\\n\\n    function creator() external view returns (address);\\n\\n    function title() external view returns (string memory);\\n\\n    function funder() external view returns (address);\\n\\n    function expiration() external view returns (uint256);\\n\\n    function status() external view returns (ProposalStatus);\\n\\n    function proposalData() external view returns (address);\\n\\n    function proposalType() external view returns (ProposalType);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address gov) external;\\n\\n    function fund() external payable;\\n\\n    function execute() external;\\n\\n    function close() external;\\n\\n    function initialize(\\n        address,\\n        string memory,\\n        address,\\n        ProposalType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5913ecf90344d4b65cf8a2d9e321b95ff6a7a65efb775c5a947ff63c28933146\",\"license\":\"MIT\"},\"src/interfaces/IProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ICreatePoolProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n\\n            address\\n        );\\n}\\n\\ninterface IChangeFeeProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\\ninterface IFundProjectProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        );\\n}\\n\\ninterface IUpdateAllowlistProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x421398d5113f97d0bbdb364ace977f1c51599c10972feb11e1ff994ea1eca86e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610eb1610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c806385efa54c1161005a57806385efa54c146102f65780638851debd1461033e578063d80aea151461038457610071565b80631500cfba1461007657806326740ac01461022a575b600080fd5b81801561008257600080fd5b50610201600480360361012081101561009a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156100d257600080fd5b8201836020820111156100e457600080fd5b8035906020019184600183028401116401000000008311171561010657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561015957600080fd5b82018360208201111561016b57600080fd5b8035906020019184600183028401116401000000008311171561018d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff166103cc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6102016004803603606081101561024057600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169181019060608101604082013564010000000081111561028157600080fd5b82018360208201111561029357600080fd5b803590602001918460018302840111640100000000831117156102b557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061056a945050505050565b81801561030257600080fd5b5061033c6004803603604081101561031957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356106bc565b005b81801561034a57600080fd5b5061033c6004803603604081101561036157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561091e565b81801561039057600080fd5b50610201600480360360408110156103a757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610b7b565b60008973ffffffffffffffffffffffffffffffffffffffff16634ff8f07e8a8a8a8a8a8a8a8a6040518963ffffffff1660e01b81526004018080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b8381101561047c578181015183820152602001610464565b50505050905090810190601f1680156104a95780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b838110156104dc5781810151838201526020016104c4565b50505050905090810190601f1680156105095780820380516001836020036101000a031916815260200191505b509a5050505050505050505050602060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b505050506040513d602081101561055a57600080fd5b50519a9950505050505050505050565b6000838383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b815260140182805190602001908083835b602083106105de57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016105a1565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012060405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001807f74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf815250602001925050506040516020818303038152906040528051906020012060001c90509392505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663f68ee90e60006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561071157600080fd5b505afa158015610725573d6000803e3d6000fd5b505050506040513d602081101561073b57600080fd5b50518110156109195760008373ffffffffffffffffffffffffffffffffffffffff1663740ec99e6000846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156107a057600080fd5b505afa1580156107b4573d6000803e3d6000fd5b505050506040513d60208110156107ca57600080fd5b5051604080517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301526000602483015291519293509086169163156e29f69184918791859162fdd58e91604480820192602092909190829003018186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d602081101561087a57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526024840192909252604483015251606480830192600092919082900301818387803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b5050600190930192506106bf915050565b505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663f68ee90e60006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561097357600080fd5b505afa158015610987573d6000803e3d6000fd5b505050506040513d602081101561099d57600080fd5b50518110156109195760008373ffffffffffffffffffffffffffffffffffffffff1663740ec99e6000846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d6020811015610a2c57600080fd5b5051604080517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301526024820187905291519293509086169163f5298aca9184918791859162fdd58e91604480820192602092909190829003018186803b158015610ab257600080fd5b505afa158015610ac6573d6000803e3d6000fd5b505050506040513d6020811015610adc57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526024840192909252604483015251606480830192600092919082900301818387803b158015610b5657600080fd5b505af1158015610b6a573d6000803e3d6000fd5b505060019093019250610921915050565b6000808273ffffffffffffffffffffffffffffffffffffffff16634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc457600080fd5b505afa158015610bd8573d6000803e3d6000fd5b505050506040513d6020811015610bee57600080fd5b810190808051906020019092919050505090506060806000806000806000808873ffffffffffffffffffffffffffffffffffffffff166373d4a13a6040518163ffffffff1660e01b815260040160006040518083038186803b158015610c5357600080fd5b505afa158015610c67573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610100811015610caf57600080fd5b8101908080516040519392919084640100000000821115610ccf57600080fd5b908301906020820185811115610ce457600080fd5b8251640100000000811182820188101715610cfe57600080fd5b82525081516020918201929091019080838360005b83811015610d2b578181015183820152602001610d13565b50505050905090810190601f168015610d585780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115610d7b57600080fd5b908301906020820185811115610d9057600080fd5b8251640100000000811182820188101715610daa57600080fd5b82525081516020918201929091019080838360005b83811015610dd7578181015183820152602001610dbf565b50505050905090810190601f168015610e045780820380516001836020036101000a031916815260200191505b5060405260200180519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505097509750975097509750975097509750610e6b8c89898989898989896103cc565b9c9b50505050505050505050505056fea26469706673582212202b92fcfc29d132a4f29cfda6199c8ee6491e9492afaa4d1d47fee53f7f1c6a9964736f6c63430007030033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c806385efa54c1161005a57806385efa54c146102f65780638851debd1461033e578063d80aea151461038457610071565b80631500cfba1461007657806326740ac01461022a575b600080fd5b81801561008257600080fd5b50610201600480360361012081101561009a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156100d257600080fd5b8201836020820111156100e457600080fd5b8035906020019184600183028401116401000000008311171561010657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561015957600080fd5b82018360208201111561016b57600080fd5b8035906020019184600183028401116401000000008311171561018d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff166103cc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6102016004803603606081101561024057600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169181019060608101604082013564010000000081111561028157600080fd5b82018360208201111561029357600080fd5b803590602001918460018302840111640100000000831117156102b557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061056a945050505050565b81801561030257600080fd5b5061033c6004803603604081101561031957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356106bc565b005b81801561034a57600080fd5b5061033c6004803603604081101561036157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561091e565b81801561039057600080fd5b50610201600480360360408110156103a757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610b7b565b60008973ffffffffffffffffffffffffffffffffffffffff16634ff8f07e8a8a8a8a8a8a8a8a6040518963ffffffff1660e01b81526004018080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b8381101561047c578181015183820152602001610464565b50505050905090810190601f1680156104a95780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b838110156104dc5781810151838201526020016104c4565b50505050905090810190601f1680156105095780820380516001836020036101000a031916815260200191505b509a5050505050505050505050602060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b505050506040513d602081101561055a57600080fd5b50519a9950505050505050505050565b6000838383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b815260140182805190602001908083835b602083106105de57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016105a1565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012060405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001807f74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf815250602001925050506040516020818303038152906040528051906020012060001c90509392505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663f68ee90e60006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561071157600080fd5b505afa158015610725573d6000803e3d6000fd5b505050506040513d602081101561073b57600080fd5b50518110156109195760008373ffffffffffffffffffffffffffffffffffffffff1663740ec99e6000846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156107a057600080fd5b505afa1580156107b4573d6000803e3d6000fd5b505050506040513d60208110156107ca57600080fd5b5051604080517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301526000602483015291519293509086169163156e29f69184918791859162fdd58e91604480820192602092909190829003018186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d602081101561087a57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526024840192909252604483015251606480830192600092919082900301818387803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b5050600190930192506106bf915050565b505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663f68ee90e60006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561097357600080fd5b505afa158015610987573d6000803e3d6000fd5b505050506040513d602081101561099d57600080fd5b50518110156109195760008373ffffffffffffffffffffffffffffffffffffffff1663740ec99e6000846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d6020811015610a2c57600080fd5b5051604080517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301526024820187905291519293509086169163f5298aca9184918791859162fdd58e91604480820192602092909190829003018186803b158015610ab257600080fd5b505afa158015610ac6573d6000803e3d6000fd5b505050506040513d6020811015610adc57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526024840192909252604483015251606480830192600092919082900301818387803b158015610b5657600080fd5b505af1158015610b6a573d6000803e3d6000fd5b505060019093019250610921915050565b6000808273ffffffffffffffffffffffffffffffffffffffff16634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc457600080fd5b505afa158015610bd8573d6000803e3d6000fd5b505050506040513d6020811015610bee57600080fd5b810190808051906020019092919050505090506060806000806000806000808873ffffffffffffffffffffffffffffffffffffffff166373d4a13a6040518163ffffffff1660e01b815260040160006040518083038186803b158015610c5357600080fd5b505afa158015610c67573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610100811015610caf57600080fd5b8101908080516040519392919084640100000000821115610ccf57600080fd5b908301906020820185811115610ce457600080fd5b8251640100000000811182820188101715610cfe57600080fd5b82525081516020918201929091019080838360005b83811015610d2b578181015183820152602001610d13565b50505050905090810190601f168015610d585780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115610d7b57600080fd5b908301906020820185811115610d9057600080fd5b8251640100000000811182820188101715610daa57600080fd5b82525081516020918201929091019080838360005b83811015610dd7578181015183820152602001610dbf565b50505050905090810190601f168015610e045780820380516001836020036101000a031916815260200191505b5060405260200180519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505097509750975097509750975097509750610e6b8c89898989898989896103cc565b9c9b50505050505050505050505056fea26469706673582212202b92fcfc29d132a4f29cfda6199c8ee6491e9492afaa4d1d47fee53f7f1c6a9964736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createPool(address,string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "create a new pool"
      },
      "createProposalVoteTokens(address,uint256)": {
        "details": "create vote tokens to vote on given proposal"
      },
      "destroyProposalVoteTokens(address,uint256)": {
        "details": "destroy the vote tokens for the given proposal"
      },
      "execute(address,address)": {
        "details": "execute craete pool proposal"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}