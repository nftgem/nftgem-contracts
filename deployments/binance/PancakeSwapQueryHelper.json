{
  "address": "0x70EC520bC874750815a1CD5109F6dF9A971AcF2A",
  "abi": [
    {
      "inputs": [],
      "name": "COIN",
      "outputs": [
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "coinQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethereum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethReserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "fac",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPathForCoinToToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "hasPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x60e84d3169a099938269f2ff52e8976d831e15ccd6273c654e1fde025398ab4c",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x70EC520bC874750815a1CD5109F6dF9A971AcF2A",
    "transactionIndex": 84,
    "gasUsed": "501333",
    "logsBloom": "0x
    "blockHash": "0xb2c0eecb3d72cbc0b523cfda9e053bc686e489c303be380f0c8546424e45c9f8",
    "transactionHash": "0x60e84d3169a099938269f2ff52e8976d831e15ccd6273c654e1fde025398ab4c",
    "logs": [],
    "blockNumber": 7207310,
    "cumulativeGasUsed": "13709234",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "dcf241f080366d569af28ea25529f741",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"COIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"coinQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethereum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fac\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPathForCoinToToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uniswap helpers\",\"kind\":\"dev\",\"methods\":{\"COIN()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"coinQuote(address,uint256)\":{\"details\":\"Get a quote in Ethereum for the given ERC20 token / token amount\"},\"factory()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"getPair(address,address)\":{\"details\":\"looks for a pool vs weth\"},\"getPathForCoinToToken(address)\":{\"details\":\"Get a path for ethereum to the given token\"},\"getReserves(address)\":{\"details\":\"Get the pair reserves given two erc20 tokens\"},\"hasPool(address)\":{\"details\":\"does token have a pool\"},\"setFactory(address)\":{\"details\":\"set factory\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/swap/pancakeswap/PancakeSwapQueryHelper.sol\":\"PancakeSwapQueryHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakeFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x5aa3cb565f2793e4ae2b90e716aa5f5d38bf68f6f09caa62fe2395db27171faf\"},\"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakePair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xc432aeec5c038f15c3670ee6128ce41dbfa1f7a9979dc37b967213436ae77b33\"},\"pancakeswap-peripheral/contracts/interfaces/IPancakeRouter01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0xbe0107ac7350e1360883dc9627fd19cb5bc79dc9e982fcd1900833af38a32000\"},\"pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\r\\n\\r\\nimport './IPancakeRouter01.sol';\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc8c33596699aa8663bf00da05557bbe54a4809ce7db437ac08e4de58b2f6d6b5\"},\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ISwapQueryHelper {\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(address pair) external view returns (uint256, uint256);\\n\\n    function getPathForCoinToToken(address token) external pure returns (address[] memory);\\n\\n    function setFactory(address f) external;\\n}\\n\",\"keccak256\":\"0x36e47f43dc3f309d516f238f4744143e1d2cb23e0206729103478534960e7693\",\"license\":\"MIT\"},\"src/swap/pancakeswap/PancakeSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakeFactory.sol\\\";\\nimport \\\"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakePair.sol\\\";\\n\\n/**\\n * @dev pancake helpers\\n */\\nlibrary PancakeSwapLib {\\n\\n    address public constant PANCAKE_ROUTER_ADDRESS = 0xBCfCcbde45cE874adCB698cC183deBcF17952812;\\n\\n    /**\\n     * @dev Get a quote in Ethereum for the given ERC20 token / token amount\\n     */\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256 coin,\\n            uint256 tokenReserve,\\n            uint256 coinReserve\\n        )\\n    {\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS );\\n        address _factory = pancakeRouter.factory();\\n        address _COIN = pancakeRouter.WETH();\\n        address _pair = IPancakeFactory(_factory).getPair(token, _COIN);\\n        (tokenReserve, coinReserve, ) = IPancakePair(_pair).getReserves();\\n        coin = quote(tokenAmount, tokenReserve, coinReserve);\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function factory() external pure returns (address fac) {\\n        fac = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS ).factory();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function COIN() external pure returns (address wavax) {\\n        wavax = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS ).WETH();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function hasPool(address token) external view returns (bool) {\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS );\\n        address _factory = pancakeRouter.factory();\\n        address _WAVAX = pancakeRouter.WETH();\\n        address _pair = IPancakeFactory(_factory).getPair(token, _WAVAX);\\n        return _pair != address(0);\\n    }\\n\\n    /**\\n     * @dev looks for a pool vs wavax\\n     */\\n    function getPair(address _factory, address tokenA, address tokenB) external view returns (address pair) {\\n        require(_factory != address(0), \\\"INVALID_TOKENS\\\");\\n        require(tokenA != address(0) && tokenB != address(0), \\\"INVALID_TOKENS\\\");\\n        pair =\\n            IPancakeFactory(_factory).getPair(\\n                tokenA,\\n                tokenB\\n            );\\n    }\\n\\n    /**\\n     * @dev Get the pair reserves given two erc20 tokens\\n     */\\n    function getReserves(\\n        address pair\\n    ) external view returns (uint256 reserveA, uint256 reserveB) {\\n        (reserveA, reserveB, ) = IPancakePair(pair).getReserves();\\n    }\\n\\n    /**\\n     * @dev calculate pair address\\n     */\\n    function pairFor(\\n        address _factory,\\n        address tokenA,\\n        address tokenB\\n    ) external pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        _factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"d0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Get a path for coin to the given token\\n     */\\n    function getPathForCoinToToken(address token) external pure returns (address[] memory) {\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS );\\n        address[] memory path = new address[](2);\\n        path[0] = token;\\n        path[1] = pancakeRouter.WETH();\\n        return path;\\n    }\\n\\n    /**\\n     * @dev given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     */\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"Price: Price\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"Price: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * (reserveB)) / reserveA;\\n    }\\n\\n    /**\\n     * @dev returns sorted token addresses, used to handle return values from pairs sorted in this order\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"Price: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Price: ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x57f4889d12f513f28cd552a7f4a883d169598b562644f000eabd477a6d1f07fd\",\"license\":\"MIT\"},\"src/swap/pancakeswap/PancakeSwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./PancakeSwapLib.sol\\\";\\nimport \\\"../../interfaces/ISwapQueryHelper.sol\\\";\\n\\n/**\\n * @dev Uniswap helpers\\n */\\ncontract PancakeSwapQueryHelper is ISwapQueryHelper {\\n    /**\\n     * @dev Get a quote in Ethereum for the given ERC20 token / token amount\\n     */\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 ethereum,\\n            uint256 tokenReserve,\\n            uint256 ethReserve\\n        )\\n    {\\n        return PancakeSwapLib.coinQuote(token, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function factory() external pure override returns (address fac) {\\n        fac = PancakeSwapLib.factory();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function COIN() external pure override returns (address weth) {\\n        weth = PancakeSwapLib.COIN();\\n    }\\n\\n    /**\\n     * @dev does token have a pool\\n     */\\n    function hasPool(address token) external view override returns (bool) {\\n        return PancakeSwapLib.hasPool(token);\\n    }\\n\\n    /**\\n     * @dev looks for a pool vs weth\\n     */\\n    function getPair(address tokenA, address tokenB) external view override returns (address pair) {\\n        address _factory = PancakeSwapLib.factory();\\n        pair = PancakeSwapLib.getPair(_factory, tokenA, tokenB);\\n    }\\n\\n    /**\\n     * @dev Get the pair reserves given two erc20 tokens\\n     */\\n    function getReserves(address pair) external view override returns (uint256 reserveA, uint256 reserveB) {\\n        (reserveA, reserveB) = PancakeSwapLib.getReserves(pair);\\n    }\\n\\n    /**\\n     * @dev Get a path for ethereum to the given token\\n     */\\n    function getPathForCoinToToken(address token) external pure override returns (address[] memory) {\\n        return PancakeSwapLib.getPathForCoinToToken(token);\\n    }\\n\\n    /**\\n     * @dev set factory\\n     */\\n    function setFactory(address) external override {}\\n}\\n\",\"keccak256\":\"0x14c552c483252f524afca6ee7c1c6678667d752c24d578e94a2a3b2b48299df0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061081d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063868d2d1e1161005b578063868d2d1e146101d8578063a54a72b71461022f578063c45a015514610260578063e6a439051461026857610088565b8063096666961461008d5780631246dbf5146101105780633e99c1e4146101575780635bb47808146101a3575b600080fd5b6100c0600480360360208110156100a357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166102a3565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100fc5781810151838201526020016100e4565b505050509050019250505060405180910390f35b6101436004803603602081101561012657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103f8565b604080519115158252519081900360200190f35b61018a6004803603602081101561016d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610491565b6040805192835260208301919091528051918290030190f35b6101d6600480360360208110156101b957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610535565b005b610211600480360360408110156101ee57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610538565b60408051938452602084019290925282820152519081900360600190f35b6102376105ef565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610237610666565b6102376004803603604081101561027e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166106ac565b606073FF32E5Db9Eb8b4b546EC8Dc968795654f414f87c6309666696836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b15801561030a57600080fd5b505af415801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561036557600080fd5b810190808051604051939291908464010000000082111561038557600080fd5b90830190602082018581111561039a57600080fd5b82518660208202830111640100000000821117156103b757600080fd5b82525081516020918201928201910280838360005b838110156103e45781810151838201526020016103cc565b505050509050016040525050509050919050565b600073FF32E5Db9Eb8b4b546EC8Dc968795654f414f87c631246dbf5836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561045f57600080fd5b505af4158015610473573d6000803e3d6000fd5b505050506040513d602081101561048957600080fd5b505192915050565b60008073FF32E5Db9Eb8b4b546EC8Dc968795654f414f87c633e99c1e4846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b1580156104f857600080fd5b505af415801561050c573d6000803e3d6000fd5b505050506040513d604081101561052257600080fd5b5080516020909101519094909350915050565b50565b600080600073FF32E5Db9Eb8b4b546EC8Dc968795654f414f87c63868d2d1e86866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060606040518083038186803b1580156105aa57600080fd5b505af41580156105be573d6000803e3d6000fd5b505050506040513d60608110156105d457600080fd5b50805160208201516040909201519097919650945092505050565b600073FF32E5Db9Eb8b4b546EC8Dc968795654f414f87c63a54a72b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561063557600080fd5b505af4158015610649573d6000803e3d6000fd5b505050506040513d602081101561065f57600080fd5b5051919050565b600073FF32E5Db9Eb8b4b546EC8Dc968795654f414f87c63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561063557600080fd5b60008073FF32E5Db9Eb8b4b546EC8Dc968795654f414f87c63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f357600080fd5b505af4158015610707573d6000803e3d6000fd5b505050506040513d602081101561071d57600080fd5b5051604080517f61e0b77f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152808816602483015286166044820152905191925073FF32E5Db9Eb8b4b546EC8Dc968795654f414f87c916361e0b77f91606480820192602092909190829003018186803b1580156107b357600080fd5b505af41580156107c7573d6000803e3d6000fd5b505050506040513d60208110156107dd57600080fd5b505194935050505056fea2646970667358221220359e9aa429c109d049c3b6943b0a9aa49d9b20b2e66a1efa7ad534c7f5a222be64736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063868d2d1e1161005b578063868d2d1e146101d8578063a54a72b71461022f578063c45a015514610260578063e6a439051461026857610088565b8063096666961461008d5780631246dbf5146101105780633e99c1e4146101575780635bb47808146101a3575b600080fd5b6100c0600480360360208110156100a357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166102a3565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100fc5781810151838201526020016100e4565b505050509050019250505060405180910390f35b6101436004803603602081101561012657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103f8565b604080519115158252519081900360200190f35b61018a6004803603602081101561016d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610491565b6040805192835260208301919091528051918290030190f35b6101d6600480360360208110156101b957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610535565b005b610211600480360360408110156101ee57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610538565b60408051938452602084019290925282820152519081900360600190f35b6102376105ef565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610237610666565b6102376004803603604081101561027e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166106ac565b606073__$efe28ed289513e473eb243609f3411e964$__6309666696836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b15801561030a57600080fd5b505af415801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561036557600080fd5b810190808051604051939291908464010000000082111561038557600080fd5b90830190602082018581111561039a57600080fd5b82518660208202830111640100000000821117156103b757600080fd5b82525081516020918201928201910280838360005b838110156103e45781810151838201526020016103cc565b505050509050016040525050509050919050565b600073__$efe28ed289513e473eb243609f3411e964$__631246dbf5836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561045f57600080fd5b505af4158015610473573d6000803e3d6000fd5b505050506040513d602081101561048957600080fd5b505192915050565b60008073__$efe28ed289513e473eb243609f3411e964$__633e99c1e4846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b1580156104f857600080fd5b505af415801561050c573d6000803e3d6000fd5b505050506040513d604081101561052257600080fd5b5080516020909101519094909350915050565b50565b600080600073__$efe28ed289513e473eb243609f3411e964$__63868d2d1e86866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060606040518083038186803b1580156105aa57600080fd5b505af41580156105be573d6000803e3d6000fd5b505050506040513d60608110156105d457600080fd5b50805160208201516040909201519097919650945092505050565b600073__$efe28ed289513e473eb243609f3411e964$__63a54a72b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561063557600080fd5b505af4158015610649573d6000803e3d6000fd5b505050506040513d602081101561065f57600080fd5b5051919050565b600073__$efe28ed289513e473eb243609f3411e964$__63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561063557600080fd5b60008073__$efe28ed289513e473eb243609f3411e964$__63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f357600080fd5b505af4158015610707573d6000803e3d6000fd5b505050506040513d602081101561071d57600080fd5b5051604080517f61e0b77f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152808816602483015286166044820152905191925073__$efe28ed289513e473eb243609f3411e964$__916361e0b77f91606480820192602092909190829003018186803b1580156107b357600080fd5b505af41580156107c7573d6000803e3d6000fd5b505050506040513d60208110156107dd57600080fd5b505194935050505056fea2646970667358221220359e9aa429c109d049c3b6943b0a9aa49d9b20b2e66a1efa7ad534c7f5a222be64736f6c63430007030033",
  "libraries": {
    "PancakeSwapLib": "0xFF32E5Db9Eb8b4b546EC8Dc968795654f414f87c"
  },
  "devdoc": {
    "details": "Uniswap helpers",
    "kind": "dev",
    "methods": {
      "COIN()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "coinQuote(address,uint256)": {
        "details": "Get a quote in Ethereum for the given ERC20 token / token amount"
      },
      "factory()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "getPair(address,address)": {
        "details": "looks for a pool vs weth"
      },
      "getPathForCoinToToken(address)": {
        "details": "Get a path for ethereum to the given token"
      },
      "getReserves(address)": {
        "details": "Get the pair reserves given two erc20 tokens"
      },
      "hasPool(address)": {
        "details": "does token have a pool"
      },
      "setFactory(address)": {
        "details": "set factory"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}